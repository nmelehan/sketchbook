//
// Utility code for loading and managing sketch
//

var sketchCollection = window.sketchCollection || {};

sketchCollection["sketch_2015_0620d"] = {
    sketchName : "sketch_2015_0620d",

    init : function(parentElement) {
        this.parentElement = parentElement;
        this.canvas = $("<canvas class='gallerysketch' />").appendTo(parentElement)[0];

        this.processingInstance = new Processing(this.canvas, this.sketchCode);
        this.setSketchSize();

        this.initComplete = true;
    },

    setSketchSize : function() {
        var parentWidth = $(this.parentElement).innerWidth();
        var parentHeight = $(this.parentElement).innerHeight();

        this.processingInstance.size(parentWidth*window.devicePixelRatio, parentHeight*window.devicePixelRatio);

        $(this.canvas).width(parentWidth);
        $(this.canvas).height(parentHeight);
    },

    resize : function() {
        // save image data so it can be applied to context after resize
        var sketchCanvasContext = this.canvas.getContext("2d");
        var oldWidth = this.canvas.width;
        var oldHeight = this.canvas.height;
        var imageData = sketchCanvasContext.getImageData(0, 0, oldWidth, oldHeight);

        this.setSketchSize();

        // apply saved image data
        var newWidth = this.canvas.width;
        var newHeight = this.canvas.height;

        var imageDataX = (newWidth - oldWidth)/2;
        var imageDataY = (newHeight - oldHeight)/2;
        sketchCanvasContext.putImageData(imageData, imageDataX, imageDataY);

        this.processingInstance.sketchCanvasDidResize();
    },

    //
    // Processing code for sketch
    //

    sketchCode :

    // this code was autogenerated from PJS
    function($p) {
        var HLocatable = (function() {
            function HLocatable() {
                throw 'Unable to create the interface';
            }
            HLocatable.$isInterface = true;
            HLocatable.$methods = ['x', 'x', 'y', 'y', 'z', 'z'];
            return HLocatable;
        })();
        $p.HLocatable = HLocatable;
        var HRotatable = (function() {
            function HRotatable() {
                throw 'Unable to create the interface';
            }
            HRotatable.$isInterface = true;
            HRotatable.$methods = ['rotationRad', 'rotationRad'];
            return HRotatable;
        })();
        $p.HRotatable = HRotatable;
        var HNode = (function() {
            function HNode() {
                var $this_1 = this;

                function $superCstr() {
                    $p.extendClassChain($this_1)
                }
                $this_1._prev = null;
                $this_1._next = null;

                function prev$0() {
                    return $this_1._prev;
                }
                $p.addMethod($this_1, 'prev', prev$0, false);

                function next$0() {
                    return $this_1._next;
                }
                $p.addMethod($this_1, 'next', next$0, false);

                function poppedOut$0() {
                    return ($this_1._prev == null) && ($this_1._next == null);
                }
                $p.addMethod($this_1, 'poppedOut', poppedOut$0, false);

                function popOut$0() {
                    if ($this_1._prev != null) $this_1._prev._next = $this_1._next;
                    if ($this_1._next != null) $this_1._next._prev = $this_1._prev;
                    $this_1._prev = $this_1._next = null;
                }
                $p.addMethod($this_1, 'popOut', popOut$0, false);

                function putBefore$1(dest) {
                    if (dest == null || $p.__equals(dest, $this_1.$self)) return;
                    if (!$this_1.$self.poppedOut()) $this_1.$self.popOut();
                    var p = dest._prev;
                    if (p != null) p._next = $this_1.$self;
                    $this_1._prev = p;
                    $this_1._next = dest;
                    dest._prev = $this_1.$self;
                }
                $p.addMethod($this_1, 'putBefore', putBefore$1, false);

                function putAfter$1(dest) {
                    if (dest == null || $p.__equals(dest, $this_1.$self)) return;
                    if (!$this_1.$self.poppedOut()) $this_1.$self.popOut();
                    var n = dest.next();
                    dest._next = $this_1.$self;
                    $this_1._prev = dest;
                    $this_1._next = n;
                    if (n != null) n._prev = $this_1.$self;
                }
                $p.addMethod($this_1, 'putAfter', putAfter$1, false);

                function replaceNode$1(dest) {
                    if (dest == null || $p.__equals(dest, $this_1.$self)) return;
                    if (!$this_1.$self.poppedOut()) $this_1.$self.popOut();
                    var p = dest._prev;
                    var n = dest._next;
                    dest._prev = dest._next = null;
                    $this_1._prev = p;
                    $this_1._next = n;
                }
                $p.addMethod($this_1, 'replaceNode', replaceNode$1, false);

                function swapLeft$0() {
                    if ($this_1._prev == null) return;
                    var pairPrev = $this_1._prev._prev;
                    var pairNext = $this_1._next;
                    $this_1._next = $this_1._prev;
                    $this_1._prev._prev = $this_1.$self;
                    $this_1._prev._next = pairNext;
                    if (pairNext != null) pairNext._prev = $this_1._prev;
                    $this_1._prev = pairPrev;
                    if (pairPrev != null) pairPrev._next = $this_1.$self;
                }
                $p.addMethod($this_1, 'swapLeft', swapLeft$0, false);

                function swapRight$0() {
                    if ($this_1._next == null) return;
                    var pairPrev = $this_1._prev;
                    var pairNext = $this_1._next._next;
                    $this_1._next._next = $this_1.$self;
                    $this_1._prev = $this_1._next;
                    $this_1._next._prev = pairPrev;
                    if (pairPrev != null) pairPrev._next = $this_1._next;
                    $this_1._next = pairNext;
                    if (pairNext != null) pairNext._prev = $this_1.$self;
                }
                $p.addMethod($this_1, 'swapRight', swapRight$0, false);

                function $constr() {
                    $superCstr();
                }
                $constr.apply(null, arguments);
            }
            return HNode;
        })();
        $p.HNode = HNode;
        var HDirectable = (function() {
            function HDirectable() {
                throw 'Unable to create the interface';
            }
            $p.extendInterfaceMembers(HDirectable, HLocatable);
            $p.extendInterfaceMembers(HDirectable, HRotatable);
            HDirectable.$interfaces = [HLocatable, HRotatable];
            HDirectable.$isInterface = true;
            HDirectable.$methods = [''];
            return HDirectable;
        })();
        $p.HDirectable = HDirectable;
        var HHittable = (function() {
            function HHittable() {
                throw 'Unable to create the interface';
            }
            HHittable.$isInterface = true;
            HHittable.$methods = ['contains', 'contains', 'containsRel', 'containsRel'];
            return HHittable;
        })();
        $p.HHittable = HHittable;
        var HBehavior = (function() {
            function HBehavior() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HNode.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $this_1._registry = null;

                function register$0() {
                    H.behaviors().register($this_1.$self);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'register', register$0, false);

                function unregister$0() {
                    H.behaviors().unregister($this_1.$self);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'unregister', unregister$0, false);

                function poppedOut$0() {
                    return $this_1._registry == null;
                }
                $p.addMethod($this_1, 'poppedOut', poppedOut$0, false);

                function popOut$0() {
                    $super.popOut();
                    $this_1._registry = null;
                }
                $p.addMethod($this_1, 'popOut', popOut$0, false);

                function swapLeft$0() {
                    if ($this_1._prev._prev == null) return;
                    $super.swapLeft();
                }
                $p.addMethod($this_1, 'swapLeft', swapLeft$0, false);

                function putAfter$1(dest) {
                    if (dest._registry == null) return;
                    $super.putAfter(dest);
                    $this_1._registry = dest._registry;
                }
                $p.addMethod($this_1, 'putAfter', putAfter$1, false);

                function putBefore$1(dest) {
                    if (dest._registry == null) return;
                    $super.putBefore(dest);
                    $this_1._registry = dest._registry;
                }
                $p.addMethod($this_1, 'putBefore', putBefore$1, false);

                function replaceNode$1(target) {
                    $super.replaceNode(target);
                    $this_1._registry = target._registry;
                    target._registry = null;
                }
                $p.addMethod($this_1, 'replaceNode', replaceNode$1, false);

                function runBehavior$1(app) {

                }
                $p.addMethod($this_1, 'runBehavior', runBehavior$1, false);

                function $constr() {
                    $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HBehavior, HNode);
            HBehavior.$base = HNode;
            return HBehavior;
        })();
        $p.HBehavior = HBehavior;
        var HColorist = (function() {
            function HColorist() {
                throw 'Unable to create the interface';
            }
            HColorist.$isInterface = true;
            HColorist.$methods = ['fillOnly', 'strokeOnly', 'fillAndStroke', 'appliesFill', 'appliesStroke', 'applyColor'];
            return HColorist;
        })();
        $p.HColorist = HColorist;
        var HDrawable = (function() {
            function HDrawable() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HNode.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $this_1.HDrawableIterator = HDrawable.HDrawableIterator;
                $p.defineProperty($this_1, 'DEFAULT_FILL', {
                    get: function() {
                        return HDrawable.DEFAULT_FILL
                    },
                    set: function(val) {
                        HDrawable.DEFAULT_FILL = val
                    }
                });
                $p.defineProperty($this_1, 'DEFAULT_STROKE', {
                    get: function() {
                        return HDrawable.DEFAULT_STROKE
                    },
                    set: function(val) {
                        HDrawable.DEFAULT_STROKE = val
                    }
                });
                $p.defineProperty($this_1, 'DEFAULT_WIDTH', {
                    get: function() {
                        return HDrawable.DEFAULT_WIDTH
                    },
                    set: function(val) {
                        HDrawable.DEFAULT_WIDTH = val
                    }
                });
                $p.defineProperty($this_1, 'DEFAULT_HEIGHT', {
                    get: function() {
                        return HDrawable.DEFAULT_HEIGHT
                    },
                    set: function(val) {
                        HDrawable.DEFAULT_HEIGHT = val
                    }
                });
                $p.defineProperty($this_1, 'BITMASK_PROPORTIONAL', {
                    get: function() {
                        return HDrawable.BITMASK_PROPORTIONAL
                    },
                    set: function(val) {
                        HDrawable.BITMASK_PROPORTIONAL = val
                    }
                });
                $p.defineProperty($this_1, 'BITMASK_TRANSFORMS_CHILDREN', {
                    get: function() {
                        return HDrawable.BITMASK_TRANSFORMS_CHILDREN
                    },
                    set: function(val) {
                        HDrawable.BITMASK_TRANSFORMS_CHILDREN = val
                    }
                });
                $p.defineProperty($this_1, 'BITMASK_STYLES_CHILDREN', {
                    get: function() {
                        return HDrawable.BITMASK_STYLES_CHILDREN
                    },
                    set: function(val) {
                        HDrawable.BITMASK_STYLES_CHILDREN = val
                    }
                });
                $p.defineProperty($this_1, 'BITMASK_ROTATES_CHILDREN', {
                    get: function() {
                        return HDrawable.BITMASK_ROTATES_CHILDREN
                    },
                    set: function(val) {
                        HDrawable.BITMASK_ROTATES_CHILDREN = val
                    }
                });
                $this_1._parent = null;
                $this_1._firstChild = null;
                $this_1._lastChild = null;
                $this_1._extras = null;
                $this_1._x = 0;
                $this_1._y = 0;
                $this_1._z = 0;
                $this_1._anchorU = 0;
                $this_1._anchorV = 0;
                $this_1._width = 0;
                $this_1._height = 0;
                $this_1._rotationXRad = 0;
                $this_1._rotationYRad = 0;
                $this_1._rotationZRad = 0;
                $this_1._strokeWeight = 0;
                $this_1._alphaPc = 0;
                $this_1._numChildren = 0;
                $this_1._fill = 0;
                $this_1._stroke = 0;
                $this_1._strokeCap = 0;
                $this_1._strokeJoin = 0;
                $this_1._flags = null;

                function copyPropertiesFrom$1(other) {
                    $this_1._x = other._x;
                    $this_1._y = other._y;
                    $this_1._anchorU = other._anchorU;
                    $this_1._anchorV = other._anchorV;
                    $this_1._width = other._width;
                    $this_1._height = other._height;
                    $this_1._rotationZRad = other._rotationZRad;
                    $this_1._alphaPc = other._alphaPc;
                    $this_1._strokeWeight = other._strokeWeight;
                    $this_1._fill = other._fill;
                    $this_1._stroke = other._stroke;
                    $this_1._strokeCap = other._strokeCap;
                    $this_1._strokeJoin = other._strokeJoin;
                }
                $p.addMethod($this_1, 'copyPropertiesFrom', copyPropertiesFrom$1, false);

                function createCopy$0() {

                }
                $p.addMethod($this_1, 'createCopy', createCopy$0, false);

                function invalidChild$1(destParent) {
                    if (destParent == null) return true;
                    if ($p.__equals(destParent, $this_1.$self)) return true;
                    return false;
                }
                $p.addMethod($this_1, 'invalidChild', invalidChild$1, false);

                function invalidDest$2(dest, warnLoc) {
                    var warnType = null;
                    var warnMsg = null;
                    if (dest == null) {
                        warnType = "Null Destination";
                        warnMsg = HWarnings.NULL_ARGUMENT;
                    } else if (dest._parent == null) {
                        warnType = "Invalid Destination";
                        warnMsg = HWarnings.INVALID_DEST;
                    } else if ($p.__equals(dest._parent, $this_1.$self)) {
                        warnType = "Recursive Child";
                        warnMsg = HWarnings.CHILDCEPTION;
                    } else if ($p.__equals(dest, $this_1.$self)) {
                        warnType = "Invalid Destination";
                        warnMsg = HWarnings.DESTCEPTION;
                    } else return false;
                    HWarnings.warn(warnType, warnLoc, warnMsg);
                    return true;
                }
                $p.addMethod($this_1, 'invalidDest', invalidDest$2, false);

                function poppedOut$0() {
                    return ($this_1._parent == null);
                }
                $p.addMethod($this_1, 'poppedOut', poppedOut$0, false);

                function popOut$0() {
                    if ($this_1._parent == null) return;
                    if ($this_1._prev == null) $this_1._parent._firstChild = $this_1._next;
                    if ($this_1._next == null) $this_1._parent._lastChild = $this_1._prev;
                    --$this_1._parent._numChildren;
                    $this_1._parent = null;
                    $super.popOut();
                }
                $p.addMethod($this_1, 'popOut', popOut$0, false);

                function putBefore$1(dest) {
                    if ($this_1.$self.invalidDest(dest, "HDrawable.putBefore()")) return;
                    $this_1.$self.popOut();
                    $super.putBefore(dest);
                    $this_1._parent = dest._parent;
                    if ($this_1._prev == null) $this_1._parent._firstChild = $this_1.$self;
                    ++$this_1._parent._numChildren;
                }
                $p.addMethod($this_1, 'putBefore', putBefore$1, false);

                function putAfter$1(dest) {
                    if ($this_1.$self.invalidDest(dest, "HDrawable.putAfter()")) return;
                    $this_1.$self.popOut();
                    $super.putAfter(dest);
                    $this_1._parent = dest._parent;
                    if ($this_1._next == null) $this_1._parent._lastChild = $this_1.$self;
                    ++$this_1._parent._numChildren;
                }
                $p.addMethod($this_1, 'putAfter', putAfter$1, false);

                function swapLeft$0() {
                    var isLast = ($this_1._next == null);
                    $super.swapLeft();
                    if ($this_1._prev == null) $this_1._parent._firstChild = $this_1.$self;
                    if ($this_1._next != null && isLast) $this_1._parent._lastChild = $this_1._next;
                }
                $p.addMethod($this_1, 'swapLeft', swapLeft$0, false);

                function swapRight$0() {
                    var isFirst = ($this_1._prev == null);
                    $super.swapRight();
                    if ($this_1._next == null) $this_1._parent._lastChild = $this_1.$self;
                    if ($this_1._prev != null && isFirst) $this_1._parent._firstChild = $this_1._prev;
                }
                $p.addMethod($this_1, 'swapRight', swapRight$0, false);

                function replaceNode$1(dest) {
                    if ($this_1.$self.invalidDest(dest, "HDrawable.replaceNode()")) return;
                    $super.replaceNode(dest);
                    $this_1._parent = dest._parent;
                    dest._parent = null;
                    if ($this_1._prev == null) $this_1._parent._firstChild = $this_1.$self;
                    if ($this_1._next == null) $this_1._parent._lastChild = $this_1.$self;
                }
                $p.addMethod($this_1, 'replaceNode', replaceNode$1, false);

                function parent$0() {
                    return $this_1._parent;
                }
                $p.addMethod($this_1, 'parent', parent$0, false);

                function firstChild$0() {
                    return $this_1._firstChild;
                }
                $p.addMethod($this_1, 'firstChild', firstChild$0, false);

                function lastChild$0() {
                    return $this_1._lastChild;
                }
                $p.addMethod($this_1, 'lastChild', lastChild$0, false);

                function parentOf$1(d) {
                    return (d != null) && (d._parent != null) && ($p.__equals(d._parent, $this_1.$self));
                }
                $p.addMethod($this_1, 'parentOf', parentOf$1, false);

                function numChildren$0() {
                    return $this_1._numChildren;
                }
                $p.addMethod($this_1, 'numChildren', numChildren$0, false);

                function add$1(child) {
                    $this_1.$self.add(child);
                    return child;
                }
                $p.addMethod($this_1, 'add', add$1, false);

                function add$1_2(child) {
                    $this_1.$self.add(child);
                    return child;
                }
                $p.addMethod($this_1, 'add', add$1_2, false);

                function add$1_3(child) {
                    $this_1.$self.add(child);
                    return child;
                }
                $p.addMethod($this_1, 'add', add$1_3, false);

                function add$1_4(child) {
                    $this_1.$self.add(child);
                    return child;
                }
                $p.addMethod($this_1, 'add', add$1_4, false);

                function add$1_5(child) {
                    $this_1.$self.add(child);
                    return child;
                }
                $p.addMethod($this_1, 'add', add$1_5, false);

                function add$1_6(child) {
                    $this_1.$self.add(child);
                    return child;
                }
                $p.addMethod($this_1, 'add', add$1_6, false);

                function add$1_7(child) {
                    $this_1.$self.add(child);
                    return child;
                }
                $p.addMethod($this_1, 'add', add$1_7, false);

                function add$1_8(child) {
                    $this_1.$self.add(child);
                    return child;
                }
                $p.addMethod($this_1, 'add', add$1_8, false);

                function add$1_9(child) {
                    if (child == null) {
                        HWarnings.warn("An Empty Child", "HDrawable.add()", HWarnings.NULL_ARGUMENT);
                    } else if (child.invalidChild($this_1.$self)) {
                        HWarnings.warn("Invalid Child", "HDrawable.add()", HWarnings.INVALID_CHILD);
                    } else if (!$this_1.$self.parentOf(child)) {
                        if ($this_1._lastChild == null) {
                            $this_1._firstChild = $this_1._lastChild = child;
                            child.popOut();
                            child._parent = $this_1.$self;
                            ++$this_1._numChildren;
                        } else child.putAfter($this_1._lastChild);
                    }
                    return child;
                }
                $p.addMethod($this_1, 'add', add$1_9, false);

                function remove$1(child) {
                    $this_1.$self.remove(child);
                    return child;
                }
                $p.addMethod($this_1, 'remove', remove$1, false);

                function remove$1_2(child) {
                    $this_1.$self.remove(child);
                    return child;
                }
                $p.addMethod($this_1, 'remove', remove$1_2, false);

                function remove$1_3(child) {
                    $this_1.$self.remove(child);
                    return child;
                }
                $p.addMethod($this_1, 'remove', remove$1_3, false);

                function remove$1_4(child) {
                    $this_1.$self.remove(child);
                    return child;
                }
                $p.addMethod($this_1, 'remove', remove$1_4, false);

                function remove$1_5(child) {
                    $this_1.$self.remove(child);
                    return child;
                }
                $p.addMethod($this_1, 'remove', remove$1_5, false);

                function remove$1_6(child) {
                    $this_1.$self.remove(child);
                    return child;
                }
                $p.addMethod($this_1, 'remove', remove$1_6, false);

                function remove$1_7(child) {
                    $this_1.$self.remove(child);
                    return child;
                }
                $p.addMethod($this_1, 'remove', remove$1_7, false);

                function remove$1_8(child) {
                    $this_1.$self.remove(child);
                    return child;
                }
                $p.addMethod($this_1, 'remove', remove$1_8, false);

                function remove$1_9(child) {
                    if ($this_1.$self.parentOf(child)) child.popOut();
                    else HWarnings.warn("Not a Child", "HDrawable.remove()", null);
                    return child;
                }
                $p.addMethod($this_1, 'remove', remove$1_9, false);

                function iterator$0() {
                    return new $this_1.HDrawableIterator($this_1.$self);
                }
                $p.addMethod($this_1, 'iterator', iterator$0, false);

                function loc$2(newX, newY) {
                    $this_1._x = newX;
                    $this_1._y = newY;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'loc', loc$2, false);

                function loc$3_2(newX, newY, newZ) {
                    $this_1._x = newX;
                    $this_1._y = newY;
                    $this_1._z = newZ;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'loc', loc$3_2, false);

                function loc$1_3(pt) {
                    $this_1._x = pt.x;
                    $this_1._y = pt.y;
                    $this_1._z = pt.z;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'loc', loc$1_3, false);

                function loc$0_4() {
                    return new $p.PVector($this_1._x, $this_1._y, $this_1._z);
                }
                $p.addMethod($this_1, 'loc', loc$0_4, false);

                function x$1(newX) {
                    $this_1._x = newX;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'x', x$1, false);

                function x$0_2() {
                    return $this_1._x;
                }
                $p.addMethod($this_1, 'x', x$0_2, false);

                function y$1(newY) {
                    $this_1._y = newY;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'y', y$1, false);

                function y$0_2() {
                    return $this_1._y;
                }
                $p.addMethod($this_1, 'y', y$0_2, false);

                function z$1(newZ) {
                    $this_1._z = newZ;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'z', z$1, false);

                function z$0_2() {
                    return $this_1._z;
                }
                $p.addMethod($this_1, 'z', z$0_2, false);

                function move$2(dx, dy) {
                    $this_1._x += dx;
                    $this_1._y += dy;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'move', move$2, false);

                function move$3_2(dx, dy, dz) {
                    $this_1._x += dx;
                    $this_1._y += dy;
                    $this_1._z += dz;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'move', move$3_2, false);

                function locAt$1(where) {
                    if ($this_1._parent != null) {
                        if (HMath.hasBits(where, HConstants.CENTER_X)) {
                            $this_1._x = $this_1._parent.width() / 2 - $this_1._parent.anchorX();
                        } else if (HMath.hasBits(where, HConstants.LEFT)) {
                            $this_1._x = -$this_1._parent.anchorX();
                        } else if (HMath.hasBits(where, HConstants.RIGHT)) {
                            $this_1._x = $this_1._parent.width() - $this_1._parent.anchorX();
                        }
                        if (HMath.hasBits(where, HConstants.CENTER_Y)) {
                            $this_1._y = $this_1._parent.height() / 2 - $this_1._parent.anchorY();
                        } else if (HMath.hasBits(where, HConstants.TOP)) {
                            $this_1._y = -$this_1._parent.anchorY();
                        } else if (HMath.hasBits(where, HConstants.BOTTOM)) {
                            $this_1._y = $this_1._parent.height() - $this_1._parent.anchorY();
                        }
                    }
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'locAt', locAt$1, false);

                function anchor$2(pxX, pxY) {
                    return $this_1.$self.anchorX(pxX).anchorY(pxY);
                }
                $p.addMethod($this_1, 'anchor', anchor$2, false);

                function anchor$1_2(pt) {
                    return $this_1.$self.anchor(pt.x, pt.y);
                }
                $p.addMethod($this_1, 'anchor', anchor$1_2, false);

                function anchor$0_3() {
                    return new $p.PVector($this_1.$self.anchorX(), $this_1.$self.anchorY());
                }
                $p.addMethod($this_1, 'anchor', anchor$0_3, false);

                function anchorX$1(pxX) {
                    $this_1._anchorU = pxX / ($this_1._width == 0 ? 100 : $this_1._width);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'anchorX', anchorX$1, false);

                function anchorX$0_2() {
                    return $this_1._width * $this_1._anchorU;
                }
                $p.addMethod($this_1, 'anchorX', anchorX$0_2, false);

                function anchorY$1(pxY) {
                    $this_1._anchorV = pxY / ($this_1._height == 0 ? 100 : $this_1._height);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'anchorY', anchorY$1, false);

                function anchorY$0_2() {
                    return $this_1._height * $this_1._anchorV;
                }
                $p.addMethod($this_1, 'anchorY', anchorY$0_2, false);

                function anchorUV$2(u, v) {
                    return $this_1.$self.anchorU(u).anchorV(v);
                }
                $p.addMethod($this_1, 'anchorUV', anchorUV$2, false);

                function anchorUV$0_2() {
                    return new $p.PVector($this_1._anchorU, $this_1._anchorV);
                }
                $p.addMethod($this_1, 'anchorUV', anchorUV$0_2, false);

                function anchorU$1(u) {
                    $this_1._anchorU = u;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'anchorU', anchorU$1, false);

                function anchorU$0_2() {
                    return $this_1._anchorU;
                }
                $p.addMethod($this_1, 'anchorU', anchorU$0_2, false);

                function anchorV$1(v) {
                    $this_1._anchorV = v;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'anchorV', anchorV$1, false);

                function anchorV$0_2() {
                    return $this_1._anchorV;
                }
                $p.addMethod($this_1, 'anchorV', anchorV$0_2, false);

                function anchorAt$1(where) {
                    if (HMath.hasBits(where, HConstants.CENTER_X)) $this_1._anchorU = 0.5;
                    else if (HMath.hasBits(where, HConstants.LEFT)) $this_1._anchorU = 0;
                    else if (HMath.hasBits(where, HConstants.RIGHT)) $this_1._anchorU = 1;
                    if (HMath.hasBits(where, HConstants.CENTER_Y)) $this_1._anchorV = 0.5;
                    else if (HMath.hasBits(where, HConstants.TOP)) $this_1._anchorV = 0;
                    else if (HMath.hasBits(where, HConstants.BOTTOM)) $this_1._anchorV = 1;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'anchorAt', anchorAt$1, false);

                function size$2(w, h) {
                    $this_1.$self.onResize($this_1._width, $this_1._height, $this_1._width = w, $this_1._height = h);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'size', size$2, false);

                function size$1_2(s) {
                    return $this_1.$self.size(s, s);
                }
                $p.addMethod($this_1, 'size', size$1_2, false);

                function size$1_3(s) {
                    return $this_1.$self.size(s.x, s.y);
                }
                $p.addMethod($this_1, 'size', size$1_3, false);

                function size$0_4() {
                    return new $p.PVector($this_1._width, $this_1._height);
                }
                $p.addMethod($this_1, 'size', size$0_4, false);

                function width$1(w) {
                    $this_1.$self.onResize($this_1._width, $this_1._height, $this_1._width = w, $this_1._height);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'width', width$1, false);

                function width$0_2() {
                    return $this_1._width;
                }
                $p.addMethod($this_1, 'width', width$0_2, false);

                function height$1(h) {
                    $this_1.$self.onResize($this_1._width, $this_1._height, $this_1._width, $this_1._height = h);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'height', height$1, false);

                function height$0_2() {
                    return $this_1._height;
                }
                $p.addMethod($this_1, 'height', height$0_2, false);

                function scale$1(s) {
                    return $this_1.$self.size($this_1._width * s, $this_1._height * s);
                }
                $p.addMethod($this_1, 'scale', scale$1, false);

                function scale$2_2(sw, sh) {
                    return $this_1.$self.size($this_1._width * sw, $this_1._height * sh);
                }
                $p.addMethod($this_1, 'scale', scale$2_2, false);

                function proportional$1(b) {
                    $this_1._flags = HMath.setBits($this_1._flags, HDrawable.BITMASK_PROPORTIONAL, b);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'proportional', proportional$1, false);

                function proportional$0_2() {
                    return HMath.hasBits($this_1._flags, HDrawable.BITMASK_PROPORTIONAL);
                }
                $p.addMethod($this_1, 'proportional', proportional$0_2, false);

                function transformsChildren$1(b) {
                    $this_1._flags = HMath.setBits($this_1._flags, HDrawable.BITMASK_TRANSFORMS_CHILDREN, b);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'transformsChildren', transformsChildren$1, false);

                function transformsChildren$0_2() {
                    return HMath.hasBits($this_1._flags, HDrawable.BITMASK_TRANSFORMS_CHILDREN);
                }
                $p.addMethod($this_1, 'transformsChildren', transformsChildren$0_2, false);

                function onResize$4(oldW, oldH, newW, newH) {
                    if ($this_1.$self.proportional()) {
                        if (newH != oldH) {
                            if (oldH != 0) $this_1._width = oldW * newH / oldH;
                        } else if (newW != oldW) {
                            if (oldW != 0) $this_1._height = oldH * newW / oldW;
                        }
                    }
                    if ($this_1.$self.transformsChildren()) {
                        var scalew = (oldW == 0) ? 1 : $this_1._width / oldW;
                        var scaleh = (oldH == 0) ? 1 : $this_1._height / oldH;
                        var child = $this_1._firstChild;
                        while (child != null) {
                            child.loc(child._x * scalew, child._y * scaleh);
                            child.scale(scalew, scaleh);
                            child = child._next;
                        }
                    }
                }
                $p.addMethod($this_1, 'onResize', onResize$4, false);

                function bounds$2(boundsLoc, boundsSize) {
                    var vals = $p.createJavaArray('float', [4]);
                    $this_1.$self.bounds(vals);
                    boundsLoc.x = vals[0];
                    boundsLoc.y = vals[1];
                    boundsSize.x = vals[2];
                    boundsSize.y = vals[3];
                }
                $p.addMethod($this_1, 'bounds', bounds$2, false);

                function bounds$1_2(boundsValues) {
                    var x1 = -$this_1.$self.anchorX(),
                        y1 = -$this_1.$self.anchorY();
                    var x2 = x1 + $this_1._width,
                        y2 = y1 + $this_1._height;
                    var minx = 0,
                        miny = 0,
                        maxx = 0,
                        maxy = 0;
                    var tl = HMath.absLocArr($this_1.$self, x1, y1);
                    minx = maxx = tl[0];
                    miny = maxy = tl[1];
                    var tr = HMath.absLocArr($this_1.$self, x2, y1);
                    if (tr[0] < minx) minx = tr[0];
                    else if (tr[0] > maxx) maxx = tr[0];
                    if (tr[1] < miny) miny = tr[1];
                    else if (tr[1] > maxy) maxy = tr[1];
                    var bl = HMath.absLocArr($this_1.$self, x1, y2);
                    if (bl[0] < minx) minx = bl[0];
                    else if (bl[0] > maxx) maxx = bl[0];
                    if (bl[1] < miny) miny = bl[1];
                    else if (bl[1] > maxy) maxy = bl[1];
                    var br = HMath.absLocArr($this_1.$self, x2, y2);
                    if (br[0] < minx) minx = br[0];
                    else if (br[0] > maxx) maxx = br[0];
                    if (br[1] < miny) miny = br[1];
                    else if (br[1] > maxy) maxy = br[1];
                    boundsValues[0] = minx;
                    boundsValues[1] = miny;
                    boundsValues[2] = maxx - minx;
                    boundsValues[3] = maxy - miny;
                }
                $p.addMethod($this_1, 'bounds', bounds$1_2, false);

                function boundingSize$0() {
                    var cosVal = Math.cos($this_1._rotationZRad);
                    var sinVal = Math.sin($this_1._rotationZRad);
                    var drawX = -$this_1.$self.anchorX();
                    var drawY = -$this_1.$self.anchorY();
                    var x1 = drawX;
                    var x2 = $this_1._width + drawX;
                    var y1 = drawY;
                    var y2 = $this_1._height + drawY;
                    var xCoords = $p.createJavaArray('float', [4]);
                    var yCoords = $p.createJavaArray('float', [4]);
                    xCoords[0] = x1 * cosVal + y1 * sinVal;
                    yCoords[0] = x1 * sinVal + y1 * cosVal;
                    xCoords[1] = x2 * cosVal + y1 * sinVal;
                    yCoords[1] = x2 * sinVal + y1 * cosVal;
                    xCoords[2] = x1 * cosVal + y2 * sinVal;
                    yCoords[2] = x1 * sinVal + y2 * cosVal;
                    xCoords[3] = x2 * cosVal + y2 * sinVal;
                    yCoords[3] = x2 * sinVal + y2 * cosVal;
                    var minX = xCoords[3];
                    var maxX = minX;
                    var minY = yCoords[3];
                    var maxY = maxX;
                    for (var i = 0; i < 3; ++i) {
                        var x = xCoords[i];
                        var y = yCoords[i];
                        if (x < minX) minX = x;
                        else if (x > maxX) maxX = x;
                        if (y < minY) minY = y;
                        else if (y > maxY) maxY = y;
                    }
                    return new $p.PVector(maxX - minX, maxY - minY);
                }
                $p.addMethod($this_1, 'boundingSize', boundingSize$0, false);

                function fill$1(clr) {
                    if (0 <= clr && clr <= 255) clr |= clr << 8 | clr << 16 | 0xFF000000;
                    $this_1._fill = clr;
                    $this_1.$self.onStyleChange();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'fill', fill$1, false);

                function fill$2_2(clr, alpha) {
                    if (0 <= clr && clr <= 255) clr |= clr << 8 | clr << 16;
                    $this_1._fill = HColors.setAlpha(clr, alpha);
                    $this_1.$self.onStyleChange();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'fill', fill$2_2, false);

                function fill$3_3(r, g, b) {
                    $this_1._fill = HColors.merge(255, r, g, b);
                    $this_1.$self.onStyleChange();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'fill', fill$3_3, false);

                function fill$4_4(r, g, b, a) {
                    $this_1._fill = HColors.merge(a, r, g, b);
                    $this_1.$self.onStyleChange();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'fill', fill$4_4, false);

                function fill$0_5() {
                    return $this_1._fill;
                }
                $p.addMethod($this_1, 'fill', fill$0_5, false);

                function noFill$0() {
                    return $this_1.$self.fill(HConstants.CLEAR);
                }
                $p.addMethod($this_1, 'noFill', noFill$0, false);

                function stroke$1(clr) {
                    if (0 <= clr && clr <= 255) clr |= clr << 8 | clr << 16 | 0xFF000000;
                    $this_1._stroke = clr;
                    $this_1.$self.onStyleChange();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'stroke', stroke$1, false);

                function stroke$2_2(clr, alpha) {
                    if (0 <= clr && clr <= 255) clr |= clr << 8 | clr << 16;
                    $this_1._stroke = HColors.setAlpha(clr, alpha);
                    $this_1.$self.onStyleChange();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'stroke', stroke$2_2, false);

                function stroke$3_3(r, g, b) {
                    $this_1._stroke = HColors.merge(255, r, g, b);
                    $this_1.$self.onStyleChange();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'stroke', stroke$3_3, false);

                function stroke$4_4(r, g, b, a) {
                    $this_1._stroke = HColors.merge(a, r, g, b);
                    $this_1.$self.onStyleChange();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'stroke', stroke$4_4, false);

                function stroke$0_5() {
                    return $this_1._stroke;
                }
                $p.addMethod($this_1, 'stroke', stroke$0_5, false);

                function noStroke$0() {
                    return $this_1.$self.stroke(HConstants.CLEAR);
                }
                $p.addMethod($this_1, 'noStroke', noStroke$0, false);

                function strokeCap$1(type) {
                    $this_1._strokeCap = type;
                    $this_1.$self.onStyleChange();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'strokeCap', strokeCap$1, false);

                function strokeCap$0_2() {
                    return $this_1._strokeCap;
                }
                $p.addMethod($this_1, 'strokeCap', strokeCap$0_2, false);

                function strokeJoin$1(type) {
                    $this_1._strokeJoin = type;
                    $this_1.$self.onStyleChange();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'strokeJoin', strokeJoin$1, false);

                function strokeJoin$0_2() {
                    return $this_1._strokeJoin;
                }
                $p.addMethod($this_1, 'strokeJoin', strokeJoin$0_2, false);

                function strokeWeight$1(f) {
                    $this_1._strokeWeight = f;
                    $this_1.$self.onStyleChange();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'strokeWeight', strokeWeight$1, false);

                function strokeWeight$0_2() {
                    return $this_1._strokeWeight;
                }
                $p.addMethod($this_1, 'strokeWeight', strokeWeight$0_2, false);

                function stylesChildren$1(b) {
                    $this_1._flags = HMath.setBits($this_1._flags, HDrawable.BITMASK_STYLES_CHILDREN, b);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'stylesChildren', stylesChildren$1, false);

                function stylesChildren$0_2() {
                    return HMath.hasBits($this_1._flags, HDrawable.BITMASK_STYLES_CHILDREN);
                }
                $p.addMethod($this_1, 'stylesChildren', stylesChildren$0_2, false);

                function onStyleChange$0() {
                    if ($this_1.$self.stylesChildren()) {
                        var d = $this_1._firstChild;
                        while (d != null) {
                            d._stroke = $this_1._stroke;
                            d._strokeWeight = $this_1._strokeWeight;
                            d._strokeJoin = $this_1._strokeJoin;
                            d._strokeCap = $this_1._strokeCap;
                            d._fill = $this_1._fill;
                            d = d._next;
                        }
                    }
                }
                $p.addMethod($this_1, 'onStyleChange', onStyleChange$0, false);

                function rotation$1(deg) {
                    return $this_1.$self.rotationZ(deg);
                }
                $p.addMethod($this_1, 'rotation', rotation$1, false);

                function rotation$0_2() {
                    return $this_1.$self.rotationZ();
                }
                $p.addMethod($this_1, 'rotation', rotation$0_2, false);

                function rotationRad$1(rad) {
                    return $this_1.$self.rotationZRad(rad);
                }
                $p.addMethod($this_1, 'rotationRad', rotationRad$1, false);

                function rotationRad$0_2() {
                    return $this_1.$self.rotationZRad();
                }
                $p.addMethod($this_1, 'rotationRad', rotationRad$0_2, false);

                function rotate$1(deg) {
                    return $this_1.$self.rotateZ(deg);
                }
                $p.addMethod($this_1, 'rotate', rotate$1, false);

                function rotateRad$1(rad) {
                    return $this_1.$self.rotateZRad(rad);
                }
                $p.addMethod($this_1, 'rotateRad', rotateRad$1, false);

                function rotationX$1(deg) {
                    return $this_1.$self.rotationXRad(deg * HConstants.D2R);
                }
                $p.addMethod($this_1, 'rotationX', rotationX$1, false);

                function rotationX$0_2() {
                    return $this_1.$self.rotationXRad() * HConstants.R2D;
                }
                $p.addMethod($this_1, 'rotationX', rotationX$0_2, false);

                function rotationXRad$1(rad) {
                    if ($this_1.$self.rotatesChildren()) {
                        for (var d = $this_1._firstChild; d != null;) d = d.rotationXRad(rad).next();
                    } else $this_1._rotationXRad = rad;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'rotationXRad', rotationXRad$1, false);

                function rotationXRad$0_2() {
                    return ($this_1.$self.rotatesChildren() && $this_1._firstChild != null) ? $this_1._firstChild.rotationXRad() : $this_1._rotationXRad;
                }
                $p.addMethod($this_1, 'rotationXRad', rotationXRad$0_2, false);

                function rotateX$1(deg) {
                    return $this_1.$self.rotationXRad($this_1._rotationXRad + deg * HConstants.D2R);
                }
                $p.addMethod($this_1, 'rotateX', rotateX$1, false);

                function rotateXRad$1(rad) {
                    return $this_1.$self.rotationXRad($this_1._rotationXRad + rad);
                }
                $p.addMethod($this_1, 'rotateXRad', rotateXRad$1, false);

                function rotationY$1(deg) {
                    return $this_1.$self.rotationYRad(deg * HConstants.D2R);
                }
                $p.addMethod($this_1, 'rotationY', rotationY$1, false);

                function rotationY$0_2() {
                    return $this_1.$self.rotationYRad() * HConstants.R2D;
                }
                $p.addMethod($this_1, 'rotationY', rotationY$0_2, false);

                function rotationYRad$1(rad) {
                    if ($this_1.$self.rotatesChildren()) {
                        for (var d = $this_1._firstChild; d != null;) d = d.rotationYRad(rad).next();
                    } else $this_1._rotationYRad = rad;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'rotationYRad', rotationYRad$1, false);

                function rotationYRad$0_2() {
                    return ($this_1.$self.rotatesChildren() && $this_1._firstChild != null) ? $this_1._firstChild.rotationYRad() : $this_1._rotationYRad;
                }
                $p.addMethod($this_1, 'rotationYRad', rotationYRad$0_2, false);

                function rotateY$1(deg) {
                    return $this_1.$self.rotationYRad($this_1._rotationYRad + deg * HConstants.D2R);
                }
                $p.addMethod($this_1, 'rotateY', rotateY$1, false);

                function rotateYRad$1(rad) {
                    return $this_1.$self.rotationYRad($this_1._rotationYRad + rad);
                }
                $p.addMethod($this_1, 'rotateYRad', rotateYRad$1, false);

                function rotationZ$1(deg) {
                    return $this_1.$self.rotationZRad(deg * HConstants.D2R);
                }
                $p.addMethod($this_1, 'rotationZ', rotationZ$1, false);

                function rotationZ$0_2() {
                    return $this_1.$self.rotationZRad() * HConstants.R2D;
                }
                $p.addMethod($this_1, 'rotationZ', rotationZ$0_2, false);

                function rotationZRad$1(rad) {
                    if ($this_1.$self.rotatesChildren()) {
                        for (var d = $this_1._firstChild; d != null;) d = d.rotationZRad(rad).next();
                    } else $this_1._rotationZRad = rad;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'rotationZRad', rotationZRad$1, false);

                function rotationZRad$0_2() {
                    return ($this_1.$self.rotatesChildren() && $this_1._firstChild != null) ? $this_1._firstChild.rotationZRad() : $this_1._rotationZRad;
                }
                $p.addMethod($this_1, 'rotationZRad', rotationZRad$0_2, false);

                function rotateZ$1(deg) {
                    return $this_1.$self.rotationZRad($this_1._rotationZRad + deg * HConstants.D2R);
                }
                $p.addMethod($this_1, 'rotateZ', rotateZ$1, false);

                function rotateZRad$1(rad) {
                    return $this_1.$self.rotationZRad($this_1._rotationZRad + rad);
                }
                $p.addMethod($this_1, 'rotateZRad', rotateZRad$1, false);

                function rotatesChildren$1(b) {
                    $this_1._flags = HMath.setBits($this_1._flags, HDrawable.BITMASK_ROTATES_CHILDREN, b);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'rotatesChildren', rotatesChildren$1, false);

                function rotatesChildren$0_2() {
                    return HMath.hasBits($this_1._flags, HDrawable.BITMASK_ROTATES_CHILDREN);
                }
                $p.addMethod($this_1, 'rotatesChildren', rotatesChildren$0_2, false);

                function alpha$1(a) {
                    return $this_1.$self.alphaPc(a / 255);
                }
                $p.addMethod($this_1, 'alpha', alpha$1, false);

                function alpha$0_2() {
                    return Math.round($this_1.$self.alphaPc() * 255);
                }
                $p.addMethod($this_1, 'alpha', alpha$0_2, false);

                function alphaPc$1(f) {
                    $this_1._alphaPc = (f < 0) ? 0 : (f > 1) ? 1 : f;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'alphaPc', alphaPc$1, false);

                function alphaPc$0_2() {
                    return ($this_1._alphaPc < 0) ? 0 : $this_1._alphaPc;
                }
                $p.addMethod($this_1, 'alphaPc', alphaPc$0_2, false);

                function visibility$1(v) {
                    if (v && ($this_1._alphaPc == 0)) {
                        $this_1._alphaPc = 1;
                    } else if (v == ($this_1._alphaPc < 0)) {
                        $this_1._alphaPc = -$this_1._alphaPc;
                    }
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'visibility', visibility$1, false);

                function visibility$0_2() {
                    return $this_1._alphaPc > 0;
                }
                $p.addMethod($this_1, 'visibility', visibility$0_2, false);

                function show$0() {
                    return $this_1.$self.visibility(true);
                }
                $p.addMethod($this_1, 'show', show$0, false);

                function hide$0() {
                    return $this_1.$self.visibility(false);
                }
                $p.addMethod($this_1, 'hide', hide$0, false);

                function alphaShift$1(da) {
                    return $this_1.$self.alphaShiftPc(da / 255);
                }
                $p.addMethod($this_1, 'alphaShift', alphaShift$1, false);

                function alphaShiftPc$1(f) {
                    return $this_1.$self.alphaPc($this_1._alphaPc + f);
                }
                $p.addMethod($this_1, 'alphaShiftPc', alphaShiftPc$1, false);

                function x2u$1(px) {
                    return px / ($this_1._width == 0 ? 100 : $this_1._width);
                }
                $p.addMethod($this_1, 'x2u', x2u$1, false);

                function y2v$1(px) {
                    return px / ($this_1._height == 0 ? 100 : $this_1._height);
                }
                $p.addMethod($this_1, 'y2v', y2v$1, false);

                function u2x$1(pc) {
                    return pc * $this_1._width;
                }
                $p.addMethod($this_1, 'u2x', u2x$1, false);

                function v2y$1(pc) {
                    return pc * $this_1._height;
                }
                $p.addMethod($this_1, 'v2y', v2y$1, false);

                function extras$1(b) {
                    $this_1._extras = b;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'extras', extras$1, false);

                function extras$0_2() {
                    return $this_1._extras;
                }
                $p.addMethod($this_1, 'extras', extras$0_2, false);

                function obj$2(key, value) {
                    if ($this_1._extras == null) $this_1._extras = new HBundle();
                    $this_1._extras.obj(key, value);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'obj', obj$2, false);

                function num$2(key, value) {
                    if ($this_1._extras == null) $this_1._extras = new HBundle();
                    $this_1._extras.num(key, value);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'num', num$2, false);

                function bool$2(key, value) {
                    if ($this_1._extras == null) $this_1._extras = new HBundle();
                    $this_1._extras.bool(key, value);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'bool', bool$2, false);

                function obj$1_2(key) {
                    return ($this_1._extras == null) ? null : $this_1._extras.obj(key);
                }
                $p.addMethod($this_1, 'obj', obj$1_2, false);

                function str$1(key) {
                    return ($this_1._extras == null) ? null : $this_1._extras.str(key);
                }
                $p.addMethod($this_1, 'str', str$1, false);

                function num$1_2(key) {
                    return ($this_1._extras == null) ? 0 : $this_1._extras.num(key);
                }
                $p.addMethod($this_1, 'num', num$1_2, false);

                function numI$1(key) {
                    return ($this_1._extras == null) ? 0 : $this_1._extras.numI(key);
                }
                $p.addMethod($this_1, 'numI', numI$1, false);

                function bool$1_2(key) {
                    return ($this_1._extras == null) ? false : $this_1._extras.bool(key);
                }
                $p.addMethod($this_1, 'bool', bool$1_2, false);

                function contains$3(absX, absY, absZ) {
                    var app = H.app();
                    absZ -= $this_1._z;
                    return $this_1.$self.contains(app.screenX(absX, absY, absZ), app.screenY(absX, absY, absZ));
                }
                $p.addMethod($this_1, 'contains', contains$3, false);

                function contains$2_2(absX, absY) {
                    var rel = HMath.relLocArr($this_1.$self, absX, absY);
                    rel[0] += $this_1.$self.anchorX();
                    rel[1] += $this_1.$self.anchorY();
                    return $this_1.$self.containsRel(rel[0], rel[1]);
                }
                $p.addMethod($this_1, 'contains', contains$2_2, false);

                function containsRel$3(relX, relY, relZ) {
                    var app = H.app();
                    relZ -= $this_1._z;
                    return $this_1.$self.containsRel(app.screenX(relX, relY, relZ), app.screenY(relX, relY, relZ));
                }
                $p.addMethod($this_1, 'containsRel', containsRel$3, false);

                function containsRel$2_2(relX, relY) {
                    return (0 <= relX) && (relX <= $this_1._width) && (0 <= relY) && (relY <= $this_1._height);
                }
                $p.addMethod($this_1, 'containsRel', containsRel$2_2, false);

                function applyStyle$2(g, currAlphaPc) {
                    var faPc = currAlphaPc * ($this_1._fill >>> 24);
                    g.fill($this_1._fill | 0xFF000000, Math.round(faPc));
                    if ($this_1._strokeWeight > 0) {
                        var saPc = currAlphaPc * ($this_1._stroke >>> 24);
                        g.stroke($this_1._stroke | 0xFF000000, Math.round(saPc));
                        g.strokeWeight($this_1._strokeWeight);
                        g.strokeCap($this_1._strokeCap);
                        g.strokeJoin($this_1._strokeJoin);
                    } else g.noStroke();
                }
                $p.addMethod($this_1, 'applyStyle', applyStyle$2, false);

                function paintAll$3(g, usesZ, currAlphaPc) {
                    if ($this_1._alphaPc <= 0) return;
                    g.pushMatrix();
                    if (usesZ) {
                        g.translate($this_1._x, $this_1._y, $this_1._z);
                        g.rotateX($this_1._rotationXRad);
                        g.rotateY($this_1._rotationYRad);
                        g.rotateZ($this_1._rotationZRad);
                    } else {
                        g.translate($this_1._x, $this_1._y);
                        g.rotate($this_1._rotationZRad);
                    }
                    currAlphaPc *= $this_1._alphaPc;
                    $this_1.$self.draw(g, usesZ, -$this_1.$self.anchorX(), -$this_1.$self.anchorY(), currAlphaPc);
                    var child = $this_1._firstChild;
                    while (child != null) {
                        child.paintAll(g, usesZ, currAlphaPc);
                        child = child._next;
                    }
                    g.popMatrix();
                }
                $p.addMethod($this_1, 'paintAll', paintAll$3, false);

                function draw$5(g, usesZ, drawX, drawY, currAlphaPc) {

                }
                $p.addMethod($this_1, 'draw', draw$5, false);

                function $constr_0() {
                    $superCstr();

                    $this_1._alphaPc = 1;
                    $this_1._fill = HDrawable.DEFAULT_FILL;
                    $this_1._stroke = HDrawable.DEFAULT_STROKE;
                    $this_1._strokeCap = $p.PConstants.ROUND;
                    $this_1._strokeJoin = $p.PConstants.MITER;
                    $this_1._strokeWeight = 1;
                    $this_1._width = HDrawable.DEFAULT_WIDTH;
                    $this_1._height = HDrawable.DEFAULT_HEIGHT;
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HDrawable, HNode);
            $p.extendInterfaceMembers(HDrawable, HDirectable);
            $p.extendInterfaceMembers(HDrawable, HHittable);
            HDrawable.HDrawableIterator = (function() {
                function HDrawableIterator() {
                    var $this_2 = this;

                    function $superCstr() {
                        $p.extendClassChain($this_2)
                    }
                    $this_2.parent = null;
                    $this_2.d1 = null;
                    $this_2.d2 = null;

                    function hasNext$0() {
                        return ($this_2.d1 != null);
                    }
                    $p.addMethod($this_2, 'hasNext', hasNext$0, false);

                    function next$0() {
                        var nxt = $this_2.d1;
                        $this_2.d1 = $this_2.d2;
                        if ($this_2.d2 != null) $this_2.d2 = $this_2.d2._next;
                        return nxt;
                    }
                    $p.addMethod($this_2, 'next', next$0, false);

                    function remove$0() {
                        if ($this_2.d1 != null) $this_2.d1.popOut();
                    }
                    $p.addMethod($this_2, 'remove', remove$0, false);

                    function $constr_1(parentDrawable) {
                        $superCstr();

                        $this_2.parent = parentDrawable;
                        $this_2.d1 = $this_2.parent._firstChild;
                        if ($this_2.d1 != null) $this_2.d2 = $this_2.d1._next;
                    }

                    function $constr() {
                        if (arguments.length === 1) {
                            $constr_1.apply($this_2, arguments);
                        } else $superCstr();
                    }
                    $constr.apply(null, arguments);
                }
                HDrawableIterator.$interfaces = [];
                return HDrawableIterator;
            })();
            HDrawable.DEFAULT_FILL = 0xFFFFFFFF;
            HDrawable.DEFAULT_STROKE = 0xFF000000;
            HDrawable.DEFAULT_WIDTH = 100;
            HDrawable.DEFAULT_HEIGHT = 100;
            HDrawable.BITMASK_PROPORTIONAL = 1;
            HDrawable.BITMASK_TRANSFORMS_CHILDREN = 2;
            HDrawable.BITMASK_STYLES_CHILDREN = 4;
            HDrawable.BITMASK_ROTATES_CHILDREN = 8;
            HDrawable.$base = HNode;
            HDrawable.$interfaces = [HDirectable, HHittable];
            return HDrawable;
        })();
        $p.HDrawable = HDrawable;
        var HBehaviorRegistry = (function() {
            function HBehaviorRegistry() {
                var $this_1 = this;

                function $superCstr() {
                    $p.extendClassChain($this_1)
                }
                $this_1.HBehaviorSentinel = HBehaviorRegistry.HBehaviorSentinel;
                $this_1._firstSentinel = null;

                function isRegistered$1(b) {
                    return (b._registry != null && $p.__equals(b._registry, $this_1.$self));
                }
                $p.addMethod($this_1, 'isRegistered', isRegistered$1, false);

                function register$1(b) {
                    if (b.poppedOut()) b.putAfter($this_1._firstSentinel);
                }
                $p.addMethod($this_1, 'register', register$1, false);

                function unregister$1(b) {
                    if ($this_1.$self.isRegistered(b)) b.popOut();
                }
                $p.addMethod($this_1, 'unregister', unregister$1, false);

                function runAll$1(app) {
                    var n = $this_1._firstSentinel.next();
                    while (n != null) {
                        n.runBehavior(app);
                        n = n.next();
                    }
                }
                $p.addMethod($this_1, 'runAll', runAll$1, false);

                function $constr_0() {
                    $superCstr();

                    $this_1._firstSentinel = new $this_1.HBehaviorSentinel($this_1.$self);
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            HBehaviorRegistry.HBehaviorSentinel = (function() {
                function HBehaviorSentinel() {
                    var $this_2 = this;
                    var $super = {
                        $upcast: $this_2
                    };

                    function $superCstr() {
                        HBehavior.apply($super, arguments);
                        if (! ('$self' in $super)) $p.extendClassChain($super)
                    }

                    function runBehavior$1(app) {

                    }
                    $p.addMethod($this_2, 'runBehavior', runBehavior$1, false);

                    function $constr_1(r) {
                        $superCstr();

                        $this_2._registry = r;
                    }

                    function $constr() {
                        if (arguments.length === 1) {
                            $constr_1.apply($this_2, arguments);
                        } else $superCstr();
                    }
                    $constr.apply(null, arguments);
                }
                $p.extendStaticMembers(HBehaviorSentinel, HBehavior);
                HBehaviorSentinel.$base = HBehavior;
                return HBehaviorSentinel;
            })();
            return HBehaviorRegistry;
        })();
        $p.HBehaviorRegistry = HBehaviorRegistry;
        var HTrigger = (function() {
            function HTrigger() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HBehavior.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $this_1._callback = null;

                function callback$1(cb) {
                    $this_1._callback = (cb == null) ? HConstants.NOP : cb;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'callback', callback$1, false);

                function callback$0_2() {
                    return $this_1._callback;
                }
                $p.addMethod($this_1, 'callback', callback$0_2, false);

                function $constr_0() {
                    $superCstr();

                    $this_1.$self.register();
                    $this_1._callback = HConstants.NOP;
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HTrigger, HBehavior);
            HTrigger.$base = HBehavior;
            return HTrigger;
        })();
        $p.HTrigger = HTrigger;
        var HLinkedList = (function() {
            function HLinkedList() {
                var $this_1 = this;

                function $superCstr() {
                    $p.extendClassChain($this_1)
                }
                $this_1.HLinkedListNode = HLinkedList.HLinkedListNode;
                $this_1.HLinkedListIterator = HLinkedList.HLinkedListIterator;
                $this_1._firstSentinel = null;
                $this_1._lastSentinel = null;
                $this_1._size = 0;

                function first$0() {
                    return $this_1._firstSentinel._next._content;
                }
                $p.addMethod($this_1, 'first', first$0, false);

                function last$0() {
                    return $this_1._lastSentinel._prev._content;
                }
                $p.addMethod($this_1, 'last', last$0, false);

                function get$1(index) {
                    var n = $this_1.$self.nodeAt(index);
                    return (n == null) ? null : n._content;
                }
                $p.addMethod($this_1, 'get', get$1, false);

                function push$1(content) {
                    if (content == null) return false;
                    $this_1.$self.register(content).putAfter($this_1._firstSentinel);
                    ++$this_1._size;
                    return true;
                }
                $p.addMethod($this_1, 'push', push$1, false);

                function add$1(content) {
                    if (content == null) return false;
                    $this_1.$self.register(content).putBefore($this_1._lastSentinel);
                    ++$this_1._size;
                    return true;
                }
                $p.addMethod($this_1, 'add', add$1, false);

                function insert$2(content, index) {
                    if (content == null) return false;
                    var n = (index == $this_1._size) ? $this_1._lastSentinel : $this_1.$self.nodeAt(index);
                    if (n == null) return false;
                    $this_1.$self.register(content).putBefore(n);
                    ++$this_1._size;
                    return true;
                }
                $p.addMethod($this_1, 'insert', insert$2, false);

                function pop$0() {
                    var firstNode = $this_1._firstSentinel._next;
                    if (firstNode._content != null) {
                        firstNode.popOut();
                        --$this_1._size;
                    }
                    return firstNode._content;
                }
                $p.addMethod($this_1, 'pop', pop$0, false);

                function pull$0() {
                    var lastNode = $this_1._lastSentinel._prev;
                    if (lastNode._content != null) {
                        lastNode.popOut();
                        --$this_1._size;
                    }
                    return lastNode._content;
                }
                $p.addMethod($this_1, 'pull', pull$0, false);

                function removeAt$1(index) {
                    var n = $this_1.$self.nodeAt(index);
                    if (n == null) return null;
                    n.popOut();
                    --$this_1._size;
                    return n._content;
                }
                $p.addMethod($this_1, 'removeAt', removeAt$1, false);

                function removeAll$0() {
                    $this_1._lastSentinel.putAfter($this_1._firstSentinel);
                    $this_1._size = 0;
                }
                $p.addMethod($this_1, 'removeAll', removeAll$0, false);

                function size$0() {
                    return $this_1._size;
                }
                $p.addMethod($this_1, 'size', size$0, false);

                function inRange$1(index) {
                    return (0 <= index) && (index < $this_1._size);
                }
                $p.addMethod($this_1, 'inRange', inRange$1, false);

                function iterator$0() {
                    return new $this_1.HLinkedListIterator($this_1.$self);
                }
                $p.addMethod($this_1, 'iterator', iterator$0, false);

                function nodeAt$1(i) {
                    var ri = 0;
                    if (i < 0) {
                        ri = -i;
                        i += $this_1._size;
                    } else {
                        ri = $this_1._size - i;
                    }
                    if (!$this_1.$self.inRange(i)) {
                        HWarnings.warn("Out of Range: " + i, "HLinkedList.nodeAt()", null);
                        return null;
                    }
                    var node = null;
                    if (ri < i) {
                        node = $this_1._lastSentinel._prev;
                        while (--ri > 0) node = node._prev;
                    } else {
                        node = $this_1._firstSentinel._next;
                        while (i-->0) node = node._next;
                    }
                    return node;
                }
                $p.addMethod($this_1, 'nodeAt', nodeAt$1, false);

                function register$1(obj) {
                    return new $this_1.HLinkedListNode(obj);
                }
                $p.addMethod($this_1, 'register', register$1, false);

                function $constr_0() {
                    $superCstr();

                    $this_1._firstSentinel = new $this_1.HLinkedListNode(null);
                    $this_1._lastSentinel = new $this_1.HLinkedListNode(null);
                    $this_1._lastSentinel.putAfter($this_1._firstSentinel);
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            HLinkedList.HLinkedListNode = (function() {
                function HLinkedListNode() {
                    var $this_2 = this;
                    var $super = {
                        $upcast: $this_2
                    };

                    function $superCstr() {
                        HNode.apply($super, arguments);
                        if (! ('$self' in $super)) $p.extendClassChain($super)
                    }
                    $this_2._content = null;

                    function content$0() {
                        return $this_2._content;
                    }
                    $p.addMethod($this_2, 'content', content$0, false);

                    function $constr_1(nodeContent) {
                        $superCstr();

                        $this_2._content = nodeContent;
                    }

                    function $constr() {
                        if (arguments.length === 1) {
                            $constr_1.apply($this_2, arguments);
                        } else $superCstr();
                    }
                    $constr.apply(null, arguments);
                }
                $p.extendStaticMembers(HLinkedListNode, HNode);
                HLinkedListNode.$base = HNode;
                return HLinkedListNode;
            })();
            HLinkedList.HLinkedListIterator = (function() {
                function HLinkedListIterator() {
                    var $this_2 = this;

                    function $superCstr() {
                        $p.extendClassChain($this_2)
                    }
                    $this_2.list = null;
                    $this_2.n1 = null;
                    $this_2.n2 = null;

                    function hasNext$0() {
                        return ($this_2.n1._content != null);
                    }
                    $p.addMethod($this_2, 'hasNext', hasNext$0, false);

                    function next$0() {
                        var content = $this_2.n1._content;
                        $this_2.n1 = $this_2.n2;
                        if ($this_2.n2 != null) $this_2.n2 = $this_2.n2._next;
                        return content;
                    }
                    $p.addMethod($this_2, 'next', next$0, false);

                    function remove$0() {
                        if ($this_2.n1._content != null) {
                            $this_2.n1.popOut();
                            --$this_2.list._size;
                        }
                    }
                    $p.addMethod($this_2, 'remove', remove$0, false);

                    function $constr_1(parent) {
                        $superCstr();

                        $this_2.list = parent;
                        $this_2.n1 = $this_2.list._firstSentinel._next;
                        if ($this_2.n1 != null) $this_2.n2 = $this_2.n1._next;
                    }

                    function $constr() {
                        if (arguments.length === 1) {
                            $constr_1.apply($this_2, arguments);
                        } else $superCstr();
                    }
                    $constr.apply(null, arguments);
                }
                HLinkedListIterator.$interfaces = [];
                return HLinkedListIterator;
            })();
            HLinkedList.$interfaces = [];
            return HLinkedList;
        })();
        $p.HLinkedList = HLinkedList;
        var HDrawable3D = (function() {
            function HDrawable3D() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HDrawable.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $p.defineProperty($this_1, 'DEFAULT_DEPTH', {
                    get: function() {
                        return HDrawable3D.DEFAULT_DEPTH
                    },
                    set: function(val) {
                        HDrawable3D.DEFAULT_DEPTH = val
                    }
                });
                $this_1._depth = 0;
                $this_1._anchorW = 0;

                function size$1(s) {
                    return $this_1.$self.size(s, s, s);
                }
                $p.addMethod($this_1, 'size', size$1, false);

                function size$1_2(s) {
                    return $this_1.$self.size(s.x, s.y, s.z);
                }
                $p.addMethod($this_1, 'size', size$1_2, false);

                function size$3_3(w, h, d) {
                    $this_1._width = w;
                    $this_1._height = h;
                    $this_1._depth = d;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'size', size$3_3, false);

                function size$0_4() {
                    return new $p.PVector($this_1._width, $this_1._height, $this_1._depth);
                }
                $p.addMethod($this_1, 'size', size$0_4, false);

                function depth$1(f) {
                    $this_1._depth = f;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'depth', depth$1, false);

                function depth$0_2() {
                    return $this_1._depth;
                }
                $p.addMethod($this_1, 'depth', depth$0_2, false);

                function scale$1(s) {
                    return $this_1.$self.scale(s, s, s);
                }
                $p.addMethod($this_1, 'scale', scale$1, false);

                function scale$3_2(sw, sh, sd) {
                    return $this_1.$self.depth(sd).scale(sw, sh);
                }
                $p.addMethod($this_1, 'scale', scale$3_2, false);

                function anchor$3(ancx, ancy, ancz) {
                    return $this_1.$self.anchorZ(ancz).anchorX(ancx).anchorY(ancy);
                }
                $p.addMethod($this_1, 'anchor', anchor$3, false);

                function anchorAt$1(where) {
                    if ((where & HConstants.CENTER_X) != 0) {
                        $this_1.$self.anchorU(0.5);
                    } else if ((where & HConstants.LEFT) != 0) {
                        $this_1.$self.anchorU(0);
                    } else if ((where & HConstants.RIGHT) != 0) {
                        $this_1.$self.anchorU(1);
                    }
                    if ((where & HConstants.CENTER_Y) != 0) {
                        $this_1.$self.anchorV(0.5);
                    } else if ((where & HConstants.TOP) != 0) {
                        $this_1.$self.anchorV(0);
                    } else if ((where & HConstants.BOTTOM) != 0) {
                        $this_1.$self.anchorV(1);
                    }
                    if ((where & HConstants.CENTER_Z) != 0) {
                        $this_1.$self.anchorW(0.5);
                    } else if ((where & HConstants.BACK) != 0) {
                        $this_1.$self.anchorW(0);
                    } else if ((where & HConstants.FRONT) != 0) {
                        $this_1.$self.anchorW(1);
                    }
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'anchorAt', anchorAt$1, false);

                function onResize$4(oldW, oldH, newW, newH) {
                    $super.onResize(oldW, oldH, newW, newH);
                }
                $p.addMethod($this_1, 'onResize', onResize$4, false);

                function anchor$0_2() {
                    return new $p.PVector($this_1.$self.anchorX(), $this_1.$self.anchorY(), $this_1.$self.anchorZ());
                }
                $p.addMethod($this_1, 'anchor', anchor$0_2, false);

                function anchorUV$0() {
                    return new $p.PVector($this_1._anchorU, $this_1._anchorV, $this_1._anchorW);
                }
                $p.addMethod($this_1, 'anchorUV', anchorUV$0, false);

                function anchorZ$1(f) {
                    return $this_1.$self.anchorZ($this_1.$self.z2w(f));
                }
                $p.addMethod($this_1, 'anchorZ', anchorZ$1, false);

                function anchorZ$0_2() {
                    return $this_1.$self.w2z($this_1._anchorW);
                }
                $p.addMethod($this_1, 'anchorZ', anchorZ$0_2, false);

                function anchorW$1(f) {
                    $this_1._anchorW = f;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'anchorW', anchorW$1, false);

                function anchorW$0_2() {
                    return $this_1._anchorW;
                }
                $p.addMethod($this_1, 'anchorW', anchorW$0_2, false);

                function z2w$1(px) {
                    return px / ($this_1._depth == 0 ? HDrawable3D.DEFAULT_DEPTH : $this_1._depth);
                }
                $p.addMethod($this_1, 'z2w', z2w$1, false);

                function w2z$1(pc) {
                    return pc * $this_1._depth;
                }
                $p.addMethod($this_1, 'w2z', w2z$1, false);

                function $constr_0() {
                    $superCstr();

                    $this_1._depth = HDrawable3D.DEFAULT_DEPTH;
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HDrawable3D, HDrawable);
            HDrawable3D.DEFAULT_DEPTH = 100;
            HDrawable3D.$base = HDrawable;
            return HDrawable3D;
        })();
        $p.HDrawable3D = HDrawable3D;
        var HCallback = (function() {
            function HCallback() {
                throw 'Unable to create the interface';
            }
            HCallback.$isInterface = true;
            HCallback.$methods = ['run'];
            return HCallback;
        })();
        $p.HCallback = HCallback;
        var HImageHolder = (function() {
            function HImageHolder() {
                throw 'Unable to create the interface';
            }
            HImageHolder.$isInterface = true;
            HImageHolder.$methods = ['image', 'image'];
            return HImageHolder;
        })();
        $p.HImageHolder = HImageHolder;
        var HLayout = (function() {
            function HLayout() {
                throw 'Unable to create the interface';
            }
            HLayout.$isInterface = true;
            HLayout.$methods = ['applyTo', 'getNextPoint'];
            return HLayout;
        })();
        $p.HLayout = HLayout;
        var HConstants = (function() {
            function HConstants() {
                throw 'Unable to create the interface';
            }
            HConstants.NONE = 0;
            HConstants.LEFT = 1;
            HConstants.RIGHT = 2;
            HConstants.CENTER_X = 3;
            HConstants.TOP = 4;
            HConstants.BOTTOM = 8;
            HConstants.CENTER_Y = 12;
            HConstants.BACK = 16;
            HConstants.FRONT = 32;
            HConstants.CENTER_Z = 48;
            HConstants.CENTER = 63;
            HConstants.TOP_LEFT = 5;
            HConstants.TOP_RIGHT = 6;
            HConstants.BOTTOM_LEFT = 9;
            HConstants.BOTTOM_RIGHT = 10;
            HConstants.CENTER_LEFT = 13;
            HConstants.CENTER_RIGHT = 14;
            HConstants.CENTER_TOP = 7;
            HConstants.CENTER_BOTTOM = 11;
            HConstants.DEFAULT_BACKGROUND_COLOR = 0xFFECF2F5;
            HConstants.CLEAR = 0x00FFFFFF;
            HConstants.WHITE = 0xFFFFFFFF;
            HConstants.LGREY = 0xFFC0C0C0;
            HConstants.GREY = 0xFF808080;
            HConstants.DGREY = 0xFF404040;
            HConstants.BLACK = 0xFF000000;
            HConstants.RED = 0xFFFF0000;
            HConstants.GREEN = 0xFF00FF00;
            HConstants.BLUE = 0xFF0000FF;
            HConstants.CYAN = 0xFF00FFFF;
            HConstants.MAGENTA = 0xFFFF00FF;
            HConstants.YELLOW = 0xFFFFFF00;
            HConstants.SAW = 0;
            HConstants.SINE = 1;
            HConstants.TRIANGLE = 2;
            HConstants.SQUARE = 3;
            HConstants.WIDTH = 0;
            HConstants.HEIGHT = 1;
            HConstants.SIZE = 2;
            HConstants.ALPHA = 3;
            HConstants.X = 4;
            HConstants.Y = 5;
            HConstants.Z = 6;
            HConstants.LOCATION = 7;
            HConstants.ROTATION = 8;
            HConstants.DROTATION = 9;
            HConstants.DX = 10;
            HConstants.DY = 11;
            HConstants.DZ = 12;
            HConstants.DLOC = 13;
            HConstants.SCALE = 14;
            HConstants.ROTATIONX = 15;
            HConstants.ROTATIONY = 16;
            HConstants.ROTATIONZ = 8;
            HConstants.DROTATIONX = 17;
            HConstants.DROTATIONY = 18;
            HConstants.DROTATIONZ = 9;
            HConstants.ISOCELES = 0;
            HConstants.EQUILATERAL = 1;
            HConstants.ONES = 0xFFFFFFFF;
            HConstants.ZEROES = 0;
            HConstants.D2R = $p.PConstants.PI / 180;
            HConstants.R2D = 180 / $p.PConstants.PI;
            HConstants.SQRT2 = 1.4142135623730951;
            HConstants.PHI = 1.618033988749895;
            HConstants.PHI_1 = 0.618033988749895;
            HConstants.TOLERANCE = 10e-6;
            HConstants.EPSILON = 10e-12;
            HConstants.NOP = new((function() {
                function HCallback$class30() {
                    var $this_2 = this;

                    function $superCstr() {
                        $p.extendClassChain($this_2)
                    }

                    function run$1(obj) {

                    }
                    $p.addMethod($this_2, 'run', run$1, false);

                    function $constr() {
                        $superCstr();
                    }
                    $constr.apply(null, arguments);
                }
                $p.extendInterfaceMembers(HCallback$class30, HCallback);
                HCallback$class30.$interfaces = [HCallback];
                return HCallback$class30;
            })());
            HConstants.$isInterface = true;
            HConstants.$methods = [''];
            return HConstants;
        })();
        $p.HConstants = HConstants;
        var HMagneticField = (function() {
            function HMagneticField() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HBehavior.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $this_1.HPole = HMagneticField.HPole;
                $this_1._poles = null;
                $this_1._targets = null;

                function addMagnet$4(nx, ny, sx, sy) {
                    $this_1.$self.addPole(nx, ny, 1);
                    $this_1.$self.addPole(sx, sy, -1);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'addMagnet', addMagnet$4, false);

                function addPole$3(x, y, polarity) {
                    var p = new $this_1.HPole(x, y, polarity);
                    $this_1._poles.add(p);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'addPole', addPole$3, false);

                function pole$1(index) {
                    return $this_1._poles.get(index);
                }
                $p.addMethod($this_1, 'pole', pole$1, false);

                function removePole$1(index) {
                    $this_1._poles.remove(index);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'removePole', removePole$1, false);

                function addTarget$1(d) {
                    if ($this_1._targets.size() <= 0) $this_1.$self.register();
                    $this_1._targets.add(d);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'addTarget', addTarget$1, false);

                function removeTarget$1(d) {
                    $this_1._targets.remove(d);
                    if ($this_1._targets.size() <= 0) $this_1.$self.unregister();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'removeTarget', removeTarget$1, false);

                function getRotation$2(x, y) {
                    var poleCount = $this_1._poles.size();
                    var v1 = new $p.PVector(0, 0);
                    var v2 = new $p.PVector(x, y);
                    var distance = new $p.PVector(0, 0);
                    var force = new $p.PVector(0, 0);
                    var d = 0;
                    for (var i = 0; i < poleCount; i++) {
                        var p = $this_1._poles.get(i);
                        v1.x = p._x;
                        v1.y = p._y;
                        if (p._polarity < 0) {
                            distance = $p.PVector.sub(v1, v2);
                        } else {
                            distance = $p.PVector.sub(v2, v1);
                        }
                        d = distance.mag() / 5;
                        distance.normalize();
                        distance.mult($p.abs(p._polarity));
                        distance.div(d);
                        force.add(distance);
                    }
                    return $p.atan2(force.y, force.x);
                }
                $p.addMethod($this_1, 'getRotation', getRotation$2, false);

                function runBehavior$1(app) {
                    for (var $it0 = new $p.ObjectIterator($this_1._targets), d = void(0); $it0.hasNext() && ((d = $it0.next()) || true);) d.rotationRad($this_1.$self.getRotation(d.x(), d.y()));
                }
                $p.addMethod($this_1, 'runBehavior', runBehavior$1, false);

                function register$0() {
                    return $super.register();
                }
                $p.addMethod($this_1, 'register', register$0, false);

                function unregister$0() {
                    return $super.unregister();
                }
                $p.addMethod($this_1, 'unregister', unregister$0, false);

                function $constr_0() {
                    $superCstr();

                    $this_1._poles = new $p.ArrayList();
                    $this_1._targets = new HLinkedHashSet();
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HMagneticField, HBehavior);
            HMagneticField.HPole = (function() {
                function HPole() {
                    var $this_2 = this;

                    function $superCstr() {
                        $p.extendClassChain($this_2)
                    }
                    $this_2._x = 0;
                    $this_2._y = 0;
                    $this_2._polarity = 0;

                    function $constr_3(x, y, polarity) {
                        $superCstr();

                        $this_2._x = x;
                        $this_2._y = y;
                        $this_2._polarity = polarity;
                    }

                    function $constr() {
                        if (arguments.length === 3) {
                            $constr_3.apply($this_2, arguments);
                        } else $superCstr();
                    }
                    $constr.apply(null, arguments);
                }
                return HPole;
            })();
            HMagneticField.$base = HBehavior;
            return HMagneticField;
        })();
        $p.HMagneticField = HMagneticField;
        var HColorField = (function() {
            function HColorField() {
                var $this_1 = this;

                function $superCstr() {
                    $p.extendClassChain($this_1)
                }
                $this_1.HColorPoint = HColorField.HColorPoint;
                $this_1._colorPoints = null;
                $this_1._maxDist = 0;
                $this_1._appliesFill = false;
                $this_1._appliesStroke = false;
                $this_1._appliesAlpha = false;

                function addPoint$3(loc, clr, radius) {
                    return $this_1.$self.addPoint(loc.x, loc.y, clr, radius);
                }
                $p.addMethod($this_1, 'addPoint', addPoint$3, false);

                function addPoint$4_2(x, y, clr, radius) {
                    var pt = new $this_1.HColorPoint();
                    pt.x = x;
                    pt.y = y;
                    pt.radius = radius;
                    pt.clr = clr;
                    $this_1._colorPoints.add(pt);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'addPoint', addPoint$4_2, false);

                function getColor$3(x, y, baseColor) {
                    var baseClrs = HColors.explode(baseColor);
                    var maxClrs = $p.createJavaArray('int', [4]);
                    var initJ = 0;
                    if ($this_1._appliesAlpha) {
                        initJ = 0;
                    } else {
                        initJ = 1;
                        maxClrs[0] = baseClrs[0];
                    }
                    for (var i = 0; i < $this_1._colorPoints.size(); ++i) {
                        var pt = $this_1._colorPoints.get(i);
                        var ptClrs = HColors.explode(pt.clr);
                        var distLimit = $this_1._maxDist * pt.radius;
                        var dist = HMath.dist(x, y, pt.x, pt.y);
                        if (dist > distLimit) dist = distLimit;
                        for (var j = initJ; j < 4; ++j) {
                            var newClrVal = Math.round(HMath.map(dist, 0, distLimit, ptClrs[j], baseClrs[j]));
                            if (newClrVal > maxClrs[j]) maxClrs[j] = newClrVal;
                        }
                    }
                    return HColors.merge(maxClrs[0], maxClrs[1], maxClrs[2], maxClrs[3]);
                }
                $p.addMethod($this_1, 'getColor', getColor$3, false);

                function appliesAlpha$1(b) {
                    $this_1._appliesAlpha = b;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'appliesAlpha', appliesAlpha$1, false);

                function appliesAlpha$0_2() {
                    return $this_1._appliesAlpha;
                }
                $p.addMethod($this_1, 'appliesAlpha', appliesAlpha$0_2, false);

                function fillOnly$0() {
                    $this_1._appliesFill = true;
                    $this_1._appliesStroke = false;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'fillOnly', fillOnly$0, false);

                function strokeOnly$0() {
                    $this_1._appliesFill = false;
                    $this_1._appliesStroke = true;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'strokeOnly', strokeOnly$0, false);

                function fillAndStroke$0() {
                    $this_1._appliesFill = $this_1._appliesStroke = true;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'fillAndStroke', fillAndStroke$0, false);

                function appliesFill$0() {
                    return $this_1._appliesFill;
                }
                $p.addMethod($this_1, 'appliesFill', appliesFill$0, false);

                function appliesStroke$0() {
                    return $this_1._appliesStroke;
                }
                $p.addMethod($this_1, 'appliesStroke', appliesStroke$0, false);

                function applyColor$1(drawable) {
                    var x = drawable.x();
                    var y = drawable.y();
                    if ($this_1._appliesFill) {
                        var baseFill = drawable.fill();
                        drawable.fill($this_1.$self.getColor(x, y, baseFill));
                    }
                    if ($this_1._appliesStroke) {
                        var baseStroke = drawable.stroke();
                        drawable.stroke($this_1.$self.getColor(x, y, baseStroke));
                    }
                    return drawable;
                }
                $p.addMethod($this_1, 'applyColor', applyColor$1, false);

                function $constr_0() {
                    $constr(H.app().width, H.app().height);
                }

                function $constr_2(xBound, yBound) {
                    $constr(Math.sqrt(xBound * xBound + yBound * yBound));
                }

                function $constr_1(maximumDistance) {
                    $superCstr();

                    $this_1._colorPoints = new $p.ArrayList();
                    $this_1._maxDist = maximumDistance;
                    $this_1.$self.fillAndStroke();
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else if (arguments.length === 2) {
                        $constr_2.apply($this_1, arguments);
                    } else if (arguments.length === 1) {
                        $constr_1.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendInterfaceMembers(HColorField, HColorist);
            HColorField.HColorPoint = (function() {
                function HColorPoint() {
                    var $this_2 = this;

                    function $superCstr() {
                        $p.extendClassChain($this_2)
                    }
                    $this_2.x = 0;
                    $this_2.y = 0;
                    $this_2.radius = 0;
                    $this_2.clr = 0;

                    function $constr() {
                        $superCstr();
                    }
                    $constr.apply(null, arguments);
                }
                return HColorPoint;
            })();
            HColorField.$interfaces = [HColorist];
            return HColorField;
        })();
        $p.HColorField = HColorField;
        var BlueCellGrid = (function() {
            function BlueCellGrid() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HDrawable.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $this_1._cellSize = 3;
                $this_1._cellGap = 1;
                $this_1._gridGap = 2;
                $this_1._numberOfCellsPerGridSide = 5;
                $this_1._startColor = 0xFF54C9F4;
                $this_1._endColor = 0xFFA6E2FC;

                function widthOfGridColumn$0() {
                    return ($this_1._cellSize + $this_1._cellGap) * $this_1._numberOfCellsPerGridSide - $this_1._cellGap;
                }
                $p.addMethod($this_1, 'widthOfGridColumn', widthOfGridColumn$0, false);

                function widthOfGridColumnAndGap$0() {
                    return ($this_1._cellSize + $this_1._cellGap) * $this_1._numberOfCellsPerGridSide - $this_1._cellGap + $this_1._gridGap;
                }
                $p.addMethod($this_1, 'widthOfGridColumnAndGap', widthOfGridColumnAndGap$0, false);

                function heightOfGridRow$0() {
                    return ($this_1._cellSize + $this_1._cellGap) * $this_1._numberOfCellsPerGridSide - $this_1._cellGap;
                }
                $p.addMethod($this_1, 'heightOfGridRow', heightOfGridRow$0, false);

                function heightOfGridRowAndGap$0() {
                    return ($this_1._cellSize + $this_1._cellGap) * $this_1._numberOfCellsPerGridSide - $this_1._cellGap + $this_1._gridGap;
                }
                $p.addMethod($this_1, 'heightOfGridRowAndGap', heightOfGridRowAndGap$0, false);

                function numberOfGridColumns$0() {
                    return $p.__int_cast(Math.floor(($this_1._width + $this_1._gridGap) / ($this_1.$self.widthOfGridColumn() + $this_1._gridGap)));
                }
                $p.addMethod($this_1, 'numberOfGridColumns', numberOfGridColumns$0, false);

                function numberOfGridRows$0() {
                    return $p.__int_cast(Math.floor(($this_1._height + $this_1._gridGap) / ($this_1.$self.heightOfGridRow() + $this_1._gridGap)));
                }
                $p.addMethod($this_1, 'numberOfGridRows', numberOfGridRows$0, false);

                function totalWidthOfGridSpan$0() {
                    return ($this_1.$self.widthOfGridColumn() + $this_1._gridGap) * $this_1.$self.numberOfGridColumns() - $this_1._gridGap;
                }
                $p.addMethod($this_1, 'totalWidthOfGridSpan', totalWidthOfGridSpan$0, false);

                function totalHeightOfGridSpan$0() {
                    return ($this_1.$self.heightOfGridRow() + $this_1._gridGap) * $this_1.$self.numberOfGridRows() - $this_1._gridGap;
                }
                $p.addMethod($this_1, 'totalHeightOfGridSpan', totalHeightOfGridSpan$0, false);

                function pointCoordinatesForGridAndCellCoordinates$4(gridColumn, gridRow, cellColumn, cellRow) {
                    var offsetX = gridColumn * ($this_1.$self.widthOfGridColumn() + $this_1._gridGap) + cellColumn * ($this_1._cellSize + $this_1._cellGap);
                    var offsetY = gridRow * ($this_1.$self.heightOfGridRow() + $this_1._gridGap) + cellRow * ($this_1._cellSize + $this_1._cellGap);

                    return new $p.PVector(offsetX, offsetY);
                }
                $p.addMethod($this_1, 'pointCoordinatesForGridAndCellCoordinates', pointCoordinatesForGridAndCellCoordinates$4, false);

                function renderCellGrid$5(g, usesZ, drawX, drawY, currAlphaPc) {
                    var cellRect = new HRect($this_1._cellSize, $this_1._cellSize);
                    cellRect.fill(255).noStroke().alpha(100);

                    for (var currentGridColumn = 0; currentGridColumn < $this_1.$self.numberOfGridColumns(); currentGridColumn++) {
                        for (var currentGridRow = 0; currentGridRow < $this_1.$self.numberOfGridRows(); currentGridRow++) {
                            for (var currentCellColumn = 0; currentCellColumn < $this_1._numberOfCellsPerGridSide; currentCellColumn++) {
                                for (var currentCellRow = 0; currentCellRow < $this_1._numberOfCellsPerGridSide; currentCellRow++) {
                                    var offsetX = currentGridColumn * ($this_1.$self.widthOfGridColumn() + $this_1._gridGap) + currentCellColumn * ($this_1._cellSize + $this_1._cellGap);
                                    var offsetY = currentGridRow * ($this_1.$self.heightOfGridRow() + $this_1._gridGap) + currentCellRow * ($this_1._cellSize + $this_1._cellGap);

                                    cellRect.loc(drawX + offsetX, drawY + offsetY);
                                    cellRect.paintAll(g, usesZ, currAlphaPc);
                                }
                            }
                        }
                    }
                }
                $p.addMethod($this_1, 'renderCellGrid', renderCellGrid$5, false);

                function renderTopGradients$5(g, usesZ, drawX, drawY, currAlphaPc) {
                    var gradXInGridColumns = 0;
                    var gradYInGridRows = 0;
                    var gradWidthInGridColumns = 0;
                    var gradHeightInGridRows = 0;

                    var standardGradHeightInGridRows = 6;
                    var minGradWidthInGridColumns = 5;
                    var maxGradWidthInGridColumns = 8;

                    var grad = new PCHLinearGradient($this_1._startColor, $this_1._endColor).axis(PCHLinearGradient.YAXIS);

                    while (gradYInGridRows < $this_1.$self.numberOfGridRows()) {
                        var inter = $p.map(gradYInGridRows * $this_1.$self.heightOfGridRowAndGap(), 0, $this_1.$self.totalHeightOfGridSpan(), 0, 1);
                        var gradLerp = H.app().lerpColor($this_1._startColor, $this_1._endColor, inter);
                        var gradLerpFaded = $p.color($p.red(gradLerp), $p.green(gradLerp), $p.blue(gradLerp), $p.random(25, 75));

                        gradHeightInGridRows = $p.min(standardGradHeightInGridRows, $this_1.$self.numberOfGridRows() - gradYInGridRows);

                        while (gradXInGridColumns < $this_1.$self.numberOfGridColumns()) {
                            var gradStartColor = $p.color(255, $p.random(25, 75));
                            var gradEndColor = gradLerpFaded;

                            if ($p.random(1) > .5) {
                                gradStartColor = gradLerpFaded;
                                gradEndColor = $p.color(255, $p.random(25, 75));
                            }

                            gradWidthInGridColumns = ($this_1.$self.numberOfGridColumns() - gradXInGridColumns) < maxGradWidthInGridColumns ? $this_1.$self.numberOfGridColumns() - gradXInGridColumns : $p.__int_cast($p.random(minGradWidthInGridColumns, maxGradWidthInGridColumns));

                            grad.startColor(gradStartColor).endColor(gradEndColor).loc(drawX + gradXInGridColumns * $this_1.$self.widthOfGridColumnAndGap(), drawY + gradYInGridRows * $this_1.$self.heightOfGridRowAndGap()).size($this_1.$self.widthOfGridColumnAndGap() * gradWidthInGridColumns - $this_1._gridGap, $this_1.$self.heightOfGridRowAndGap() * gradHeightInGridRows - $this_1._gridGap);

                            grad.paintAll(g, usesZ, currAlphaPc);

                            gradXInGridColumns += gradWidthInGridColumns;
                        }

                        gradXInGridColumns = 0;
                        gradYInGridRows += gradHeightInGridRows;
                    }
                }
                $p.addMethod($this_1, 'renderTopGradients', renderTopGradients$5, false);

                function renderAccentMarkSeries$6(markerRect, numberOfMarksInSeries, markerGap, g, usesZ, currAlphaPc) {
                    var markerWidth = markerRect.width();

                    var addonProbabilityThreshold = .8;
                    for (var i = 0; i < numberOfMarksInSeries; i++) {
                        markerRect.paintAll(g, usesZ, currAlphaPc);

                        var addonIsAbove = ($p.random(1) > .5) ? true : false;
                        if ($p.random(1) > addonProbabilityThreshold) {
                            var addonRect = markerRect.createCopy();
                            var newHeight = markerRect.height() * $p.random(.1, .9);
                            addonRect.height(newHeight);
                            if (addonIsAbove) {
                                addonRect.move(0, -1 * newHeight);
                            } else {
                                addonRect.move(0, markerRect.height());
                            }
                            addonRect.paintAll(g, usesZ, currAlphaPc);
                        }

                        markerRect.move(markerWidth + markerGap, 0);
                    }
                }
                $p.addMethod($this_1, 'renderAccentMarkSeries', renderAccentMarkSeries$6, false);

                function renderAccentMarkSeriesPair$5(g, usesZ, drawX, drawY, currAlphaPc) {
                    var markerColor = 0xFF4293D4;

                    var minNumberOfMarksInSeries = 2;
                    var maxNumberOfMarksInSeries = 10;

                    var numberOfMarksInSeries = $p.floor($p.random(minNumberOfMarksInSeries, maxNumberOfMarksInSeries));

                    var seriesOrigin = $this_1.$self.pointCoordinatesForGridAndCellCoordinates(
                    $p.__int_cast($p.random($this_1.$self.numberOfGridColumns() / 2)), $p.__int_cast($p.random($this_1.$self.numberOfGridRows())), $p.__int_cast($p.random($this_1._numberOfCellsPerGridSide)), $p.__int_cast($p.random($this_1._numberOfCellsPerGridSide)));

                    var dH = $p.__int_cast($p.random(0, 3));

                    var maxMarkerHeightInCellIncrements = 6;

                    var markerWidth = $this_1._cellSize + dH * $this_1._cellSize;
                    var markerHeight = ($this_1._cellSize + $this_1._cellGap) * (maxMarkerHeightInCellIncrements - dH);
                    var markerGap = $this_1._cellGap * 2;
                    var markerRect = new HRect(markerWidth, markerHeight);
                    markerRect.loc(drawX + seriesOrigin.x, drawY + seriesOrigin.y).fill(markerColor).noStroke();

                    $this_1.$self.renderAccentMarkSeries(markerRect, numberOfMarksInSeries, markerGap, g, usesZ, currAlphaPc);

                    var seriesWidth = (markerWidth + markerGap) * numberOfMarksInSeries - markerGap;
                    markerRect.loc(drawX + $this_1.$self.totalWidthOfGridSpan() - seriesOrigin.x - seriesWidth, drawY + seriesOrigin.y);
                    $this_1.$self.renderAccentMarkSeries(markerRect, numberOfMarksInSeries, markerGap, g, usesZ, currAlphaPc);
                }
                $p.addMethod($this_1, 'renderAccentMarkSeriesPair', renderAccentMarkSeriesPair$5, false);

                function renderAccentMarks$5(g, usesZ, drawX, drawY, currAlphaPc) {
                    var baseNumberOfSeries = $p.__int_cast(($this_1._width * $this_1._height / 64000)) * 2;
                    for (var i = 0; i < baseNumberOfSeries + $p.random(baseNumberOfSeries); i++) {
                        $this_1.$self.renderAccentMarkSeriesPair(g, usesZ, drawX, drawY, currAlphaPc);
                    }
                }
                $p.addMethod($this_1, 'renderAccentMarks', renderAccentMarks$5, false);

                function createCopy$0() {
                    var copy = new BlueCellGrid();
                    copy.copyPropertiesFrom($this_1.$self);
                    return copy;
                }
                $p.addMethod($this_1, 'createCopy', createCopy$0, false);

                function draw$5(g, usesZ, drawX, drawY, currAlphaPc) {
                    var backgroundGrad = new PCHLinearGradient($this_1._startColor, $this_1._endColor);
                    backgroundGrad.axis(PCHLinearGradient.YAXIS).size($this_1._width, $this_1._height);
                    backgroundGrad.paintAll(g, usesZ, currAlphaPc);

                    var gridOffsetX = $p.__int_cast(($this_1._width - $this_1.$self.totalWidthOfGridSpan())) / 2;
                    var gridOffsetY = $p.__int_cast(($this_1._height - $this_1.$self.totalHeightOfGridSpan())) / 2;
                    $this_1.$self.renderCellGrid(g, usesZ, drawX + gridOffsetX, drawY + $p.__int_cast(gridOffsetY), currAlphaPc);

                    $this_1.$self.renderTopGradients(g, usesZ, drawX + gridOffsetX, drawY + $p.__int_cast(gridOffsetY), currAlphaPc);

                    $this_1.$self.renderAccentMarks(g, usesZ, drawX + gridOffsetX, drawY + gridOffsetY, currAlphaPc);
                }
                $p.addMethod($this_1, 'draw', draw$5, false);

                function $constr() {
                    $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(BlueCellGrid, HDrawable);
            BlueCellGrid.$base = HDrawable;
            return BlueCellGrid;
        })();
        $p.BlueCellGrid = BlueCellGrid;
        var PCHLinearGradient = (function() {
            function PCHLinearGradient() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HDrawable.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $p.defineProperty($this_1, 'XAXIS', {
                    get: function() {
                        return PCHLinearGradient.XAXIS
                    },
                    set: function(val) {
                        PCHLinearGradient.XAXIS = val
                    }
                });
                $p.defineProperty($this_1, 'YAXIS', {
                    get: function() {
                        return PCHLinearGradient.YAXIS
                    },
                    set: function(val) {
                        PCHLinearGradient.YAXIS = val
                    }
                });
                $this_1._startColor = 0x00000000;
                $this_1._endColor = 0x00000000;
                $this_1._axis = 0;

                function axis$0() {
                    return $this_1._axis;
                }
                $p.addMethod($this_1, 'axis', axis$0, false);

                function axis$1_2(axis) {
                    $this_1._axis = axis;

                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'axis', axis$1_2, false);

                function startColor$0() {
                    return $this_1._startColor;
                }
                $p.addMethod($this_1, 'startColor', startColor$0, false);

                function startColor$1_2(startColor) {
                    $this_1._startColor = startColor;

                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'startColor', startColor$1_2, false);

                function endColor$0() {
                    return $this_1._startColor;
                }
                $p.addMethod($this_1, 'endColor', endColor$0, false);

                function endColor$1_2(endColor) {
                    $this_1._endColor = endColor;

                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'endColor', endColor$1_2, false);

                function createCopy$0() {
                    var copy = new PCHLinearGradient();
                    copy._startColor = $this_1._startColor;
                    copy._endColor = $this_1._endColor;
                    copy.copyPropertiesFrom($this_1.$self);
                    return copy;
                }
                $p.addMethod($this_1, 'createCopy', createCopy$0, false);

                function colorWithAlphaApplied$2(aColor, alphaPc) {
                    var r = (aColor >> 16) & 0xFF;
                    var g = (aColor >> 8) & 0xFF;
                    var b = aColor & 0xFF;
                    var a = (aColor >> 24) & 0xFF;
                    return $p.color(r, g, b, a * alphaPc);
                }
                $p.addMethod($this_1, 'colorWithAlphaApplied', colorWithAlphaApplied$2, false);

                function draw$5(g, usesZ, drawX, drawY, currAlphaPc) {
                    if ($this_1._axis == PCHLinearGradient.XAXIS) {
                        for (var i = 0; i <= $this_1._width; i++) {
                            var line = new HPath();

                            var inter = H.app().map(i, 0, $this_1._width, 0, 1);
                            var c = $this_1.$self.colorWithAlphaApplied(H.app().lerpColor($this_1._startColor, $this_1._endColor, inter), currAlphaPc);

                            g.stroke(c);
                            g.strokeCap($p.SQUARE);
                            g.strokeWeight(3);
                            g.line(drawX + i, drawY, drawX + i, drawY + $this_1._height);
                        }
                    } else if ($this_1._axis == PCHLinearGradient.YAXIS) {
                        for (var i = 0; i <= $this_1._height; i++) {
                            var line = new HPath();

                            var inter = H.app().map(i, 0, $this_1._height, 0, 1);
                            var c = $this_1.$self.colorWithAlphaApplied(H.app().lerpColor($this_1._startColor, $this_1._endColor, inter), currAlphaPc);

                            g.stroke(c);
                            g.strokeCap($p.SQUARE);
                            g.strokeWeight(3);
                            g.line(drawX, drawY + i, drawX + $this_1._width, drawY + i);
                        }
                    }
                }
                $p.addMethod($this_1, 'draw', draw$5, false);

                function $constr_0() {
                    $superCstr();

                    $this_1._axis = PCHLinearGradient.XAXIS;
                }

                function $constr_2(startColor, endColor) {
                    $superCstr();

                    $this_1._startColor = startColor;
                    $this_1._endColor = endColor;
                    $this_1._axis = PCHLinearGradient.XAXIS;
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else if (arguments.length === 2) {
                        $constr_2.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(PCHLinearGradient, HDrawable);
            PCHLinearGradient.XAXIS = 1;
            PCHLinearGradient.YAXIS = 2;
            PCHLinearGradient.$base = HDrawable;
            return PCHLinearGradient;
        })();
        $p.PCHLinearGradient = PCHLinearGradient;
        var PCHLazyDrawable = (function() {
            function PCHLazyDrawable() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HDrawable.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $this_1._graphics = null;
                $this_1._renderer = null;
                $this_1._drawable = null;
                $this_1._needsRender = false;

                function renderer$1(s) {
                    $this_1._renderer = s;
                    $this_1._needsRender = true;
                    $this_1.$self.updateBuffer();

                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'renderer', renderer$1, false);

                function renderer$0_2() {
                    return $this_1._renderer;
                }
                $p.addMethod($this_1, 'renderer', renderer$0_2, false);

                function graphics$0() {
                    return $this_1._graphics;
                }
                $p.addMethod($this_1, 'graphics', graphics$0, false);

                function drawable$0() {
                    return $this_1._drawable;
                }
                $p.addMethod($this_1, 'drawable', drawable$0, false);

                function drawable$1_2(drawable) {
                    $this_1._drawable = drawable;
                    $this_1._needsRender = true;
                    $this_1.$self.updateBounds();

                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'drawable', drawable$1_2, false);

                function needsRender$0() {
                    return $this_1._needsRender;
                }
                $p.addMethod($this_1, 'needsRender', needsRender$0, false);

                function needsRender$1_2(needsRender) {
                    $this_1._needsRender = needsRender;
                    if ($this_1._needsRender) {
                        $this_1.$self.updateBounds();
                    }

                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'needsRender', needsRender$1_2, false);

                function updateBounds$0() {
                    var loc = new $p.PVector(),
                        size = new $p.PVector();
                    $this_1._drawable.bounds(loc, size);

                    $this_1._width = size.x;
                    $this_1._height = size.y;

                    $this_1.$self.loc(loc);

                    $this_1.$self.updateBuffer();
                }
                $p.addMethod($this_1, 'updateBounds', updateBounds$0, false);

                function updateBuffer$0() {
                    var w = Math.round($this_1._width);
                    var h = Math.round($this_1._height);
                    $this_1._graphics = H.app().createGraphics(w, h, $this_1._renderer);
                    $this_1._graphics.loadPixels();
                    $this_1._graphics.beginDraw();
                    $this_1._graphics.background(H.CLEAR);
                    $this_1._graphics.endDraw();
                    $this_1._width = w;
                    $this_1._height = h;
                }
                $p.addMethod($this_1, 'updateBuffer', updateBuffer$0, false);

                function createCopy$0() {
                    var copy = new PCHLazyDrawable($this_1._drawable, $this_1._renderer);
                    copy._needsRender = $this_1._needsRender;
                    copy.copyPropertiesFrom($this_1.$self);
                    return copy;
                }
                $p.addMethod($this_1, 'createCopy', createCopy$0, false);

                function draw$5(g, usesZ, drawX, drawY, currAlphaPc) {
                    if ($this_1.$self.needsRender()) {
                        $this_1._graphics.beginDraw();
                        $this_1._graphics.background(H.CLEAR);
                        $this_1._drawable.paintAll($this_1._graphics, usesZ, currAlphaPc);
                        $this_1._graphics.endDraw();
                    }

                    g.image($this_1._graphics, 0, 0);

                    $this_1.$self.needsRender(false);
                }
                $p.addMethod($this_1, 'draw', draw$5, false);

                function $constr_1(drawable) {
                    $constr(drawable, $p.PConstants.JAVA2D);
                }

                function $constr_2(drawable, bufferRenderer) {
                    $superCstr();

                    $this_1._needsRender = true;
                    $this_1._renderer = bufferRenderer;
                    $this_1._drawable = drawable;

                    $this_1.$self.updateBounds();
                }

                function $constr() {
                    if (arguments.length === 1) {
                        $constr_1.apply($this_1, arguments);
                    } else if (arguments.length === 2) {
                        $constr_2.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(PCHLazyDrawable, HDrawable);
            PCHLazyDrawable.$base = HDrawable;
            return PCHLazyDrawable;
        })();
        $p.PCHLazyDrawable = PCHLazyDrawable;
        var HLinkedHashSet = (function() {
            function HLinkedHashSet() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HLinkedList.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $this_1.nodeMap = null;

                function remove$1(content) {
                    var node = $this_1.nodeMap.get(content);
                    if (node == null) return false;
                    $this_1.$self.unregister(content);
                    node.popOut();
                    --$this_1._size;
                    return true;
                }
                $p.addMethod($this_1, 'remove', remove$1, false);

                function add$1(content) {
                    return $this_1.$self.contains(content) ? false : $super.add(content);
                }
                $p.addMethod($this_1, 'add', add$1, false);

                function push$1(content) {
                    return $this_1.$self.contains(content) ? false : $super.push(content);
                }
                $p.addMethod($this_1, 'push', push$1, false);

                function insert$2(content, index) {
                    return $this_1.$self.contains(content) ? false : $super.insert(content, index);
                }
                $p.addMethod($this_1, 'insert', insert$2, false);

                function pull$0() {
                    return $this_1.$self.unregister($super.pull());
                }
                $p.addMethod($this_1, 'pull', pull$0, false);

                function pop$0() {
                    return $this_1.$self.unregister($super.pop());
                }
                $p.addMethod($this_1, 'pop', pop$0, false);

                function removeAt$1(index) {
                    return $this_1.$self.unregister($super.removeAt(index));
                }
                $p.addMethod($this_1, 'removeAt', removeAt$1, false);

                function removeAll$0() {
                    while ($this_1._size > 0) $this_1.$self.pop();
                }
                $p.addMethod($this_1, 'removeAll', removeAll$0, false);

                function contains$1(obj) {
                    return $this_1.nodeMap.get(obj) != null;
                }
                $p.addMethod($this_1, 'contains', contains$1, false);

                function register$1(obj) {
                    var node = new $this_1.HLinkedListNode(obj);
                    $this_1.nodeMap.put(obj, node);
                    return node;
                }
                $p.addMethod($this_1, 'register', register$1, false);

                function unregister$1(obj) {
                    $this_1.nodeMap.remove(obj);
                    return obj;
                }
                $p.addMethod($this_1, 'unregister', unregister$1, false);

                function $constr_0() {
                    $superCstr();

                    $this_1.nodeMap = new $p.HashMap();
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HLinkedHashSet, HLinkedList);
            HLinkedHashSet.$base = HLinkedList;
            return HLinkedHashSet;
        })();
        $p.HLinkedHashSet = HLinkedHashSet;
        var HStage = (function() {
            function HStage() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HDrawable.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $this_1._app = null;
                $this_1._bgImg = null;
                $this_1._autoClears = false;
                $this_1._showsFPS = false;

                function invalidChild$1(destParent) {
                    return true;
                }
                $p.addMethod($this_1, 'invalidChild', invalidChild$1, false);

                function background$1(clr) {
                    $this_1._fill = clr;
                    return $this_1.$self.clear();
                }
                $p.addMethod($this_1, 'background', background$1, false);

                function backgroundImg$1(arg) {
                    return $this_1.$self.image(arg);
                }
                $p.addMethod($this_1, 'backgroundImg', backgroundImg$1, false);

                function image$1(imgArg) {
                    $this_1._bgImg = H.getImage(imgArg);
                    return $this_1.$self.clear();
                }
                $p.addMethod($this_1, 'image', image$1, false);

                function image$0_2() {
                    return $this_1._bgImg;
                }
                $p.addMethod($this_1, 'image', image$0_2, false);

                function autoClear$1(b) {
                    $this_1._autoClears = b;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'autoClear', autoClear$1, false);

                function autoClears$1(b) {
                    $this_1._autoClears = b;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'autoClears', autoClears$1, false);

                function autoClears$0_2() {
                    return $this_1._autoClears;
                }
                $p.addMethod($this_1, 'autoClears', autoClears$0_2, false);

                function clear$0() {
                    if ($this_1._bgImg == null) $this_1._app.background($this_1._fill);
                    else $this_1._app.background($this_1._bgImg);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'clear', clear$0, false);

                function fill$1(clr) {
                    $this_1.$self.background(clr);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'fill', fill$1, false);

                function fill$2_2(clr, alpha) {
                    return $this_1.$self.fill(clr);
                }
                $p.addMethod($this_1, 'fill', fill$2_2, false);

                function fill$3_3(r, g, b) {
                    return $this_1.$self.fill(HColors.merge(255, r, g, b));
                }
                $p.addMethod($this_1, 'fill', fill$3_3, false);

                function fill$4_4(r, g, b, a) {
                    return $this_1.$self.fill(r, g, b);
                }
                $p.addMethod($this_1, 'fill', fill$4_4, false);

                function size$0() {
                    return new $p.PVector($this_1._app.width, $this_1._app.height);
                }
                $p.addMethod($this_1, 'size', size$0, false);

                function width$0() {
                    return $this_1._app.width;
                }
                $p.addMethod($this_1, 'width', width$0, false);

                function height$0() {
                    return $this_1._app.height;
                }
                $p.addMethod($this_1, 'height', height$0, false);

                function showsFPS$1(b) {
                    $this_1._showsFPS = b;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'showsFPS', showsFPS$1, false);

                function showsFPS$0_2() {
                    return $this_1._showsFPS;
                }
                $p.addMethod($this_1, 'showsFPS', showsFPS$0_2, false);

                function paintAll$3(g, usesZ, currAlphaPc) {
                    g.pushStyle();
                    if ($this_1._autoClears) $this_1.$self.clear();
                    var child = $this_1._firstChild;
                    while (child != null) {
                        child.paintAll(g, usesZ, currAlphaPc);
                        child = child.next();
                    }
                    g.popStyle();
                    if ($this_1._showsFPS) {
                        g.pushStyle();
                        g.fill(H.BLACK);
                        g.text($this_1._app.__frameRate, 1, 17);
                        g.fill(H.WHITE);
                        g.text($this_1._app.__frameRate, 0, 16);
                        g.popStyle();
                    }
                }
                $p.addMethod($this_1, 'paintAll', paintAll$3, false);

                function draw$5(g, b, x, y, p) {

                }
                $p.addMethod($this_1, 'draw', draw$5, false);

                function createCopy$0() {
                    return null;
                }
                $p.addMethod($this_1, 'createCopy', createCopy$0, false);

                function $constr_1(papplet) {
                    $superCstr();

                    $this_1._app = papplet;
                    $this_1._autoClears = true;
                    $this_1.$self.background(HConstants.DEFAULT_BACKGROUND_COLOR);
                }

                function $constr() {
                    if (arguments.length === 1) {
                        $constr_1.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HStage, HDrawable);
            $p.extendInterfaceMembers(HStage, HImageHolder);
            HStage.$base = HDrawable;
            HStage.$interfaces = [HImageHolder];
            return HStage;
        })();
        $p.HStage = HStage;
        var H = (function() {
            function H() {
                var $this_1 = this;

                function $superCstr() {
                    $p.extendClassChain($this_1)
                }
                $p.defineProperty($this_1, '_self', {
                    get: function() {
                        return H._self
                    },
                    set: function(val) {
                        H._self = val
                    }
                });
                $p.defineProperty($this_1, '_app', {
                    get: function() {
                        return H._app
                    },
                    set: function(val) {
                        H._app = val
                    }
                });
                $p.defineProperty($this_1, '_graphicsContext', {
                    get: function() {
                        return H._graphicsContext
                    },
                    set: function(val) {
                        H._graphicsContext = val
                    }
                });
                $p.defineProperty($this_1, '_stage', {
                    get: function() {
                        return H._stage
                    },
                    set: function(val) {
                        H._stage = val
                    }
                });
                $p.defineProperty($this_1, '_behaviors', {
                    get: function() {
                        return H._behaviors
                    },
                    set: function(val) {
                        H._behaviors = val
                    }
                });
                $p.defineProperty($this_1, '_mouse', {
                    get: function() {
                        return H._mouse
                    },
                    set: function(val) {
                        H._mouse = val
                    }
                });
                $p.defineProperty($this_1, '_uses3D', {
                    get: function() {
                        return H._uses3D
                    },
                    set: function(val) {
                        H._uses3D = val
                    }
                });
                $p.addMethod($this_1, 'init', init$1, false);
                $p.addMethod($this_1, 'stage', stage$0, false);
                $p.addMethod($this_1, 'app', app$0, false);
                $p.addMethod($this_1, 'behaviors', behaviors$0, false);
                $p.addMethod($this_1, 'mouse', mouse$0, false);
                $p.addMethod($this_1, 'use3D', use3D$1, false);
                $p.addMethod($this_1, 'uses3D', uses3D$0, false);
                $p.addMethod($this_1, 'background', background$1, false);
                $p.addMethod($this_1, 'backgroundImg', backgroundImg$1, false);
                $p.addMethod($this_1, 'autoClear', autoClear$1, false);
                $p.addMethod($this_1, 'autoClears', autoClears$1, false);
                $p.addMethod($this_1, 'autoClears', autoClears$0_2, false);
                $p.addMethod($this_1, 'clearStage', clearStage$0, false);
                $p.addMethod($this_1, 'add', add$1, false);
                $p.addMethod($this_1, 'add', add$1_2, false);
                $p.addMethod($this_1, 'add', add$1_3, false);
                $p.addMethod($this_1, 'add', add$1_4, false);
                $p.addMethod($this_1, 'add', add$1_5, false);
                $p.addMethod($this_1, 'add', add$1_6, false);
                $p.addMethod($this_1, 'add', add$1_7, false);
                $p.addMethod($this_1, 'add', add$1_8, false);
                $p.addMethod($this_1, 'add', add$1_9, false);
                $p.addMethod($this_1, 'remove', remove$1, false);
                $p.addMethod($this_1, 'remove', remove$1_2, false);
                $p.addMethod($this_1, 'remove', remove$1_3, false);
                $p.addMethod($this_1, 'remove', remove$1_4, false);
                $p.addMethod($this_1, 'remove', remove$1_5, false);
                $p.addMethod($this_1, 'remove', remove$1_6, false);
                $p.addMethod($this_1, 'remove', remove$1_7, false);
                $p.addMethod($this_1, 'remove', remove$1_8, false);
                $p.addMethod($this_1, 'remove', remove$1_9, false);
                $p.addMethod($this_1, 'drawStage', drawStage$0, false);
                $p.addMethod($this_1, 'mouseStarted', mouseStarted$0, false);
                $p.addMethod($this_1, 'getImage', getImage$1, false);

                function $constr_0() {
                    $superCstr();

                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendInterfaceMembers(H, HConstants);
            H._self = null;
            H._app = null;
            H._graphicsContext = null;
            H._stage = null;
            H._behaviors = null;
            H._mouse = null;
            H._uses3D = false;

            function init$1(applet) {
                H._app = applet;
                if (H._self == null) H._self = new H();
                if (H._stage == null) H._stage = new HStage(H._app);
                if (H._behaviors == null) H._behaviors = new HBehaviorRegistry();
                if (H._mouse == null) H._mouse = new HMouse(H._app);
                try {
                    var dummyVar = H._app.g.A;
                    H._graphicsContext = H._app.g;
                } catch(e) {
                    var o = H._app;
                    H._graphicsContext = o;
                }
                return H._self;
            }
            $p.addMethod(H, 'init', init$1, false);

            function stage$0() {
                return H._stage;
            }
            $p.addMethod(H, 'stage', stage$0, false);

            function app$0() {
                return H._app;
            }
            $p.addMethod(H, 'app', app$0, false);

            function behaviors$0() {
                return H._behaviors;
            }
            $p.addMethod(H, 'behaviors', behaviors$0, false);

            function mouse$0() {
                return H._mouse;
            }
            $p.addMethod(H, 'mouse', mouse$0, false);

            function use3D$1(b) {
                H._uses3D = b;
                return H._self;
            }
            $p.addMethod(H, 'use3D', use3D$1, false);

            function uses3D$0() {
                return H._uses3D;
            }
            $p.addMethod(H, 'uses3D', uses3D$0, false);

            function background$1(clr) {
                H._stage.background(clr);
                return H._self;
            }
            $p.addMethod(H, 'background', background$1, false);

            function backgroundImg$1(arg) {
                H._stage.backgroundImg(arg);
                return H._self;
            }
            $p.addMethod(H, 'backgroundImg', backgroundImg$1, false);

            function autoClear$1(b) {
                H._stage.autoClear(b);
                return H._self;
            }
            $p.addMethod(H, 'autoClear', autoClear$1, false);

            function autoClears$1(b) {
                H._stage.autoClears(b);
                return H._self;
            }
            $p.addMethod(H, 'autoClears', autoClears$1, false);

            function autoClears$0_2() {
                return H._stage.autoClears();
            }
            $p.addMethod(H, 'autoClears', autoClears$0_2, false);

            function clearStage$0() {
                H._stage.clear();
                return H._self;
            }
            $p.addMethod(H, 'clearStage', clearStage$0, false);

            function add$1(stageChild) {
                return H._stage.add(stageChild);
            }
            $p.addMethod(H, 'add', add$1, false);

            function add$1_2(stageChild) {
                return H._stage.add(stageChild);
            }
            $p.addMethod(H, 'add', add$1_2, false);

            function add$1_3(stageChild) {
                return H._stage.add(stageChild);
            }
            $p.addMethod(H, 'add', add$1_3, false);

            function add$1_4(stageChild) {
                return H._stage.add(stageChild);
            }
            $p.addMethod(H, 'add', add$1_4, false);

            function add$1_5(stageChild) {
                return H._stage.add(stageChild);
            }
            $p.addMethod(H, 'add', add$1_5, false);

            function add$1_6(stageChild) {
                return H._stage.add(stageChild);
            }
            $p.addMethod(H, 'add', add$1_6, false);

            function add$1_7(stageChild) {
                return H._stage.add(stageChild);
            }
            $p.addMethod(H, 'add', add$1_7, false);

            function add$1_8(stageChild) {
                return H._stage.add(stageChild);
            }
            $p.addMethod(H, 'add', add$1_8, false);

            function add$1_9(stageChild) {
                return H._stage.add(stageChild);
            }
            $p.addMethod(H, 'add', add$1_9, false);

            function remove$1(stageChild) {
                return H._stage.remove(stageChild);
            }
            $p.addMethod(H, 'remove', remove$1, false);

            function remove$1_2(stageChild) {
                return H._stage.remove(stageChild);
            }
            $p.addMethod(H, 'remove', remove$1_2, false);

            function remove$1_3(stageChild) {
                return H._stage.remove(stageChild);
            }
            $p.addMethod(H, 'remove', remove$1_3, false);

            function remove$1_4(stageChild) {
                return H._stage.remove(stageChild);
            }
            $p.addMethod(H, 'remove', remove$1_4, false);

            function remove$1_5(stageChild) {
                return H._stage.remove(stageChild);
            }
            $p.addMethod(H, 'remove', remove$1_5, false);

            function remove$1_6(stageChild) {
                return H._stage.remove(stageChild);
            }
            $p.addMethod(H, 'remove', remove$1_6, false);

            function remove$1_7(stageChild) {
                return H._stage.remove(stageChild);
            }
            $p.addMethod(H, 'remove', remove$1_7, false);

            function remove$1_8(stageChild) {
                return H._stage.remove(stageChild);
            }
            $p.addMethod(H, 'remove', remove$1_8, false);

            function remove$1_9(stageChild) {
                return H._stage.remove(stageChild);
            }
            $p.addMethod(H, 'remove', remove$1_9, false);

            function drawStage$0() {
                H._behaviors.runAll(H._app);
                H._mouse.handleEvents();
                H._stage.paintAll(H._graphicsContext, H._uses3D, 1);
                return H._self;
            }
            $p.addMethod(H, 'drawStage', drawStage$0, false);

            function mouseStarted$0() {
                return H._mouse.started();
            }
            $p.addMethod(H, 'mouseStarted', mouseStarted$0, false);

            function getImage$1(imgArg) {
                if ($p.__instanceof(imgArg, $p.PImage)) return imgArg;
                if ($p.__instanceof(imgArg, HImageHolder)) return (imgArg).image();
                if ($p.__instanceof(imgArg, String)) return H._app.loadImage(imgArg);
                return null;
            }
            $p.addMethod(H, 'getImage', getImage$1, false);
            H.$interfaces = [HConstants];
            return H;
        })();
        $p.H = H;
        var HBundle = (function() {
            function HBundle() {
                var $this_1 = this;

                function $superCstr() {
                    $p.extendClassChain($this_1)
                }
                $this_1.objectContents = null;
                $this_1.numberContents = null;

                function obj$2(key, value) {
                    $this_1.objectContents.put(key, value);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'obj', obj$2, false);

                function num$2(key, value) {
                    $this_1.numberContents.put(key, value);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'num', num$2, false);

                function bool$2(key, value) {
                    $this_1.numberContents.put(key, (value ? 1 : 0));
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'bool', bool$2, false);

                function obj$1_2(key) {
                    return $this_1.objectContents.get(key);
                }
                $p.addMethod($this_1, 'obj', obj$1_2, false);

                function str$1(key) {
                    var o = $this_1.objectContents.get(key);
                    if ($p.__instanceof(o, String)) return o;
                    return null;
                }
                $p.addMethod($this_1, 'str', str$1, false);

                function num$1_2(key) {
                    return $this_1.numberContents.get(key);
                }
                $p.addMethod($this_1, 'num', num$1_2, false);

                function numI$1(key) {
                    return Math.round($this_1.numberContents.get(key));
                }
                $p.addMethod($this_1, 'numI', numI$1, false);

                function bool$1_2(key) {
                    return ($this_1.numberContents.get(key) != 0);
                }
                $p.addMethod($this_1, 'bool', bool$1_2, false);

                function $constr_0() {
                    $superCstr();

                    $this_1.objectContents = new $p.HashMap();
                    $this_1.numberContents = new $p.HashMap();
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            return HBundle;
        })();
        $p.HBundle = HBundle;
        var HCapture = (function() {
            function HCapture() {
                var $this_1 = this;

                function $superCstr() {
                    $p.extendClassChain($this_1)
                }
                $this_1._capturer = null;
                $this_1._renderer = null;
                $this_1._filename = null;
                $this_1._isRecording = false;
                $this_1._start = 0;
                $this_1._end = 0;

                function capture$0() {
                    $this_1._start = $this_1._end = H.app().frameCount;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'capture', capture$0, false);

                function capture$1_2(frameNum) {
                    $this_1._start = $this_1._end = H.app().frameCount;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'capture', capture$1_2, false);

                function start$1(frameNum) {
                    $this_1._start = frameNum;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'start', start$1, false);

                function start$0_2() {
                    return $this_1._start;
                }
                $p.addMethod($this_1, 'start', start$0_2, false);

                function end$1(frameNum) {
                    $this_1._end = frameNum;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'end', end$1, false);

                function end$0_2() {
                    return $this_1._end;
                }
                $p.addMethod($this_1, 'end', end$0_2, false);

                function isRecording$0() {
                    return $this_1._isRecording;
                }
                $p.addMethod($this_1, 'isRecording', isRecording$0, false);

                function filename$1(s) {
                    $this_1._filename = s;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'filename', filename$1, false);

                function filename$0_2() {
                    return $this_1._filename;
                }
                $p.addMethod($this_1, 'filename', filename$0_2, false);

                function renderer$1(s) {
                    $this_1._renderer = s;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'renderer', renderer$1, false);

                function renderer$0_2() {
                    return $this_1._renderer;
                }
                $p.addMethod($this_1, 'renderer', renderer$0_2, false);

                function run$0() {
                    if ($this_1._isRecording) {
                        if ($this_1._end < 0) {
                            if (H.app().frameCount >= $this_1._end) $this_1._isRecording = false;
                        } else {
                            var app = H.app();
                        }
                        if (!$this_1._isRecording) {

                        }
                    } else {
                        if ($this_1._start < 0) {

                        } else {

                        } if ($this_1._isRecording) {
                            H.app().endRecord();
                            if ($this_1._capturer != null) {
                                $this_1._capturer.save($this_1._filename);
                                $this_1._capturer = null;
                            }
                        }
                    }
                }
                $p.addMethod($this_1, 'run', run$0, false);

                function $constr_0() {
                    $superCstr();

                    $this_1._start = $this_1._end = -1;
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            return HCapture;
        })();
        $p.HCapture = HCapture;
        var HColors = (function() {
            function HColors() {
                var $this_1 = this;

                function $superCstr() {
                    $p.extendClassChain($this_1)
                }
                $p.addMethod($this_1, 'explode', explode$1, false);
                $p.addMethod($this_1, 'merge', merge$4, false);
                $p.addMethod($this_1, 'setAlpha', setAlpha$2, false);
                $p.addMethod($this_1, 'setRed', setRed$2, false);
                $p.addMethod($this_1, 'setGreen', setGreen$2, false);
                $p.addMethod($this_1, 'setBlue', setBlue$2, false);
                $p.addMethod($this_1, 'getAlpha', getAlpha$1, false);
                $p.addMethod($this_1, 'getRed', getRed$1, false);
                $p.addMethod($this_1, 'getGreen', getGreen$1, false);
                $p.addMethod($this_1, 'getBlue', getBlue$1, false);
                $p.addMethod($this_1, 'isTransparent', isTransparent$1, false);

                function $constr() {
                    $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendInterfaceMembers(HColors, HConstants);

            function explode$1(clr) {
                var explodedColors = $p.createJavaArray('int', [4]);
                for (var i = 0; i < 4; ++i) explodedColors[3 - i] = (clr >>> (i * 8)) & 0xFF;
                return explodedColors;
            }
            $p.addMethod(HColors, 'explode', explode$1, false);

            function merge$4(a, r, g, b) {
                if (a < 0) a = 0;
                else if (a > 255) a = 255;
                if (r < 0) r = 0;
                else if (r > 255) r = 255;
                if (g < 0) g = 0;
                else if (g > 255) g = 255;
                if (b < 0) b = 0;
                else if (b > 255) b = 255;
                return (a << 24) | (r << 16) | (g << 8) | b;
            }
            $p.addMethod(HColors, 'merge', merge$4, false);

            function setAlpha$2(clr, newClr) {
                if (newClr < 0) newClr = 0;
                else if (newClr > 255) newClr = 255;
                return clr & 0x00FFFFFF | (newClr << 24);
            }
            $p.addMethod(HColors, 'setAlpha', setAlpha$2, false);

            function setRed$2(clr, newClr) {
                if (newClr < 0) newClr = 0;
                else if (newClr > 255) newClr = 255;
                return clr & 0xFF00FFFF | (newClr << 16);
            }
            $p.addMethod(HColors, 'setRed', setRed$2, false);

            function setGreen$2(clr, newClr) {
                if (newClr < 0) newClr = 0;
                else if (newClr > 255) newClr = 255;
                return clr & 0xFFFF00FF | (newClr << 8);
            }
            $p.addMethod(HColors, 'setGreen', setGreen$2, false);

            function setBlue$2(clr, newClr) {
                if (newClr < 0) newClr = 0;
                else if (newClr > 255) newClr = 255;
                return clr & 0xFFFFFF00 | newClr;
            }
            $p.addMethod(HColors, 'setBlue', setBlue$2, false);

            function getAlpha$1(clr) {
                return clr >>> 24;
            }
            $p.addMethod(HColors, 'getAlpha', getAlpha$1, false);

            function getRed$1(clr) {
                return (clr >>> 16) & 255;
            }
            $p.addMethod(HColors, 'getRed', getRed$1, false);

            function getGreen$1(clr) {
                return (clr >>> 8) & 255;
            }
            $p.addMethod(HColors, 'getGreen', getGreen$1, false);

            function getBlue$1(clr) {
                return clr & 255;
            }
            $p.addMethod(HColors, 'getBlue', getBlue$1, false);

            function isTransparent$1(clr) {
                return (clr & 0xFF000000) == 0;
            }
            $p.addMethod(HColors, 'isTransparent', isTransparent$1, false);
            HColors.$interfaces = [HConstants];
            return HColors;
        })();
        $p.HColors = HColors;
        var HMath = (function() {
            function HMath() {
                var $this_1 = this;

                function $superCstr() {
                    $p.extendClassChain($this_1)
                }
                $p.defineProperty($this_1, '_usingTempSeed', {
                    get: function() {
                        return HMath._usingTempSeed
                    },
                    set: function(val) {
                        HMath._usingTempSeed = val
                    }
                });
                $p.defineProperty($this_1, '_resetSeedValue', {
                    get: function() {
                        return HMath._resetSeedValue
                    },
                    set: function(val) {
                        HMath._resetSeedValue = val
                    }
                });
                $p.addMethod($this_1, 'dist', dist$4, false);
                $p.addMethod($this_1, 'rotatePointArr', rotatePointArr$3, false);
                $p.addMethod($this_1, 'rotatePoint', rotatePoint$3, false);
                $p.addMethod($this_1, 'yAxisAngle', yAxisAngle$4, false);
                $p.addMethod($this_1, 'xAxisAngle', xAxisAngle$4, false);
                $p.addMethod($this_1, 'absLocArr', absLocArr$3, false);
                $p.addMethod($this_1, 'absLoc', absLoc$3, false);
                $p.addMethod($this_1, 'absLoc', absLoc$1_2, false);
                $p.addMethod($this_1, 'relLocArr', relLocArr$3, false);
                $p.addMethod($this_1, 'relLoc', relLoc$3, false);
                $p.addMethod($this_1, 'quadrant', quadrant$4, false);
                $p.addMethod($this_1, 'quadrant', quadrant$2_2, false);
                $p.addMethod($this_1, 'ellipseRadius', ellipseRadius$3, false);
                $p.addMethod($this_1, 'ellipseRadiusRad', ellipseRadiusRad$3, false);
                $p.addMethod($this_1, 'ellipsePoint', ellipsePoint$5, false);
                $p.addMethod($this_1, 'ellipsePointRad', ellipsePointRad$5, false);
                $p.addMethod($this_1, 'ellipsePointRadArr', ellipsePointRadArr$5, false);
                $p.addMethod($this_1, 'normalizeAngle', normalizeAngle$1, false);
                $p.addMethod($this_1, 'normalizeAngleRad', normalizeAngleRad$1, false);
                $p.addMethod($this_1, 'normalizeAngle2', normalizeAngle2$1, false);
                $p.addMethod($this_1, 'normalizeAngleRad2', normalizeAngleRad2$1, false);
                $p.addMethod($this_1, 'squishAngle', squishAngle$3, false);
                $p.addMethod($this_1, 'squishAngleRad', squishAngleRad$3, false);
                $p.addMethod($this_1, 'lineSide', lineSide$6, false);
                $p.addMethod($this_1, 'collinear', collinear$6, false);
                $p.addMethod($this_1, 'leftOfLine', leftOfLine$6, false);
                $p.addMethod($this_1, 'rightOfLine', rightOfLine$6, false);
                $p.addMethod($this_1, 'solveCubic', solveCubic$5, false);
                $p.addMethod($this_1, 'solveQuadratic', solveQuadratic$4, false);
                $p.addMethod($this_1, 'bezierParam', bezierParam$6, false);
                $p.addMethod($this_1, 'bezierParam', bezierParam$5_2, false);
                $p.addMethod($this_1, 'bezierPoint', bezierPoint$5, false);
                $p.addMethod($this_1, 'bezierPoint', bezierPoint$4_2, false);
                $p.addMethod($this_1, 'bezierTangent', bezierTangent$5, false);
                $p.addMethod($this_1, 'bezierTangent', bezierTangent$4_2, false);
                $p.addMethod($this_1, 'randomInt', randomInt$1, false);
                $p.addMethod($this_1, 'randomInt', randomInt$2_2, false);
                $p.addMethod($this_1, 'randomInt32', randomInt32$0, false);
                $p.addMethod($this_1, 'tempSeed', tempSeed$1, false);
                $p.addMethod($this_1, 'removeTempSeed', removeTempSeed$0, false);
                $p.addMethod($this_1, 'sineWave', sineWave$1, false);
                $p.addMethod($this_1, 'triangleWave', triangleWave$1, false);
                $p.addMethod($this_1, 'sawWave', sawWave$1, false);
                $p.addMethod($this_1, 'squareWave', squareWave$1, false);
                $p.addMethod($this_1, 'hasBits', hasBits$2, false);
                $p.addMethod($this_1, 'hasBits', hasBits$2_2, false);
                $p.addMethod($this_1, 'setBits', setBits$3, false);
                $p.addMethod($this_1, 'setBits', setBits$3_2, false);
                $p.addMethod($this_1, 'lessThan', lessThan$3, false);
                $p.addMethod($this_1, 'lessThan', lessThan$2_2, false);
                $p.addMethod($this_1, 'greaterThan', greaterThan$3, false);
                $p.addMethod($this_1, 'greaterThan', greaterThan$2_2, false);
                $p.addMethod($this_1, 'isEqual', isEqual$3, false);
                $p.addMethod($this_1, 'isEqual', isEqual$2_2, false);
                $p.addMethod($this_1, 'isZero', isZero$2, false);
                $p.addMethod($this_1, 'isZero', isZero$1_2, false);
                $p.addMethod($this_1, 'map', map$5, false);
                $p.addMethod($this_1, 'round512', round512$1, false);

                function $constr() {
                    $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendInterfaceMembers(HMath, HConstants);
            HMath._usingTempSeed = false;
            HMath._resetSeedValue = 0;

            function dist$4(x1, y1, x2, y2) {
                var w = x2 - x1;
                var h = y2 - y1;
                return Math.sqrt(w * w + h * h);
            }
            $p.addMethod(HMath, 'dist', dist$4, false);

            function rotatePointArr$3(x, y, rad) {
                var pt = $p.createJavaArray('float', [2]);
                var c = Math.cos(rad);
                var s = Math.sin(rad);
                pt[0] = x * c - y * s;
                pt[1] = x * s + y * c;
                return pt;
            }
            $p.addMethod(HMath, 'rotatePointArr', rotatePointArr$3, false);

            function rotatePoint$3(x, y, rad) {
                var f = HMath.rotatePointArr(x, y, rad);
                return new $p.PVector(f[0], f[1]);
            }
            $p.addMethod(HMath, 'rotatePoint', rotatePoint$3, false);

            function yAxisAngle$4(x1, y1, x2, y2) {
                return Math.atan2(x2 - x1, y2 - y1);
            }
            $p.addMethod(HMath, 'yAxisAngle', yAxisAngle$4, false);

            function xAxisAngle$4(x1, y1, x2, y2) {
                return Math.atan2(y2 - y1, x2 - x1);
            }
            $p.addMethod(HMath, 'xAxisAngle', xAxisAngle$4, false);

            function absLocArr$3(ref, relX, relY) {
                var f = [relX, relY, 0];
                while (ref != null) {
                    var rot = ref.rotationRad();
                    var g = HMath.rotatePointArr(f[0], f[1], rot);
                    f[0] = g[0] + ref.x();
                    f[1] = g[1] + ref.y();
                    f[2] += rot;
                    ref = ref.parent();
                }
                return f;
            }
            $p.addMethod(HMath, 'absLocArr', absLocArr$3, false);

            function absLoc$3(ref, relX, relY) {
                var f = HMath.absLocArr(ref, relX, relY);
                return new $p.PVector(f[0], f[1]);
            }
            $p.addMethod(HMath, 'absLoc', absLoc$3, false);

            function absLoc$1_2(d) {
                return HMath.absLoc(d, 0, 0);
            }
            $p.addMethod(HMath, 'absLoc', absLoc$1_2, false);

            function relLocArr$3(ref, absX, absY) {
                var f = HMath.absLocArr(ref, 0, 0);
                return HMath.rotatePointArr(absX - f[0], absY - f[1], -f[2]);
            }
            $p.addMethod(HMath, 'relLocArr', relLocArr$3, false);

            function relLoc$3(ref, absX, absY) {
                var f = HMath.relLocArr(ref, absX, absY);
                return new $p.PVector(f[0], f[1]);
            }
            $p.addMethod(HMath, 'relLoc', relLoc$3, false);

            function quadrant$4(cx, cy, x, y) {
                return (y >= cy) ? (x >= cx ? 1 : 2) : (x >= cx ? 4 : 3);
            }
            $p.addMethod(HMath, 'quadrant', quadrant$4, false);

            function quadrant$2_2(dcx, dcy) {
                return (dcy >= 0) ? (dcx >= 0 ? 1 : 2) : (dcx >= 0 ? 4 : 3);
            }
            $p.addMethod(HMath, 'quadrant', quadrant$2_2, false);

            function ellipseRadius$3(a, b, deg) {
                return HMath.ellipseRadiusRad(a, b, deg * D2R);
            }
            $p.addMethod(HMath, 'ellipseRadius', ellipseRadius$3, false);

            function ellipseRadiusRad$3(a, b, rad) {
                var cosb = b * Math.cos(rad);
                var sina = a * Math.sin(rad);
                return a * b / Math.sqrt(cosb * cosb + sina * sina);
            }
            $p.addMethod(HMath, 'ellipseRadiusRad', ellipseRadiusRad$3, false);

            function ellipsePoint$5(cx, cy, a, b, deg) {
                return HMath.ellipsePointRad(cx, cy, a, b, deg * D2R);
            }
            $p.addMethod(HMath, 'ellipsePoint', ellipsePoint$5, false);

            function ellipsePointRad$5(cx, cy, a, b, rad) {
                var f = HMath.ellipsePointRadArr(cx, cy, a, b, rad);
                return new $p.PVector(f[0], f[1]);
            }
            $p.addMethod(HMath, 'ellipsePointRad', ellipsePointRad$5, false);

            function ellipsePointRadArr$5(cx, cy, a, b, rad) {
                var f = $p.createJavaArray('float', [3]);
                f[2] = HMath.ellipseRadiusRad(a, b, rad);
                f[0] = f[2] * Math.cos(rad) + cx;
                f[1] = f[2] * Math.sin(rad) + cy;
                return f;
            }
            $p.addMethod(HMath, 'ellipsePointRadArr', ellipsePointRadArr$5, false);

            function normalizeAngle$1(deg) {
                return HMath.normalizeAngleRad(deg * D2R) * R2D;
            }
            $p.addMethod(HMath, 'normalizeAngle', normalizeAngle$1, false);

            function normalizeAngleRad$1(rad) {
                rad %= $p.PConstants.TWO_PI;
                if (rad < -$p.PConstants.PI) rad += $p.PConstants.TWO_PI;
                else if (rad > $p.PConstants.PI) rad -= $p.PConstants.TWO_PI;
                return rad;
            }
            $p.addMethod(HMath, 'normalizeAngleRad', normalizeAngleRad$1, false);

            function normalizeAngle2$1(deg) {
                return HMath.normalizeAngleRad2(deg * D2R) * R2D;
            }
            $p.addMethod(HMath, 'normalizeAngle2', normalizeAngle2$1, false);

            function normalizeAngleRad2$1(rad) {
                var norm = rad % $p.PConstants.TWO_PI;
                if (norm < 0) norm += $p.PConstants.TWO_PI;
                return norm;
            }
            $p.addMethod(HMath, 'normalizeAngleRad2', normalizeAngleRad2$1, false);

            function squishAngle$3(w, h, deg) {
                return HMath.squishAngle(w, h, deg * D2R) * R2D;
            }
            $p.addMethod(HMath, 'squishAngle', squishAngle$3, false);

            function squishAngleRad$3(w, h, rad) {
                var dx = Math.cos(rad) * w / h;
                var dy = Math.sin(rad);
                return Math.atan2(dy, dx);
            }
            $p.addMethod(HMath, 'squishAngleRad', squishAngleRad$3, false);

            function lineSide$6(x1, y1, x2, y2, ptx, pty) {
                return (x2 - x1) * (pty - y1) - (y2 - y1) * (ptx - x1);
            }
            $p.addMethod(HMath, 'lineSide', lineSide$6, false);

            function collinear$6(x1, y1, x2, y2, ptx, pty) {
                return (HMath.lineSide(x1, y1, x2, y2, ptx, pty) == 0);
            }
            $p.addMethod(HMath, 'collinear', collinear$6, false);

            function leftOfLine$6(x1, y1, x2, y2, ptx, pty) {
                return (HMath.lineSide(x1, y1, x2, y2, ptx, pty) < 0);
            }
            $p.addMethod(HMath, 'leftOfLine', leftOfLine$6, false);

            function rightOfLine$6(x1, y1, x2, y2, ptx, pty) {
                return (HMath.lineSide(x1, y1, x2, y2, ptx, pty) > 0);
            }
            $p.addMethod(HMath, 'rightOfLine', rightOfLine$6, false);

            function solveCubic$5(a, b, c, d, roots) {
                if (Math.abs(a) < $p.EPSILON) return HMath.solveQuadratic(b, c, d, roots);
                b /= a;
                c /= a;
                d /= a;
                var bb = b * b;
                var p = (bb - 3 * c) / 9;
                var ppp = p * p * p;
                var q = (2 * bb * b - 9 * b * c + 27 * d) / 54;
                var D = q * q - ppp;
                b /= 3;
                if (Math.abs(D) < $p.EPSILON) {
                    if (Math.abs(q) < $p.EPSILON) {
                        roots[0] = -b;
                        return 1;
                    }
                    var sqrtp = Math.sqrt(p);
                    var signq = (q > 0) ? 1 : -1;
                    roots[0] = -signq * 2 * sqrtp - b;
                    roots[1] = signq * sqrtp - b;
                    return 2;
                }
                if (D < 0) {
                    var sqrtp = Math.sqrt(p);
                    var phi = Math.acos(q / (sqrtp * sqrtp * sqrtp)) / 3;
                    var t = -2 * sqrtp;
                    var o = $p.PConstants.TWO_PI / 3;
                    roots[0] = t * Math.cos(phi) - b;
                    roots[1] = t * Math.cos(phi + o) - b;
                    roots[2] = t * Math.cos(phi - o) - b;
                    return 3;
                }
                var A = (q > 0 ? -1 : 1) * Math.pow(Math.abs(q) + Math.sqrt(D), 1.0 / 3.0);
                roots[0] = A + p / A - b;
                return 1;
            }
            $p.addMethod(HMath, 'solveCubic', solveCubic$5, false);

            function solveQuadratic$4(a, b, c, roots) {
                if (Math.abs(a) < $p.EPSILON) {
                    if (Math.abs(b) >= $p.EPSILON) {
                        roots[0] = -c / b;
                        return 1;
                    }
                    return (Math.abs(c) < $p.EPSILON) ? -1 : 0;
                }
                var q = b * b - 4 * a * c;
                if (q < 0) return 0;
                q = Math.sqrt(q);
                a *= 2;
                var numRoots = 0;
                roots[numRoots++] = (-b - q) / a;
                if (q > 0) roots[numRoots++] = (-b + q) / a;
                return numRoots;
            }
            $p.addMethod(HMath, 'solveQuadratic', solveQuadratic$4, false);

            function bezierParam$6(p0, p1, p2, p3, val, params) {
                var max = p0;
                if (max < p1) max = p1;
                if (max < p2) max = p2;
                if (max < p3) max = p3;
                var min = p0;
                if (min > p1) min = p1;
                if (min > p2) min = p2;
                if (min > p3) min = p3;
                if (val < min || val > max) return 0;
                var a = 3 * (p1 - p2) - p0 + p3;
                var b = 3 * (p0 - 2 * p1 + p2);
                var c = 3 * (p1 - p0);
                var d = p0 - val;
                return HMath.solveCubic(a, b, c, d, params);
            }
            $p.addMethod(HMath, 'bezierParam', bezierParam$6, false);

            function bezierParam$5_2(p0, p1, p2, val, params) {
                var max = p0;
                if (max < p1) max = p1;
                if (max < p2) max = p2;
                var min = p0;
                if (min > p1) min = p1;
                if (min > p2) min = p2;
                if (val < min || val > max) return 0;
                var a = p2 - 2 * p1 + p0;
                var b = 2 * (p1 - p0);
                var c = p0 - val;
                return HMath.solveQuadratic(a, b, c, params);
            }
            $p.addMethod(HMath, 'bezierParam', bezierParam$5_2, false);

            function bezierPoint$5(p0, p1, p2, p3, t) {
                var tt = t * t;
                var a = 3 * (p1 - p2) - p0 + p3;
                var b = 3 * (p0 - 2 * p1 + p2);
                var c = 3 * (p1 - p0);
                return a * tt * t + b * tt + c * t + p0;
            }
            $p.addMethod(HMath, 'bezierPoint', bezierPoint$5, false);

            function bezierPoint$4_2(p0, p1, p2, t) {
                var a = p2 - 2 * p1 + p0;
                var b = 2 * (p1 - p0);
                return a * t * t + b * t + p0;
            }
            $p.addMethod(HMath, 'bezierPoint', bezierPoint$4_2, false);

            function bezierTangent$5(p0, p1, p2, p3, t) {
                var a = 3 * (3 * (p1 - p2) - p0 + p3);
                var b = 6 * (p0 - 2 * p1 + p2);
                var c = 3 * (p1 - p0);
                return a * t * t + b * t + c;
            }
            $p.addMethod(HMath, 'bezierTangent', bezierTangent$5, false);

            function bezierTangent$4_2(p0, p1, p2, t) {
                var a = 2 * (p2 - 2 * p1 + p0);
                var b = 2 * (p1 - p0);
                return a * t + b;
            }
            $p.addMethod(HMath, 'bezierTangent', bezierTangent$4_2, false);

            function randomInt$1(high) {
                return $p.__int_cast(Math.floor(H.app().random(high)));
            }
            $p.addMethod(HMath, 'randomInt', randomInt$1, false);

            function randomInt$2_2(low, high) {
                return $p.__int_cast(Math.floor(H.app().random(low, high)));
            }
            $p.addMethod(HMath, 'randomInt', randomInt$2_2, false);

            function randomInt32$0() {
                return HMath.randomInt(-2147483648, 2147483647);
            }
            $p.addMethod(HMath, 'randomInt32', randomInt32$0, false);

            function tempSeed$1(seed) {
                if (!HMath._usingTempSeed) {
                    HMath._resetSeedValue = HMath.randomInt32();
                    HMath._usingTempSeed = true;
                }
                H.app().randomSeed(seed);
            }
            $p.addMethod(HMath, 'tempSeed', tempSeed$1, false);

            function removeTempSeed$0() {
                H.app().randomSeed(HMath._resetSeedValue);
            }
            $p.addMethod(HMath, 'removeTempSeed', removeTempSeed$0, false);

            function sineWave$1(stepDegrees) {
                return Math.sin(stepDegrees * H.D2R);
            }
            $p.addMethod(HMath, 'sineWave', sineWave$1, false);

            function triangleWave$1(stepDegrees) {
                var outVal = (stepDegrees % 180) / 90;
                if (outVal > 1) outVal = 2 - outVal;
                if (stepDegrees % 360 > 180) outVal = -outVal;
                return outVal;
            }
            $p.addMethod(HMath, 'triangleWave', triangleWave$1, false);

            function sawWave$1(stepDegrees) {
                var outVal = (stepDegrees % 180) / 180;
                if (stepDegrees % 360 >= 180) outVal -= 1;
                return outVal;
            }
            $p.addMethod(HMath, 'sawWave', sawWave$1, false);

            function squareWave$1(stepDegrees) {
                return (stepDegrees % 360 > 180) ? -1 : 1;
            }
            $p.addMethod(HMath, 'squareWave', squareWave$1, false);

            function hasBits$2(target, mask) {
                return (target & mask) == mask;
            }
            $p.addMethod(HMath, 'hasBits', hasBits$2, false);

            function hasBits$2_2(target, mask) {
                return (target & mask) == mask;
            }
            $p.addMethod(HMath, 'hasBits', hasBits$2_2, false);

            function setBits$3(target, mask, val) {
                return (val ? target | mask : target & (~mask));
            }
            $p.addMethod(HMath, 'setBits', setBits$3, false);

            function setBits$3_2(target, mask, val) {
                return (val) ? target | mask : target & (~mask);
            }
            $p.addMethod(HMath, 'setBits', setBits$3_2, false);

            function lessThan$3(a, b, tolerance) {
                return a < b + tolerance;
            }
            $p.addMethod(HMath, 'lessThan', lessThan$3, false);

            function lessThan$2_2(a, b) {
                return a < b + TOLERANCE;
            }
            $p.addMethod(HMath, 'lessThan', lessThan$2_2, false);

            function greaterThan$3(a, b, tolerance) {
                return b < a + tolerance;
            }
            $p.addMethod(HMath, 'greaterThan', greaterThan$3, false);

            function greaterThan$2_2(a, b) {
                return b < a + TOLERANCE;
            }
            $p.addMethod(HMath, 'greaterThan', greaterThan$2_2, false);

            function isEqual$3(a, b, tolerance) {
                return Math.abs(a - b) < tolerance;
            }
            $p.addMethod(HMath, 'isEqual', isEqual$3, false);

            function isEqual$2_2(a, b) {
                return Math.abs(a - b) < TOLERANCE;
            }
            $p.addMethod(HMath, 'isEqual', isEqual$2_2, false);

            function isZero$2(a, tolerance) {
                return Math.abs(a) < tolerance;
            }
            $p.addMethod(HMath, 'isZero', isZero$2, false);

            function isZero$1_2(a) {
                return Math.abs(a) < TOLERANCE;
            }
            $p.addMethod(HMath, 'isZero', isZero$1_2, false);

            function map$5(val, start1, stop1, start2, stop2) {
                return start2 + (stop2 - start2) * (val - start1) / (stop1 - start1);
            }
            $p.addMethod(HMath, 'map', map$5, false);

            function round512$1(val) {
                return Math.round(val * 512) / 512;
            }
            $p.addMethod(HMath, 'round512', round512$1, false);
            HMath.$interfaces = [HConstants];
            return HMath;
        })();
        $p.HMath = HMath;
        var HMouse = (function() {
            function HMouse() {
                var $this_1 = this;

                function $superCstr() {
                    $p.extendClassChain($this_1)
                }
                $this_1._app = null;
                $this_1._button = 0;
                $this_1._started = false;
                $this_1._moved = false;

                function started$0() {
                    return $this_1._started;
                }
                $p.addMethod($this_1, 'started', started$0, false);

                function moved$0() {
                    return $this_1._moved;
                }
                $p.addMethod($this_1, 'moved', moved$0, false);

                function button$0() {
                    return $this_1._button;
                }
                $p.addMethod($this_1, 'button', button$0, false);

                function handleEvents$0() {
                    $this_1._button = $this_1._app.mouseButton;
                    if (!$this_1._moved) $this_1._moved = ($this_1._app.pmouseX != 0) || ($this_1._app.pmouseY != 0);
                    else if (!$this_1._started) $this_1._started = true;
                }
                $p.addMethod($this_1, 'handleEvents', handleEvents$0, false);

                function x$0() {
                    return $this_1._app.mouseX;
                }
                $p.addMethod($this_1, 'x', x$0, false);

                function x$1_2(newX) {
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'x', x$1_2, false);

                function y$0() {
                    return $this_1._app.mouseY;
                }
                $p.addMethod($this_1, 'y', y$0, false);

                function y$1_2(newY) {
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'y', y$1_2, false);

                function z$0() {
                    return 0;
                }
                $p.addMethod($this_1, 'z', z$0, false);

                function z$1_2(newZ) {
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'z', z$1_2, false);

                function $constr_1(app) {
                    $superCstr();

                    $this_1._app = app;
                }

                function $constr() {
                    if (arguments.length === 1) {
                        $constr_1.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendInterfaceMembers(HMouse, HLocatable);
            HMouse.$interfaces = [HLocatable];
            return HMouse;
        })();
        $p.HMouse = HMouse;
        var HVector = (function() {
            function HVector() {
                var $this_1 = this;

                function $superCstr() {
                    $p.extendClassChain($this_1)
                }
                $this_1._x = 0;
                $this_1._y = 0;
                $this_1._z = 0;

                function x$0() {
                    return $this_1._x;
                }
                $p.addMethod($this_1, 'x', x$0, false);

                function x$1_2(newX) {
                    $this_1._x = newX;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'x', x$1_2, false);

                function y$0() {
                    return $this_1._y;
                }
                $p.addMethod($this_1, 'y', y$0, false);

                function y$1_2(newY) {
                    $this_1._y = newY;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'y', y$1_2, false);

                function z$0() {
                    return $this_1._z;
                }
                $p.addMethod($this_1, 'z', z$0, false);

                function z$1_2(newZ) {
                    $this_1._z = newZ;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'z', z$1_2, false);

                function $constr_0() {
                    $superCstr();

                }

                function $constr_2(xCoord, yCoord) {
                    $superCstr();

                    $this_1._x = xCoord;
                    $this_1._y = yCoord;
                }

                function $constr_3(xCoord, yCoord, zCoord) {
                    $superCstr();

                    $this_1._x = xCoord;
                    $this_1._y = yCoord;
                    $this_1._z = zCoord;
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else if (arguments.length === 2) {
                        $constr_2.apply($this_1, arguments);
                    } else if (arguments.length === 3) {
                        $constr_3.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendInterfaceMembers(HVector, HLocatable);
            HVector.$interfaces = [HLocatable];
            return HVector;
        })();
        $p.HVector = HVector;
        var HWarnings = (function() {
            function HWarnings() {
                var $this_1 = this;

                function $superCstr() {
                    $p.extendClassChain($this_1)
                }
                $p.defineProperty($this_1, 'NULL_TARGET', {
                    get: function() {
                        return HWarnings.NULL_TARGET
                    },
                    set: function(val) {
                        HWarnings.NULL_TARGET = val
                    }
                });
                $p.defineProperty($this_1, 'NO_PROTOTYPE', {
                    get: function() {
                        return HWarnings.NO_PROTOTYPE
                    },
                    set: function(val) {
                        HWarnings.NO_PROTOTYPE = val
                    }
                });
                $p.defineProperty($this_1, 'NULL_ARGUMENT', {
                    get: function() {
                        return HWarnings.NULL_ARGUMENT
                    },
                    set: function(val) {
                        HWarnings.NULL_ARGUMENT = val
                    }
                });
                $p.defineProperty($this_1, 'INVALID_DEST', {
                    get: function() {
                        return HWarnings.INVALID_DEST
                    },
                    set: function(val) {
                        HWarnings.INVALID_DEST = val
                    }
                });
                $p.defineProperty($this_1, 'DESTCEPTION', {
                    get: function() {
                        return HWarnings.DESTCEPTION
                    },
                    set: function(val) {
                        HWarnings.DESTCEPTION = val
                    }
                });
                $p.defineProperty($this_1, 'CHILDCEPTION', {
                    get: function() {
                        return HWarnings.CHILDCEPTION
                    },
                    set: function(val) {
                        HWarnings.CHILDCEPTION = val
                    }
                });
                $p.defineProperty($this_1, 'INVALID_CHILD', {
                    get: function() {
                        return HWarnings.INVALID_CHILD
                    },
                    set: function(val) {
                        HWarnings.INVALID_CHILD = val
                    }
                });
                $p.addMethod($this_1, 'warn', warn$3, false);

                function $constr_0() {
                    $superCstr();

                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            HWarnings.NULL_TARGET = "A target should be assigned before using this method.";
            HWarnings.NO_PROTOTYPE = "This pool needs at least one prototype before requesting.";
            HWarnings.NULL_ARGUMENT = "This method does not take null arguments.";
            HWarnings.INVALID_DEST = "The destination doesn't not belong to any parent.";
            HWarnings.DESTCEPTION = "The destination cannot be itself";
            HWarnings.CHILDCEPTION = "Can't add this parent as its own child.";
            HWarnings.INVALID_CHILD = "The child you're trying to add is cannot be added to this drawable.";

            function warn$3(type, loc, msg) {
                var app = H.app();
                app.println("[Warning: " + type + " @ " + loc + "]");
                if (msg != null && msg.length > 0) app.println("\t" + msg);
            }
            $p.addMethod(HWarnings, 'warn', warn$3, false);
            return HWarnings;
        })();
        $p.HWarnings = HWarnings;
        var HFollow = (function() {
            function HFollow() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HBehavior.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $this_1._ease = 0;
                $this_1._spring = 0;
                $this_1._dx = 0;
                $this_1._dy = 0;
                $this_1._goal = null;
                $this_1._follower = null;

                function ease$1(f) {
                    $this_1._ease = f;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'ease', ease$1, false);

                function ease$0_2() {
                    return $this_1._ease;
                }
                $p.addMethod($this_1, 'ease', ease$0_2, false);

                function spring$1(f) {
                    $this_1._spring = f;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'spring', spring$1, false);

                function spring$0_2() {
                    return $this_1._spring;
                }
                $p.addMethod($this_1, 'spring', spring$0_2, false);

                function goal$1(g) {
                    $this_1._goal = g;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'goal', goal$1, false);

                function goal$0_2() {
                    return $this_1._goal;
                }
                $p.addMethod($this_1, 'goal', goal$0_2, false);

                function followMouse$0() {
                    $this_1._goal = H.mouse();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'followMouse', followMouse$0, false);

                function target$1(f) {
                    if (f == null) $this_1.$self.unregister();
                    else $this_1.$self.register();
                    $this_1._follower = f;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'target', target$1, false);

                function target$0_2() {
                    return $this_1._follower;
                }
                $p.addMethod($this_1, 'target', target$0_2, false);

                function runBehavior$1(app) {
                    if ($this_1._follower == null || !H.mouse().started()) return;
                    $this_1._dx = $this_1._dx * $this_1._spring + ($this_1._goal.x() - $this_1._follower.x()) * $this_1._ease;
                    $this_1._dy = $this_1._dy * $this_1._spring + ($this_1._goal.y() - $this_1._follower.y()) * $this_1._ease;
                    $this_1._follower.x($this_1._follower.x() + $this_1._dx);
                    $this_1._follower.y($this_1._follower.y() + $this_1._dy);
                }
                $p.addMethod($this_1, 'runBehavior', runBehavior$1, false);

                function register$0() {
                    return $super.register();
                }
                $p.addMethod($this_1, 'register', register$0, false);

                function unregister$0() {
                    return $super.unregister();
                }
                $p.addMethod($this_1, 'unregister', unregister$0, false);

                function $constr_0() {
                    $constr(1);
                }

                function $constr_1(ease) {
                    $constr(ease, 0);
                }

                function $constr_2(ease, spring) {
                    $constr(ease, spring, H.mouse());
                }

                function $constr_3(ease, spring, goal) {
                    $superCstr();

                    $this_1._ease = ease;
                    $this_1._spring = spring;
                    $this_1._goal = goal;
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else if (arguments.length === 1) {
                        $constr_1.apply($this_1, arguments);
                    } else if (arguments.length === 2) {
                        $constr_2.apply($this_1, arguments);
                    } else if (arguments.length === 3) {
                        $constr_3.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HFollow, HBehavior);
            HFollow.$base = HBehavior;
            return HFollow;
        })();
        $p.HFollow = HFollow;
        var HOscillator = (function() {
            function HOscillator() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HBehavior.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $this_1._target = null;
                $this_1._min1 = 0;
                $this_1._min2 = 0;
                $this_1._min3 = 0;
                $this_1._rel1 = 0;
                $this_1._rel2 = 0;
                $this_1._rel3 = 0;
                $this_1._max1 = 0;
                $this_1._max2 = 0;
                $this_1._max3 = 0;
                $this_1._curr1 = 0;
                $this_1._curr2 = 0;
                $this_1._curr3 = 0;
                $this_1._origw = 0;
                $this_1._origh = 0;
                $this_1._origd = 0;
                $this_1._step = 0;
                $this_1._speed = 0;
                $this_1._freq = 0;
                $this_1._property = 0;
                $this_1._waveform = 0;

                function createCopy$0() {
                    var copy = new HOscillator();
                    copy._min1 = $this_1._min1;
                    copy._min2 = $this_1._min2;
                    copy._min3 = $this_1._min3;
                    copy._max1 = $this_1._max1;
                    copy._max2 = $this_1._max2;
                    copy._max3 = $this_1._max3;
                    copy._rel1 = $this_1._rel1;
                    copy._rel2 = $this_1._rel2;
                    copy._rel3 = $this_1._rel3;
                    copy._origw = $this_1._origw;
                    copy._origh = $this_1._origh;
                    copy._origd = $this_1._origd;
                    copy._step = $this_1._step;
                    copy._speed = $this_1._speed;
                    copy._freq = $this_1._freq;
                    copy._property = $this_1._property;
                    copy._waveform = $this_1._waveform;
                    return copy;
                }
                $p.addMethod($this_1, 'createCopy', createCopy$0, false);

                function target$1(d) {
                    $this_1._target = d;
                    if (d != null) {
                        $this_1._origw = d.width();
                        $this_1._origh = d.height();
                        $this_1._origd = 0;
                    }
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'target', target$1, false);

                function target$1_2(d) {
                    $this_1._target = d;
                    if (d != null) {
                        $this_1._origw = d.width();
                        $this_1._origh = d.height();
                        $this_1._origd = d.depth();
                    }
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'target', target$1_2, false);

                function target$0_3() {
                    return $this_1._target;
                }
                $p.addMethod($this_1, 'target', target$0_3, false);

                function currentStep$1(stepDegrees) {
                    $this_1._step = stepDegrees;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'currentStep', currentStep$1, false);

                function currentStep$0_2() {
                    return $this_1._step;
                }
                $p.addMethod($this_1, 'currentStep', currentStep$0_2, false);

                function speed$1(f) {
                    $this_1._speed = f;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'speed', speed$1, false);

                function speed$0_2() {
                    return $this_1._speed;
                }
                $p.addMethod($this_1, 'speed', speed$0_2, false);

                function range$2(minimum, maximum) {
                    return $this_1.$self.min(minimum).max(maximum);
                }
                $p.addMethod($this_1, 'range', range$2, false);

                function range$4_2(minA, minB, maxA, maxB) {
                    return $this_1.$self.min(minA, minB).max(maxA, maxB);
                }
                $p.addMethod($this_1, 'range', range$4_2, false);

                function range$6_3(minA, minB, minC, maxA, maxB, maxC) {
                    return $this_1.$self.min(minA, minB, minC).max(maxA, maxB, maxC);
                }
                $p.addMethod($this_1, 'range', range$6_3, false);

                function min$1(a) {
                    if ($p.__instanceof($this_1._target, HDrawable3D)) {
                        return $this_1.$self.min(a, a, a);
                    } else {
                        return $this_1.$self.min(a, a, 0);
                    }
                }
                $p.addMethod($this_1, 'min', min$1, false);

                function min$2_2(a, b) {
                    return $this_1.$self.min(a, b, 0);
                }
                $p.addMethod($this_1, 'min', min$2_2, false);

                function min$3_3(a, b, c) {
                    $this_1._min1 = a;
                    $this_1._min2 = b;
                    $this_1._min3 = c;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'min', min$3_3, false);

                function min$0_4() {
                    return $this_1._min1;
                }
                $p.addMethod($this_1, 'min', min$0_4, false);

                function min1$0() {
                    return $this_1._min1;
                }
                $p.addMethod($this_1, 'min1', min1$0, false);

                function min2$0() {
                    return $this_1._min2;
                }
                $p.addMethod($this_1, 'min2', min2$0, false);

                function min3$0() {
                    return $this_1._min3;
                }
                $p.addMethod($this_1, 'min3', min3$0, false);

                function relativeVal$1(a) {
                    return $this_1.$self.relativeVal(a, a);
                }
                $p.addMethod($this_1, 'relativeVal', relativeVal$1, false);

                function relativeVal$2_2(a, b) {
                    return $this_1.$self.relativeVal(a, b, 0);
                }
                $p.addMethod($this_1, 'relativeVal', relativeVal$2_2, false);

                function relativeVal$3_3(a, b, c) {
                    $this_1._rel1 = a;
                    $this_1._rel2 = b;
                    $this_1._rel3 = c;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'relativeVal', relativeVal$3_3, false);

                function relativeVal$0_4() {
                    return $this_1._rel1;
                }
                $p.addMethod($this_1, 'relativeVal', relativeVal$0_4, false);

                function relativeVal1$0() {
                    return $this_1._rel1;
                }
                $p.addMethod($this_1, 'relativeVal1', relativeVal1$0, false);

                function relativeVal2$0() {
                    return $this_1._rel2;
                }
                $p.addMethod($this_1, 'relativeVal2', relativeVal2$0, false);

                function relativeVal3$0() {
                    return $this_1._rel3;
                }
                $p.addMethod($this_1, 'relativeVal3', relativeVal3$0, false);

                function max$1(a) {
                    if ($p.__instanceof($this_1._target, HDrawable3D)) {
                        return $this_1.$self.max(a, a, a);
                    } else {
                        return $this_1.$self.max(a, a, 0);
                    }
                }
                $p.addMethod($this_1, 'max', max$1, false);

                function max$2_2(a, b) {
                    return $this_1.$self.max(a, b, 0);
                }
                $p.addMethod($this_1, 'max', max$2_2, false);

                function max$3_3(a, b, c) {
                    $this_1._max1 = a;
                    $this_1._max2 = b;
                    $this_1._max3 = c;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'max', max$3_3, false);

                function max$0_4() {
                    return $this_1._max1;
                }
                $p.addMethod($this_1, 'max', max$0_4, false);

                function max1$0() {
                    return $this_1._max1;
                }
                $p.addMethod($this_1, 'max1', max1$0, false);

                function max2$0() {
                    return $this_1._max2;
                }
                $p.addMethod($this_1, 'max2', max2$0, false);

                function max3$0() {
                    return $this_1._max3;
                }
                $p.addMethod($this_1, 'max3', max3$0, false);

                function freq$1(f) {
                    $this_1._freq = f;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'freq', freq$1, false);

                function freq$0_2() {
                    return $this_1._freq;
                }
                $p.addMethod($this_1, 'freq', freq$0_2, false);

                function property$1(id) {
                    $this_1._property = id;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'property', property$1, false);

                function property$0_2() {
                    return $this_1._property;
                }
                $p.addMethod($this_1, 'property', property$0_2, false);

                function waveform$1(waveformId) {
                    $this_1._waveform = waveformId;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'waveform', waveform$1, false);

                function waveform$0_2() {
                    return $this_1._waveform;
                }
                $p.addMethod($this_1, 'waveform', waveform$0_2, false);

                function nextRaw$0() {
                    var deg = ($this_1._step * $this_1._freq) % 360;
                    var rawVal = 0;
                    switch ($this_1._waveform) {
                    case HConstants.SINE:
                        rawVal = HMath.sineWave(deg);
                        break;
                    case HConstants.TRIANGLE:
                        rawVal = HMath.triangleWave(deg);
                        break;
                    case HConstants.SAW:
                        rawVal = HMath.sawWave(deg);
                        break;
                    case HConstants.SQUARE:
                        rawVal = HMath.squareWave(deg);
                        break;
                    default:
                        rawVal = 0;
                        break;
                    }
                    $this_1._step += $this_1._speed;
                    $this_1._curr1 = HMath.map(rawVal, -1, 1, $this_1._min1, $this_1._max1) + $this_1._rel1;
                    $this_1._curr2 = HMath.map(rawVal, -1, 1, $this_1._min2, $this_1._max2) + $this_1._rel2;
                    $this_1._curr3 = HMath.map(rawVal, -1, 1, $this_1._min3, $this_1._max3) + $this_1._rel3;
                    return rawVal;
                }
                $p.addMethod($this_1, 'nextRaw', nextRaw$0, false);

                function curr$0() {
                    return $this_1._curr1;
                }
                $p.addMethod($this_1, 'curr', curr$0, false);

                function curr1$0() {
                    return $this_1._curr1;
                }
                $p.addMethod($this_1, 'curr1', curr1$0, false);

                function curr2$0() {
                    return $this_1._curr2;
                }
                $p.addMethod($this_1, 'curr2', curr2$0, false);

                function curr3$0() {
                    return $this_1._curr3;
                }
                $p.addMethod($this_1, 'curr3', curr3$0, false);

                function runBehavior$1(app) {
                    if ($this_1._target == null) return;
                    $this_1.$self.nextRaw();
                    var v1 = $this_1._curr1;
                    var v2 = $this_1._curr2;
                    var v3 = $this_1._curr3;
                    switch ($this_1._property) {
                    case HConstants.WIDTH:
                        $this_1._target.width(v1);
                        break;
                    case HConstants.HEIGHT:
                        $this_1._target.height(v1);
                        break;
                    case HConstants.SCALE:
                        v1 *= $this_1._origw;
                        v2 *= $this_1._origh;
                        v3 *= $this_1._origd;
                    case HConstants.SIZE:
                        $this_1._target.size(new $p.PVector(v1, v2, v3));
                        break;
                    case HConstants.ALPHA:
                        $this_1._target.alpha(Math.round(v1));
                        break;
                    case HConstants.X:
                        $this_1._target.x(v1);
                        break;
                    case HConstants.Y:
                        $this_1._target.y(v1);
                        break;
                    case HConstants.Z:
                        $this_1._target.z(v1);
                        break;
                    case HConstants.LOCATION:
                        $this_1._target.loc(v1, v2, v3);
                        break;
                    case HConstants.ROTATIONX:
                        $this_1._target.rotationX(v1);
                        break;
                    case HConstants.ROTATIONY:
                        $this_1._target.rotationY(v1);
                        break;
                    case HConstants.ROTATIONZ:
                        $this_1._target.rotationZ(v1);
                        break;
                    case HConstants.DROTATIONX:
                        $this_1._target.rotateX(v1);
                        break;
                    case HConstants.DROTATIONY:
                        $this_1._target.rotateY(v1);
                        break;
                    case HConstants.DROTATIONZ:
                        $this_1._target.rotateZ(v1);
                        break;
                    case HConstants.DX:
                        $this_1._target.move(v1, 0);
                        break;
                    case HConstants.DY:
                        $this_1._target.move(0, v1);
                        break;
                    case HConstants.DLOC:
                        $this_1._target.move(v1, v1);
                        break;
                    default:
                        break;
                    }
                }
                $p.addMethod($this_1, 'runBehavior', runBehavior$1, false);

                function register$0() {
                    return $super.register();
                }
                $p.addMethod($this_1, 'register', register$0, false);

                function unregister$0() {
                    return $super.unregister();
                }
                $p.addMethod($this_1, 'unregister', unregister$0, false);

                function $constr_0() {
                    $superCstr();

                    $this_1._speed = $this_1._freq = 1;
                    $this_1._waveform = HConstants.SINE;
                    $this_1._property = HConstants.Y;
                    $this_1.$self.register();
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HOscillator, HBehavior);
            HOscillator.$base = HBehavior;
            return HOscillator;
        })();
        $p.HOscillator = HOscillator;
        var HRandomTrigger = (function() {
            function HRandomTrigger() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HTrigger.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $this_1._chance = 0;

                function chance$1(chancePercentage) {
                    $this_1._chance = chancePercentage;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'chance', chance$1, false);

                function chance$0_2() {
                    return $this_1._chance;
                }
                $p.addMethod($this_1, 'chance', chance$0_2, false);

                function runBehavior$1(app) {
                    if (app.random(1) <= $this_1._chance) $this_1._callback.run(null);
                }
                $p.addMethod($this_1, 'runBehavior', runBehavior$1, false);

                function callback$1(cb) {
                    return $super.callback(cb);
                }
                $p.addMethod($this_1, 'callback', callback$1, false);

                function $constr_0() {
                    $superCstr();

                }

                function $constr_1(percChance) {
                    $superCstr();

                    $this_1._chance = percChance;
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else if (arguments.length === 1) {
                        $constr_1.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HRandomTrigger, HTrigger);
            HRandomTrigger.$base = HTrigger;
            return HRandomTrigger;
        })();
        $p.HRandomTrigger = HRandomTrigger;
        var HRotate = (function() {
            function HRotate() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HBehavior.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $this_1._target = null;
                $this_1._speedRad = 0;

                function target$1(r) {
                    if (r == null) $this_1.$self.unregister();
                    else $this_1.$self.register();
                    $this_1._target = r;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'target', target$1, false);

                function target$0_2() {
                    return $this_1._target;
                }
                $p.addMethod($this_1, 'target', target$0_2, false);

                function speed$1(dDeg) {
                    $this_1._speedRad = dDeg * HConstants.D2R;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'speed', speed$1, false);

                function speed$0_2() {
                    return $this_1._speedRad * HConstants.R2D;
                }
                $p.addMethod($this_1, 'speed', speed$0_2, false);

                function speedRad$1(dRad) {
                    $this_1._speedRad = dRad;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'speedRad', speedRad$1, false);

                function speedRad$0_2() {
                    return $this_1._speedRad;
                }
                $p.addMethod($this_1, 'speedRad', speedRad$0_2, false);

                function runBehavior$1(app) {
                    var rot = $this_1._target.rotationRad() + $this_1._speedRad;
                    $this_1._target.rotationRad(rot);
                }
                $p.addMethod($this_1, 'runBehavior', runBehavior$1, false);

                function register$0() {
                    return $super.register();
                }
                $p.addMethod($this_1, 'register', register$0, false);

                function unregister$0() {
                    return $super.unregister();
                }
                $p.addMethod($this_1, 'unregister', unregister$0, false);

                function $constr_0() {
                    $superCstr();

                }

                function $constr_2(newTarget, dDeg) {
                    $superCstr();

                    $this_1.$self.target(newTarget);
                    $this_1._speedRad = dDeg * HConstants.D2R;
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else if (arguments.length === 2) {
                        $constr_2.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HRotate, HBehavior);
            HRotate.$base = HBehavior;
            return HRotate;
        })();
        $p.HRotate = HRotate;
        var HSwarm = (function() {
            function HSwarm() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HBehavior.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $this_1._goals = null;
                $this_1._targets = null;
                $this_1._speed = 0;
                $this_1._turnEase = 0;
                $this_1._twitchRad = 0;
                $this_1._idleGoalX = 0;
                $this_1._idleGoalY = 0;

                function addTarget$1(t) {
                    if ($this_1._targets.size() <= 0) $this_1.$self.register();
                    $this_1._targets.add(t);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'addTarget', addTarget$1, false);

                function removeTarget$1(t) {
                    $this_1._targets.remove(t);
                    if ($this_1._targets.size() <= 0) $this_1.$self.unregister();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'removeTarget', removeTarget$1, false);

                function targets$0() {
                    return $this_1._targets;
                }
                $p.addMethod($this_1, 'targets', targets$0, false);

                function addGoal$1(g) {
                    $this_1._goals.add(g);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'addGoal', addGoal$1, false);

                function addGoal$2_2(x, y) {
                    return $this_1.$self.addGoal(new HVector(x, y));
                }
                $p.addMethod($this_1, 'addGoal', addGoal$2_2, false);

                function addGoal$3_3(x, y, z) {
                    return $this_1.$self.addGoal(new HVector(x, y, z));
                }
                $p.addMethod($this_1, 'addGoal', addGoal$3_3, false);

                function removeGoal$1(g) {
                    $this_1._goals.remove(g);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'removeGoal', removeGoal$1, false);

                function goals$0() {
                    return $this_1._goals;
                }
                $p.addMethod($this_1, 'goals', goals$0, false);

                function idleGoal$2(x, y) {
                    $this_1._idleGoalX = x;
                    $this_1._idleGoalY = y;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'idleGoal', idleGoal$2, false);

                function idleGoalX$0() {
                    return $this_1._idleGoalX;
                }
                $p.addMethod($this_1, 'idleGoalX', idleGoalX$0, false);

                function idleGoalY$0() {
                    return $this_1._idleGoalY;
                }
                $p.addMethod($this_1, 'idleGoalY', idleGoalY$0, false);

                function speed$1(s) {
                    $this_1._speed = s;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'speed', speed$1, false);

                function speed$0_2() {
                    return $this_1._speed;
                }
                $p.addMethod($this_1, 'speed', speed$0_2, false);

                function turnEase$1(e) {
                    $this_1._turnEase = e;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'turnEase', turnEase$1, false);

                function turnEase$0_2() {
                    return $this_1._turnEase;
                }
                $p.addMethod($this_1, 'turnEase', turnEase$0_2, false);

                function twitch$1(deg) {
                    $this_1._twitchRad = deg * HConstants.D2R;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'twitch', twitch$1, false);

                function twitchRad$1(rad) {
                    $this_1._twitchRad = rad;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'twitchRad', twitchRad$1, false);

                function twitch$0_2() {
                    return $this_1._twitchRad * HConstants.R2D;
                }
                $p.addMethod($this_1, 'twitch', twitch$0_2, false);

                function twitchRad$0_2() {
                    return $this_1._twitchRad;
                }
                $p.addMethod($this_1, 'twitchRad', twitchRad$0_2, false);

                function getGoal$2(target, app) {
                    var goal = null;
                    var nearestDist = -1;
                    for (var $it1 = new $p.ObjectIterator($this_1._goals), h = void(0); $it1.hasNext() && ((h = $it1.next()) || true);) {
                        var dist = HMath.dist(target.x(), target.y(), h.x(), h.y());
                        if (nearestDist < 0 || dist < nearestDist) {
                            nearestDist = dist;
                            goal = h;
                        }
                    }
                    return goal;
                }
                $p.addMethod($this_1, 'getGoal', getGoal$2, false);

                function runBehavior$1(app) {
                    var numTargets = $this_1._targets.size();
                    var it = $this_1._targets.iterator();
                    for (var i = 0; i < numTargets; ++i) {
                        var target = it.next();
                        var rot = target.rotationRad();
                        var tx = target.x();
                        var ty = target.y();
                        var goalx = $this_1._idleGoalX;
                        var goaly = $this_1._idleGoalY;
                        var goalz = 0;
                        var goal = $this_1.$self.getGoal(target, app);
                        if (goal != null) {
                            goalx = goal.x();
                            goaly = goal.y();
                            goalz = goal.z();
                        }
                        var tmp = HMath.xAxisAngle(tx, ty, goalx, goaly) - rot;
                        var dRot = $this_1._turnEase * Math.atan2(Math.sin(tmp), Math.cos(tmp));
                        rot += dRot;
                        var noise = app.noise(i * numTargets + app.frameCount / 8);
                        rot += HMath.map(noise, 0, 1, -$this_1._twitchRad, $this_1._twitchRad);
                        target.rotationRad(rot);
                        target.x(target.x() + Math.cos(rot) * $this_1._speed);
                        target.y(target.y() + Math.sin(rot) * $this_1._speed);
                        target.z(goalz);
                    }
                }
                $p.addMethod($this_1, 'runBehavior', runBehavior$1, false);

                function register$0() {
                    return $super.register();
                }
                $p.addMethod($this_1, 'register', register$0, false);

                function unregister$0() {
                    return $super.unregister();
                }
                $p.addMethod($this_1, 'unregister', unregister$0, false);

                function $constr_0() {
                    $superCstr();

                    $this_1._speed = 1;
                    $this_1._turnEase = 1;
                    $this_1._twitchRad = 0;
                    $this_1._goals = new HLinkedHashSet();
                    $this_1._targets = new HLinkedHashSet();
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HSwarm, HBehavior);
            HSwarm.$base = HBehavior;
            return HSwarm;
        })();
        $p.HSwarm = HSwarm;
        var HTimer = (function() {
            function HTimer() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HTrigger.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $this_1._lastInterval = 0;
                $this_1._interval = 0;
                $this_1._cycleCounter = 0;
                $this_1._numCycles = 0;
                $this_1._usesFrames = false;

                function interval$1(i) {
                    $this_1._interval = i;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'interval', interval$1, false);

                function interval$0_2() {
                    return $this_1._interval;
                }
                $p.addMethod($this_1, 'interval', interval$0_2, false);

                function cycleCounter$1(cycleIndex) {
                    $this_1._cycleCounter = cycleIndex;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'cycleCounter', cycleCounter$1, false);

                function cycleCounter$0_2() {
                    return $this_1._cycleCounter;
                }
                $p.addMethod($this_1, 'cycleCounter', cycleCounter$0_2, false);

                function numCycles$1(cycles) {
                    $this_1._numCycles = cycles;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'numCycles', numCycles$1, false);

                function numCycles$0_2() {
                    return $this_1._numCycles;
                }
                $p.addMethod($this_1, 'numCycles', numCycles$0_2, false);

                function cycleIndefinitely$0() {
                    $this_1._numCycles = 0;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'cycleIndefinitely', cycleIndefinitely$0, false);

                function useMillis$0() {
                    $this_1._usesFrames = false;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'useMillis', useMillis$0, false);

                function usesMillis$0() {
                    return !$this_1._usesFrames;
                }
                $p.addMethod($this_1, 'usesMillis', usesMillis$0, false);

                function useFrames$0() {
                    $this_1._usesFrames = true;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'useFrames', useFrames$0, false);

                function usesFrames$0() {
                    return $this_1._usesFrames;
                }
                $p.addMethod($this_1, 'usesFrames', usesFrames$0, false);

                function runBehavior$1(app) {
                    var curr = ($this_1._usesFrames) ? app.frameCount : app.millis();
                    if ($this_1._lastInterval < 0) $this_1._lastInterval = curr;
                    if (curr - $this_1._lastInterval >= $this_1._interval) {
                        $this_1._lastInterval = curr;
                        $this_1._callback.run($this_1._cycleCounter);
                        if ($this_1._numCycles > 0 && ++$this_1._cycleCounter >= $this_1._numCycles) $this_1.$self.unregister();
                    }
                }
                $p.addMethod($this_1, 'runBehavior', runBehavior$1, false);

                function callback$1(cb) {
                    return $super.callback(cb);
                }
                $p.addMethod($this_1, 'callback', callback$1, false);

                function register$0() {
                    return $super.register();
                }
                $p.addMethod($this_1, 'register', register$0, false);

                function unregister$0() {
                    $this_1._numCycles = 0;
                    $this_1._lastInterval = -1;
                    return $super.unregister();
                }
                $p.addMethod($this_1, 'unregister', unregister$0, false);

                function $constr_0() {
                    $superCstr();

                    $this_1._interval = 1000;
                    $this_1._lastInterval = -1;
                }

                function $constr_1(timerInterval) {
                    $superCstr();

                    $this_1._interval = timerInterval;
                }

                function $constr_2(timerInterval, numberOfCycles) {
                    $superCstr();

                    $this_1._interval = timerInterval;
                    $this_1._numCycles = numberOfCycles;
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else if (arguments.length === 1) {
                        $constr_1.apply($this_1, arguments);
                    } else if (arguments.length === 2) {
                        $constr_2.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HTimer, HTrigger);
            HTimer.$base = HTrigger;
            return HTimer;
        })();
        $p.HTimer = HTimer;
        var HTween = (function() {
            function HTween() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HBehavior.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $this_1._target = null;
                $this_1._callback = null;
                $this_1._s1 = 0;
                $this_1._s2 = 0;
                $this_1._s3 = 0;
                $this_1._e1 = 0;
                $this_1._e2 = 0;
                $this_1._e3 = 0;
                $this_1._curr1 = 0;
                $this_1._curr2 = 0;
                $this_1._curr3 = 0;
                $this_1._origw = 0;
                $this_1._origh = 0;
                $this_1._raw = 0;
                $this_1._dRaw = 0;
                $this_1._spring = 0;
                $this_1._ease = 0;
                $this_1._property = 0;

                function target$1(d) {
                    $this_1._target = d;
                    if (d != null) {
                        $this_1._origw = d.width();
                        $this_1._origh = d.height();
                    }
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'target', target$1, false);

                function target$0_2() {
                    return $this_1._target;
                }
                $p.addMethod($this_1, 'target', target$0_2, false);

                function callback$1(c) {
                    $this_1._callback = (c == null) ? HConstants.NOP : c;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'callback', callback$1, false);

                function callback$0_2() {
                    return $this_1._callback;
                }
                $p.addMethod($this_1, 'callback', callback$0_2, false);

                function start$1(a) {
                    return $this_1.$self.start(a, a);
                }
                $p.addMethod($this_1, 'start', start$1, false);

                function start$2_2(a, b) {
                    return $this_1.$self.start(a, b, 0);
                }
                $p.addMethod($this_1, 'start', start$2_2, false);

                function start$3_3(a, b, c) {
                    $this_1._s1 = a;
                    $this_1._s2 = b;
                    $this_1._s3 = c;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'start', start$3_3, false);

                function start$0_4() {
                    return $this_1._s1;
                }
                $p.addMethod($this_1, 'start', start$0_4, false);

                function start1$0() {
                    return $this_1._s1;
                }
                $p.addMethod($this_1, 'start1', start1$0, false);

                function start2$0() {
                    return $this_1._s2;
                }
                $p.addMethod($this_1, 'start2', start2$0, false);

                function start3$0() {
                    return $this_1._s3;
                }
                $p.addMethod($this_1, 'start3', start3$0, false);

                function end$1(a) {
                    return $this_1.$self.end(a, a);
                }
                $p.addMethod($this_1, 'end', end$1, false);

                function end$2_2(a, b) {
                    return $this_1.$self.end(a, b, 0);
                }
                $p.addMethod($this_1, 'end', end$2_2, false);

                function end$3_3(a, b, c) {
                    $this_1._e1 = a;
                    $this_1._e2 = b;
                    $this_1._e3 = c;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'end', end$3_3, false);

                function end$0_4() {
                    return $this_1._e1;
                }
                $p.addMethod($this_1, 'end', end$0_4, false);

                function end1$0() {
                    return $this_1._e1;
                }
                $p.addMethod($this_1, 'end1', end1$0, false);

                function end2$0() {
                    return $this_1._e2;
                }
                $p.addMethod($this_1, 'end2', end2$0, false);

                function end3$0() {
                    return $this_1._e3;
                }
                $p.addMethod($this_1, 'end3', end3$0, false);

                function spring$1(f) {
                    $this_1._spring = f;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'spring', spring$1, false);

                function spring$0_2() {
                    return $this_1._spring;
                }
                $p.addMethod($this_1, 'spring', spring$0_2, false);

                function ease$1(f) {
                    $this_1._ease = f;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'ease', ease$1, false);

                function ease$0_2() {
                    return $this_1._ease;
                }
                $p.addMethod($this_1, 'ease', ease$0_2, false);

                function property$1(id) {
                    $this_1._property = id;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'property', property$1, false);

                function property$0_2() {
                    return $this_1._property;
                }
                $p.addMethod($this_1, 'property', property$0_2, false);

                function nextRaw$0() {
                    $this_1._raw += ($this_1._dRaw) = ($this_1._dRaw * $this_1._spring + (1 - $this_1._raw) * $this_1._ease);
                    var c = HMath.round512($this_1._raw);
                    $this_1._curr1 = HMath.map(c, 0, 1, $this_1._s1, $this_1._e1);
                    $this_1._curr2 = HMath.map(c, 0, 1, $this_1._s2, $this_1._e2);
                    $this_1._curr3 = HMath.map(c, 0, 1, $this_1._s3, $this_1._e3);
                    return c;
                }
                $p.addMethod($this_1, 'nextRaw', nextRaw$0, false);

                function curr$0() {
                    return $this_1._curr1;
                }
                $p.addMethod($this_1, 'curr', curr$0, false);

                function curr1$0() {
                    return $this_1._curr1;
                }
                $p.addMethod($this_1, 'curr1', curr1$0, false);

                function curr2$0() {
                    return $this_1._curr2;
                }
                $p.addMethod($this_1, 'curr2', curr2$0, false);

                function curr3$0() {
                    return $this_1._curr3;
                }
                $p.addMethod($this_1, 'curr3', curr3$0, false);

                function runBehavior$1(app) {
                    if ($this_1._target == null) return;
                    var c = $this_1.$self.nextRaw();
                    var v1 = $this_1._curr1;
                    var v2 = $this_1._curr2;
                    var v3 = $this_1._curr3;
                    switch ($this_1._property) {
                    case HConstants.WIDTH:
                        $this_1._target.width(v1);
                        break;
                    case HConstants.HEIGHT:
                        $this_1._target.height(v1);
                        break;
                    case HConstants.SCALE:
                        v1 *= $this_1._origw;
                        v2 *= $this_1._origh;
                    case HConstants.SIZE:
                        $this_1._target.size(v1, v2);
                        break;
                    case HConstants.ALPHA:
                        $this_1._target.alpha(Math.round(v1));
                        break;
                    case HConstants.X:
                        $this_1._target.x(v1);
                        break;
                    case HConstants.Y:
                        $this_1._target.y(v1);
                        break;
                    case HConstants.Z:
                        $this_1._target.z(v1);
                        break;
                    case HConstants.LOCATION:
                        $this_1._target.loc(v1, v2, v3);
                        break;
                    case HConstants.ROTATIONX:
                        $this_1._target.rotationX(v1);
                        break;
                    case HConstants.ROTATIONY:
                        $this_1._target.rotationY(v1);
                        break;
                    case HConstants.ROTATIONZ:
                        $this_1._target.rotationZ(v1);
                        break;
                    case HConstants.DROTATIONX:
                        $this_1._target.rotateX(v1);
                        break;
                    case HConstants.DROTATIONY:
                        $this_1._target.rotateY(v1);
                        break;
                    case HConstants.DROTATIONZ:
                        $this_1._target.rotateZ(v1);
                        break;
                    case HConstants.DX:
                        $this_1._target.move(v1, 0);
                        break;
                    case HConstants.DY:
                        $this_1._target.move(0, v1);
                        break;
                    case HConstants.DLOC:
                        $this_1._target.move(v1, v1);
                        break;
                    default:
                        break;
                    }
                    if (c == 1 && HMath.round512($this_1._dRaw) == 0) {
                        $this_1.$self.unregister();
                        $this_1._callback.run($this_1.$self);
                    }
                }
                $p.addMethod($this_1, 'runBehavior', runBehavior$1, false);

                function register$0() {
                    return $super.register();
                }
                $p.addMethod($this_1, 'register', register$0, false);

                function unregister$0() {
                    $this_1._raw = $this_1._dRaw = 0;
                    return $super.unregister();
                }
                $p.addMethod($this_1, 'unregister', unregister$0, false);

                function $constr_0() {
                    $superCstr();

                    $this_1._ease = 1;
                    $this_1._callback = HConstants.NOP;
                    $this_1.$self.register();
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HTween, HBehavior);
            HTween.$base = HBehavior;
            return HTween;
        })();
        $p.HTween = HTween;
        var HVelocity = (function() {
            function HVelocity() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HBehavior.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $this_1._velocityX = 0;
                $this_1._velocityY = 0;
                $this_1._accelX = 0;
                $this_1._accelY = 0;
                $this_1._target = null;

                function target$1(t) {
                    if (t == null) $this_1.$self.unregister();
                    else $this_1.$self.register();
                    $this_1._target = t;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'target', target$1, false);

                function target$0_2() {
                    return $this_1._target;
                }
                $p.addMethod($this_1, 'target', target$0_2, false);

                function velocity$2(velocity, deg) {
                    return $this_1.$self.velocityRad(velocity, deg * HConstants.D2R);
                }
                $p.addMethod($this_1, 'velocity', velocity$2, false);

                function velocityRad$2(velocity, rad) {
                    $this_1._velocityX = velocity * Math.cos(rad);
                    $this_1._velocityY = velocity * Math.sin(rad);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'velocityRad', velocityRad$2, false);

                function velocityX$1(dx) {
                    $this_1._velocityX = dx;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'velocityX', velocityX$1, false);

                function velocityX$0_2() {
                    return $this_1._velocityX;
                }
                $p.addMethod($this_1, 'velocityX', velocityX$0_2, false);

                function velocityY$1(dy) {
                    $this_1._velocityY = dy;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'velocityY', velocityY$1, false);

                function velocityY$0_2() {
                    return $this_1._velocityY;
                }
                $p.addMethod($this_1, 'velocityY', velocityY$0_2, false);

                function launchTo$3(goalX, goalY, numFrames) {
                    if ($this_1._target == null) {
                        HWarnings.warn("Null Target", "HVelocity.launchTo()", HWarnings.NULL_TARGET);
                    } else {
                        var nfsq = numFrames * numFrames;
                        $this_1._velocityX = (goalX - $this_1._target.x() - $this_1._accelX * nfsq / 2) / numFrames;
                        $this_1._velocityY = (goalY - $this_1._target.y() - $this_1._accelY * nfsq / 2) / numFrames;
                    }
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'launchTo', launchTo$3, false);

                function accel$2(acceleration, deg) {
                    return $this_1.$self.accelRad(acceleration, deg * HConstants.D2R);
                }
                $p.addMethod($this_1, 'accel', accel$2, false);

                function accelRad$2(acceleration, rad) {
                    $this_1._accelX = acceleration * Math.cos(rad);
                    $this_1._accelY = acceleration * Math.sin(rad);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'accelRad', accelRad$2, false);

                function accelX$1(ddx) {
                    $this_1._accelX = ddx;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'accelX', accelX$1, false);

                function accelX$0_2() {
                    return $this_1._accelX;
                }
                $p.addMethod($this_1, 'accelX', accelX$0_2, false);

                function accelY$1(ddy) {
                    $this_1._accelY = ddy;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'accelY', accelY$1, false);

                function accelY$0_2() {
                    return $this_1._accelY;
                }
                $p.addMethod($this_1, 'accelY', accelY$0_2, false);

                function runBehavior$1(app) {
                    $this_1._target.x($this_1._target.x() + $this_1._velocityX);
                    $this_1._target.y($this_1._target.y() + $this_1._velocityY);
                    $this_1._velocityX += $this_1._accelX;
                    $this_1._velocityY += $this_1._accelY;
                }
                $p.addMethod($this_1, 'runBehavior', runBehavior$1, false);

                function register$0() {
                    return $super.register();
                }
                $p.addMethod($this_1, 'register', register$0, false);

                function unregister$0() {
                    return $super.unregister();
                }
                $p.addMethod($this_1, 'unregister', unregister$0, false);

                function $constr() {
                    $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HVelocity, HBehavior);
            HVelocity.$base = HBehavior;
            return HVelocity;
        })();
        $p.HVelocity = HVelocity;
        var HColorPool = (function() {
            function HColorPool() {
                var $this_1 = this;

                function $superCstr() {
                    $p.extendClassChain($this_1)
                }
                $this_1._colorList = null;
                $this_1._fillFlag = false;
                $this_1._strokeFlag = false;

                function createCopy$0() {
                    var copy = new HColorPool();
                    copy._fillFlag = $this_1._fillFlag;
                    copy._strokeFlag = $this_1._strokeFlag;
                    for (var i = 0; i < $this_1._colorList.size(); ++i) {
                        var clr = $this_1._colorList.get(i);
                        copy._colorList.add(clr);
                    }
                    return copy;
                }
                $p.addMethod($this_1, 'createCopy', createCopy$0, false);

                function size$0() {
                    return $this_1._colorList.size();
                }
                $p.addMethod($this_1, 'size', size$0, false);

                function add$1(clr) {
                    $this_1._colorList.add(clr);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'add', add$1, false);

                function add$2_2(clr, freq) {
                    while (freq-->0) $this_1._colorList.add(clr);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'add', add$2_2, false);

                function getColor$0() {
                    if ($this_1._colorList.size() <= 0) return 0;
                    var index = $p.__int_cast(Math.floor(H.app().random($this_1._colorList.size())));
                    return $this_1._colorList.get(index);
                }
                $p.addMethod($this_1, 'getColor', getColor$0, false);

                function getColor$1_2(seed) {
                    HMath.tempSeed(seed);
                    var clr = $this_1.$self.getColor();
                    HMath.removeTempSeed();
                    return clr;
                }
                $p.addMethod($this_1, 'getColor', getColor$1_2, false);

                function fillOnly$0() {
                    $this_1._fillFlag = true;
                    $this_1._strokeFlag = false;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'fillOnly', fillOnly$0, false);

                function strokeOnly$0() {
                    $this_1._fillFlag = false;
                    $this_1._strokeFlag = true;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'strokeOnly', strokeOnly$0, false);

                function fillAndStroke$0() {
                    $this_1._fillFlag = $this_1._strokeFlag = true;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'fillAndStroke', fillAndStroke$0, false);

                function appliesFill$0() {
                    return $this_1._fillFlag;
                }
                $p.addMethod($this_1, 'appliesFill', appliesFill$0, false);

                function appliesStroke$0() {
                    return $this_1._strokeFlag;
                }
                $p.addMethod($this_1, 'appliesStroke', appliesStroke$0, false);

                function applyColor$1(drawable) {
                    if ($this_1._fillFlag) drawable.fill($this_1.$self.getColor());
                    if ($this_1._strokeFlag) drawable.stroke($this_1.$self.getColor());
                    return drawable;
                }
                $p.addMethod($this_1, 'applyColor', applyColor$1, false);

                function $constr_0() {
                    $superCstr();

                    var colors = Array.prototype.slice.call(arguments, 0);

                    $this_1._colorList = new $p.ArrayList();
                    for (var i = 0; i < colors.length; ++i) $this_1.$self.add(colors[i]);
                    $this_1.$self.fillAndStroke();
                }

                function $constr() {
                    if (arguments.length >= 0) {
                        $constr_0.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendInterfaceMembers(HColorPool, HColorist);
            HColorPool.$interfaces = [HColorist];
            return HColorPool;
        })();
        $p.HColorPool = HColorPool;
        var HColorTransform = (function() {
            function HColorTransform() {
                var $this_1 = this;

                function $superCstr() {
                    $p.extendClassChain($this_1)
                }
                $this_1._percA = 0;
                $this_1._percR = 0;
                $this_1._percG = 0;
                $this_1._percB = 0;
                $this_1._offsetA = 0;
                $this_1._offsetR = 0;
                $this_1._offsetG = 0;
                $this_1._offsetB = 0;
                $this_1.fillFlag = false;
                $this_1.strokeFlag = false;

                function offset$1(off) {
                    $this_1._offsetA = $this_1._offsetR = $this_1._offsetG = $this_1._offsetB = off;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'offset', offset$1, false);

                function offset$4_2(r, g, b, a) {
                    $this_1._offsetA = a;
                    $this_1._offsetR = r;
                    $this_1._offsetG = g;
                    $this_1._offsetB = b;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'offset', offset$4_2, false);

                function offsetA$1(a) {
                    $this_1._offsetA = a;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'offsetA', offsetA$1, false);

                function offsetA$0_2() {
                    return $this_1._offsetA;
                }
                $p.addMethod($this_1, 'offsetA', offsetA$0_2, false);

                function offsetR$1(r) {
                    $this_1._offsetR = r;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'offsetR', offsetR$1, false);

                function offsetR$0_2() {
                    return $this_1._offsetR;
                }
                $p.addMethod($this_1, 'offsetR', offsetR$0_2, false);

                function offsetG$1(g) {
                    $this_1._offsetG = g;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'offsetG', offsetG$1, false);

                function offsetG$0_2() {
                    return $this_1._offsetG;
                }
                $p.addMethod($this_1, 'offsetG', offsetG$0_2, false);

                function offsetB$1(b) {
                    $this_1._offsetB = b;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'offsetB', offsetB$1, false);

                function offsetB$0_2() {
                    return $this_1._offsetB;
                }
                $p.addMethod($this_1, 'offsetB', offsetB$0_2, false);

                function perc$1(percentage) {
                    $this_1._percA = $this_1._percR = $this_1._percG = $this_1._percB = percentage;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'perc', perc$1, false);

                function perc$4_2(r, g, b, a) {
                    $this_1._percA = a;
                    $this_1._percR = r;
                    $this_1._percG = g;
                    $this_1._percB = b;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'perc', perc$4_2, false);

                function percA$1(a) {
                    $this_1._percA = a;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'percA', percA$1, false);

                function percA$0_2() {
                    return $this_1._percA;
                }
                $p.addMethod($this_1, 'percA', percA$0_2, false);

                function percR$1(r) {
                    $this_1._percR = r;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'percR', percR$1, false);

                function percR$0_2() {
                    return $this_1._percR;
                }
                $p.addMethod($this_1, 'percR', percR$0_2, false);

                function percG$1(g) {
                    $this_1._percG = g;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'percG', percG$1, false);

                function percG$0_2() {
                    return $this_1._percG;
                }
                $p.addMethod($this_1, 'percG', percG$0_2, false);

                function percB$1(b) {
                    $this_1._percB = b;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'percB', percB$1, false);

                function percB$0_2() {
                    return $this_1._percB;
                }
                $p.addMethod($this_1, 'percB', percB$0_2, false);

                function mergeWith$1(other) {
                    if (other != null) {
                        $this_1._percA *= other._percA;
                        $this_1._percR *= other._percR;
                        $this_1._percG *= other._percG;
                        $this_1._percB *= other._percB;
                        $this_1._offsetA += other._offsetA;
                        $this_1._offsetR += other._offsetR;
                        $this_1._offsetG += other._offsetG;
                        $this_1._offsetB += other._offsetB;
                    }
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'mergeWith', mergeWith$1, false);

                function createCopy$0() {
                    var copy = new HColorTransform();
                    copy._percA = $this_1._percA;
                    copy._percR = $this_1._percR;
                    copy._percG = $this_1._percG;
                    copy._percB = $this_1._percB;
                    copy._offsetA = $this_1._offsetA;
                    copy._offsetR = $this_1._offsetR;
                    copy._offsetG = $this_1._offsetG;
                    copy._offsetB = $this_1._offsetB;
                    return copy;
                }
                $p.addMethod($this_1, 'createCopy', createCopy$0, false);

                function createNew$1(other) {
                    return $this_1.$self.createCopy().mergeWith(other);
                }
                $p.addMethod($this_1, 'createNew', createNew$1, false);

                function getColor$1(origColor) {
                    var clrs = HColors.explode(origColor);
                    clrs[0] = Math.round(clrs[0] * $this_1._percA) + $this_1._offsetA;
                    clrs[1] = Math.round(clrs[1] * $this_1._percR) + $this_1._offsetR;
                    clrs[2] = Math.round(clrs[2] * $this_1._percG) + $this_1._offsetG;
                    clrs[3] = Math.round(clrs[3] * $this_1._percB) + $this_1._offsetB;
                    return HColors.merge(clrs[0], clrs[1], clrs[2], clrs[3]);
                }
                $p.addMethod($this_1, 'getColor', getColor$1, false);

                function fillOnly$0() {
                    $this_1.fillFlag = true;
                    $this_1.strokeFlag = false;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'fillOnly', fillOnly$0, false);

                function strokeOnly$0() {
                    $this_1.fillFlag = false;
                    $this_1.strokeFlag = true;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'strokeOnly', strokeOnly$0, false);

                function fillAndStroke$0() {
                    $this_1.fillFlag = $this_1.strokeFlag = true;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'fillAndStroke', fillAndStroke$0, false);

                function appliesFill$0() {
                    return $this_1.fillFlag;
                }
                $p.addMethod($this_1, 'appliesFill', appliesFill$0, false);

                function appliesStroke$0() {
                    return $this_1.strokeFlag;
                }
                $p.addMethod($this_1, 'appliesStroke', appliesStroke$0, false);

                function applyColor$1(drawable) {
                    if ($this_1.fillFlag) {
                        var fill = drawable.fill();
                        drawable.fill($this_1.$self.getColor(fill));
                    }
                    if ($this_1.strokeFlag) {
                        var stroke = drawable.stroke();
                        drawable.stroke($this_1.$self.getColor(stroke));
                    }
                    return drawable;
                }
                $p.addMethod($this_1, 'applyColor', applyColor$1, false);

                function $constr_0() {
                    $superCstr();

                    $this_1._percA = $this_1._percR = $this_1._percG = $this_1._percB = 1;
                    $this_1.$self.fillAndStroke();
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendInterfaceMembers(HColorTransform, HColorist);
            HColorTransform.$interfaces = [HColorist];
            return HColorTransform;
        })();
        $p.HColorTransform = HColorTransform;
        var HPixelColorist = (function() {
            function HPixelColorist() {
                var $this_1 = this;

                function $superCstr() {
                    $p.extendClassChain($this_1)
                }
                $this_1.img = null;
                $this_1.fillFlag = false;
                $this_1.strokeFlag = false;

                function image$1(imgArg) {
                    $this_1.img = H.getImage(imgArg);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'image', image$1, false);

                function image$0_2() {
                    return $this_1.img;
                }
                $p.addMethod($this_1, 'image', image$0_2, false);

                function setImage$1(imgArg) {
                    if ($p.__instanceof(imgArg, $p.PImage)) {
                        $this_1.img = imgArg;
                    } else if ($p.__instanceof(imgArg, HImage)) {
                        $this_1.img = (imgArg).image();
                    } else if ($p.__instanceof(imgArg, String)) {
                        $this_1.img = H.app().loadImage(imgArg);
                    } else if (imgArg == null) {
                        $this_1.img = null;
                    }
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'setImage', setImage$1, false);

                function getImage$0() {
                    return $this_1.img;
                }
                $p.addMethod($this_1, 'getImage', getImage$0, false);

                function getColor$2(x, y) {
                    return ($this_1.img == null) ? 0 : $this_1.img.get(Math.round(x), Math.round(y));
                }
                $p.addMethod($this_1, 'getColor', getColor$2, false);

                function fillOnly$0() {
                    $this_1.fillFlag = true;
                    $this_1.strokeFlag = false;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'fillOnly', fillOnly$0, false);

                function strokeOnly$0() {
                    $this_1.fillFlag = false;
                    $this_1.strokeFlag = true;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'strokeOnly', strokeOnly$0, false);

                function fillAndStroke$0() {
                    $this_1.fillFlag = $this_1.strokeFlag = true;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'fillAndStroke', fillAndStroke$0, false);

                function appliesFill$0() {
                    return $this_1.fillFlag;
                }
                $p.addMethod($this_1, 'appliesFill', appliesFill$0, false);

                function appliesStroke$0() {
                    return $this_1.strokeFlag;
                }
                $p.addMethod($this_1, 'appliesStroke', appliesStroke$0, false);

                function applyColor$1(drawable) {
                    var clr = $this_1.$self.getColor(drawable.x(), drawable.y());
                    if ($this_1.fillFlag) drawable.fill(clr);
                    if ($this_1.strokeFlag) drawable.stroke(clr);
                    return drawable;
                }
                $p.addMethod($this_1, 'applyColor', applyColor$1, false);

                function $constr_0() {
                    $superCstr();

                    $this_1.$self.fillAndStroke();
                }

                function $constr_1(imgArg) {
                    $constr();
                    $this_1.$self.image(imgArg);
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else if (arguments.length === 1) {
                        $constr_1.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendInterfaceMembers(HPixelColorist, HColorist);
            $p.extendInterfaceMembers(HPixelColorist, HImageHolder);
            HPixelColorist.$interfaces = [HColorist, HImageHolder];
            return HPixelColorist;
        })();
        $p.HPixelColorist = HPixelColorist;
        var HBox = (function() {
            function HBox() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HDrawable3D.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }

                function createCopy$0() {
                    var copy = new HBox();
                    copy.copyPropertiesFrom($this_1.$self);
                    copy._depth = $this_1._depth;
                    copy._anchorW = $this_1._anchorW;
                    return copy;
                }
                $p.addMethod($this_1, 'createCopy', createCopy$0, false);

                function draw$5(g, usesZ, drawX, drawY, currAlphaPc) {
                    $this_1.$self.applyStyle(g, currAlphaPc);
                    g.pushMatrix();
                    g.translate(drawX, drawY, -$this_1.$self.anchorZ());
                    g.box($this_1._width, $this_1._height, $this_1._depth);
                    g.popMatrix();
                }
                $p.addMethod($this_1, 'draw', draw$5, false);

                function $constr() {
                    $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HBox, HDrawable3D);
            HBox.$base = HDrawable3D;
            return HBox;
        })();
        $p.HBox = HBox;
        var HCanvas = (function() {
            function HCanvas() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HDrawable.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $this_1._graphics = null;
                $this_1._renderer = null;
                $this_1._filterParam = 0;
                $this_1._filterKind = 0;
                $this_1._blendMode = 0;
                $this_1._fadeAmt = 0;
                $this_1._autoClear = false;
                $this_1._hasFade = false;
                $this_1._hasFilter = false;
                $this_1._hasFilterParam = false;
                $this_1._hasBlend = false;

                function createCopy$0() {
                    var copy = new HCanvas($this_1._width, $this_1._height, $this_1._renderer);
                    copy.autoClear($this_1._autoClear).hasFade($this_1._hasFade);
                    if ($this_1._hasFilter) copy.filter($this_1._filterKind, $this_1._filterParam);
                    if ($this_1._hasBlend) copy.blend($this_1._blendMode);
                    copy.copyPropertiesFrom($this_1.$self);
                    return copy;
                }
                $p.addMethod($this_1, 'createCopy', createCopy$0, false);

                function updateBuffer$0() {
                    var w = Math.round($this_1._width);
                    var h = Math.round($this_1._height);
                    $this_1._graphics = H.app().createGraphics(w, h, $this_1._renderer);
                    $this_1._graphics.loadPixels();
                    $this_1._graphics.beginDraw();
                    $this_1._graphics.background(H.CLEAR);
                    $this_1._graphics.endDraw();
                    $this_1._width = w;
                    $this_1._height = h;
                }
                $p.addMethod($this_1, 'updateBuffer', updateBuffer$0, false);

                function renderer$1(s) {
                    $this_1._renderer = s;
                    $this_1.$self.updateBuffer();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'renderer', renderer$1, false);

                function renderer$0_2() {
                    return $this_1._renderer;
                }
                $p.addMethod($this_1, 'renderer', renderer$0_2, false);

                function usesZ$0() {
                    return $p.__equals($this_1._renderer, $p.PConstants.P3D) || $p.__equals($this_1._renderer, $p.PConstants.OPENGL);
                }
                $p.addMethod($this_1, 'usesZ', usesZ$0, false);

                function graphics$0() {
                    return $this_1._graphics;
                }
                $p.addMethod($this_1, 'graphics', graphics$0, false);

                function filter$1(kind) {
                    $this_1._hasFilter = true;
                    $this_1._hasFilterParam = false;
                    $this_1._filterKind = kind;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'filter', filter$1, false);

                function filter$2_2(kind, param) {
                    $this_1._hasFilter = true;
                    $this_1._hasFilterParam = true;
                    $this_1._filterKind = kind;
                    $this_1._filterParam = param;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'filter', filter$2_2, false);

                function noFilter$0() {
                    $this_1._hasFilter = false;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'noFilter', noFilter$0, false);

                function hasFilter$0() {
                    return $this_1._hasFilter;
                }
                $p.addMethod($this_1, 'hasFilter', hasFilter$0, false);

                function filterKind$1(i) {
                    $this_1._filterKind = i;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'filterKind', filterKind$1, false);

                function filterKind$0_2() {
                    return $this_1._filterKind;
                }
                $p.addMethod($this_1, 'filterKind', filterKind$0_2, false);

                function filterParam$1(f) {
                    $this_1._filterParam = f;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'filterParam', filterParam$1, false);

                function filterParam$0_2() {
                    return $this_1._filterParam;
                }
                $p.addMethod($this_1, 'filterParam', filterParam$0_2, false);

                function blend$0() {
                    return $this_1.$self.blend($p.PConstants.BLEND);
                }
                $p.addMethod($this_1, 'blend', blend$0, false);

                function blend$1_2(mode) {
                    $this_1._hasBlend = true;
                    $this_1._blendMode = mode;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'blend', blend$1_2, false);

                function noBlend$0() {
                    $this_1._hasBlend = false;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'noBlend', noBlend$0, false);

                function hasBlend$1(b) {
                    return (b) ? $this_1.$self.blend() : $this_1.$self.noBlend();
                }
                $p.addMethod($this_1, 'hasBlend', hasBlend$1, false);

                function hasBlend$0_2() {
                    return $this_1._hasBlend;
                }
                $p.addMethod($this_1, 'hasBlend', hasBlend$0_2, false);

                function blendMode$1(i) {
                    $this_1._blendMode = i;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'blendMode', blendMode$1, false);

                function blendMode$0_2() {
                    return $this_1._blendMode;
                }
                $p.addMethod($this_1, 'blendMode', blendMode$0_2, false);

                function fade$1(fadeAmt) {
                    $this_1._hasFade = true;
                    $this_1._fadeAmt = fadeAmt;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'fade', fade$1, false);

                function noFade$0() {
                    $this_1._hasFade = false;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'noFade', noFade$0, false);

                function hasFade$1(b) {
                    $this_1._hasFade = b;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'hasFade', hasFade$1, false);

                function hasFade$0_2() {
                    return $this_1._hasFade;
                }
                $p.addMethod($this_1, 'hasFade', hasFade$0_2, false);

                function autoClear$1(b) {
                    $this_1._autoClear = b;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'autoClear', autoClear$1, false);

                function autoClear$0_2() {
                    return $this_1._autoClear;
                }
                $p.addMethod($this_1, 'autoClear', autoClear$0_2, false);

                function background$1(clr) {
                    return $this_1.$self.fill(clr);
                }
                $p.addMethod($this_1, 'background', background$1, false);

                function background$2_2(clr, alpha) {
                    return $this_1.$self.fill(clr, alpha);
                }
                $p.addMethod($this_1, 'background', background$2_2, false);

                function background$3_3(r, g, b) {
                    return $this_1.$self.fill(r, g, b);
                }
                $p.addMethod($this_1, 'background', background$3_3, false);

                function background$4_4(r, g, b, a) {
                    return $this_1.$self.fill(r, g, b, a);
                }
                $p.addMethod($this_1, 'background', background$4_4, false);

                function background$0_5() {
                    return $this_1._fill;
                }
                $p.addMethod($this_1, 'background', background$0_5, false);

                function noBackground$0() {
                    return $this_1.$self.noFill();
                }
                $p.addMethod($this_1, 'noBackground', noBackground$0, false);

                function size$2(w, h) {
                    $super.width(w);
                    $super.height(h);
                    $this_1.$self.updateBuffer();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'size', size$2, false);

                function width$1(w) {
                    $super.width(w);
                    $this_1.$self.updateBuffer();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'width', width$1, false);

                function height$1(h) {
                    $super.height(h);
                    $this_1.$self.updateBuffer();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'height', height$1, false);

                function paintAll$3(g, zFlag, alphaPc) {
                    if ($this_1._alphaPc <= 0 || $this_1._width == 0 || $this_1._height == 0) return;
                    g.pushMatrix();
                    if (zFlag) g.translate($this_1._x, $this_1._y, $this_1._z);
                    else g.translate($this_1._x, $this_1._y);
                    g.rotate($this_1._rotationZRad);
                    alphaPc *= $this_1._alphaPc;
                    $this_1._graphics.beginDraw();
                    if ($this_1._autoClear) {
                        $this_1._graphics.clear();
                    } else {
                        if ($this_1._hasFilter) {
                            if ($this_1._hasFilterParam) $this_1._graphics.filter($this_1._filterKind, $this_1._filterParam);
                            else $this_1._graphics.filter($this_1._filterKind);
                        }
                        if ($this_1._hasFade) {
                            if (!$p.__equals($this_1._renderer, $p.PConstants.JAVA2D)) $this_1._graphics.loadPixels();
                            var pix = $this_1._graphics.pixels.toArray();
                            for (var i = 0; i < pix.length; ++i) {
                                var clr = pix[i];
                                var a = clr >>> 24;
                                if (a == 0) continue;
                                a -= $this_1._fadeAmt;
                                if (a < 0) a = 0;
                                pix[i] = clr & 0xFFFFFF | (a << 24);
                            }
                            $this_1._graphics.updatePixels();
                        }
                        if ($this_1._hasBlend) {
                            $this_1._graphics.blend(0, 0, $this_1._graphics.width, $this_1._graphics.height, 0, 0, $this_1._graphics.width, $this_1._graphics.height, $this_1._blendMode);
                        }
                    }
                    var child = $this_1._firstChild;
                    while (child != null) {
                        child.paintAll($this_1._graphics, $this_1.$self.usesZ(), alphaPc);
                        child = child.next();
                    }
                    $this_1._graphics.endDraw();
                    g.image($this_1._graphics, 0, 0);
                    g.popMatrix();
                }
                $p.addMethod($this_1, 'paintAll', paintAll$3, false);

                function draw$5(g, b, x, y, f) {

                }
                $p.addMethod($this_1, 'draw', draw$5, false);

                function $constr_0() {
                    $constr(H.app().width, H.app().height);
                }

                function $constr_1(bufferRenderer) {
                    $constr(H.app().width, H.app().height, bufferRenderer);
                }

                function $constr_2(w, h) {
                    $constr(w, h, $p.PConstants.JAVA2D);
                }

                function $constr_3(w, h, bufferRenderer) {
                    $superCstr();

                    $this_1._renderer = bufferRenderer;
                    $this_1.$self.size(w, h);
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else if (arguments.length === 1) {
                        $constr_1.apply($this_1, arguments);
                    } else if (arguments.length === 2) {
                        $constr_2.apply($this_1, arguments);
                    } else if (arguments.length === 3) {
                        $constr_3.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HCanvas, HDrawable);
            HCanvas.$base = HDrawable;
            return HCanvas;
        })();
        $p.HCanvas = HCanvas;
        var HEllipse = (function() {
            function HEllipse() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HDrawable.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $this_1._mode = 0;
                $this_1._startRad = 0;
                $this_1._endRad = 0;

                function createCopy$0() {
                    var copy = new HEllipse();
                    copy.copyPropertiesFrom($this_1.$self);
                    return copy;
                }
                $p.addMethod($this_1, 'createCopy', createCopy$0, false);

                function radius$1(r) {
                    $this_1.$self.size(r * 2);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'radius', radius$1, false);

                function radius$2_2(radiusX, radiusY) {
                    $this_1.$self.size(radiusX * 2, radiusY * 2);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'radius', radius$2_2, false);

                function radiusX$1(radiusX) {
                    $this_1.$self.width(radiusX * 2);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'radiusX', radiusX$1, false);

                function radiusX$0_2() {
                    return $this_1._width / 2;
                }
                $p.addMethod($this_1, 'radiusX', radiusX$0_2, false);

                function radiusY$1(radiusY) {
                    $this_1.$self.height(radiusY * 2);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'radiusY', radiusY$1, false);

                function radiusY$0_2() {
                    return $this_1._height / 2;
                }
                $p.addMethod($this_1, 'radiusY', radiusY$0_2, false);

                function isCircle$0() {
                    return $this_1._width == $this_1._height;
                }
                $p.addMethod($this_1, 'isCircle', isCircle$0, false);

                function mode$1(t) {
                    $this_1._mode = t;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'mode', mode$1, false);

                function mode$0_2() {
                    return $this_1._mode;
                }
                $p.addMethod($this_1, 'mode', mode$0_2, false);

                function start$1(deg) {
                    return $this_1.$self.startRad(deg * H.D2R);
                }
                $p.addMethod($this_1, 'start', start$1, false);

                function start$0_2() {
                    return $this_1._startRad * H.R2D;
                }
                $p.addMethod($this_1, 'start', start$0_2, false);

                function startRad$1(rad) {
                    $this_1._startRad = HMath.normalizeAngleRad(rad);
                    if ($this_1._startRad > $this_1._endRad) $this_1._endRad += $p.PConstants.TWO_PI;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'startRad', startRad$1, false);

                function startRad$0_2() {
                    return $this_1._startRad;
                }
                $p.addMethod($this_1, 'startRad', startRad$0_2, false);

                function end$1(deg) {
                    return $this_1.$self.endRad(deg * H.D2R);
                }
                $p.addMethod($this_1, 'end', end$1, false);

                function end$0_2() {
                    return $this_1._endRad * H.R2D;
                }
                $p.addMethod($this_1, 'end', end$0_2, false);

                function endRad$1(rad) {
                    $this_1._endRad = HMath.normalizeAngleRad(rad);
                    if ($this_1._startRad > $this_1._endRad) $this_1._endRad += $p.PConstants.TWO_PI;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'endRad', endRad$1, false);

                function endRad$0_2() {
                    return $this_1._endRad;
                }
                $p.addMethod($this_1, 'endRad', endRad$0_2, false);

                function containsRel$2(relX, relY) {
                    var cx = $this_1._width / 2;
                    var cy = $this_1._height / 2;
                    var dcx = relX - cx;
                    var dcy = relY - cy;
                    var inEllipse = ((dcx * dcx) / (cx * cx) + (dcy * dcy) / (cy * cy) <= 1);
                    if ($this_1._startRad == $this_1._endRad) return inEllipse;
                    else if (!inEllipse) return false;
                    if ($this_1._mode == $p.PConstants.PIE) {
                        var ptAngle = Math.atan2(dcy * cx, dcx * cy);
                        if ($this_1._startRad > ptAngle) ptAngle += $p.PConstants.TWO_PI;
                        return ($this_1._startRad <= ptAngle && ptAngle <= $this_1._endRad);
                    } else {
                        var end = HMath.squishAngleRad(cx, cy, $this_1._endRad);
                        var start = HMath.squishAngleRad(cx, cy, $this_1._startRad);
                        var pt1 = HMath.ellipsePointRadArr(cx, cy, cx, cy, end);
                        var pt2 = HMath.ellipsePointRadArr(cx, cy, cx, cy, start);
                        return HMath.rightOfLine(pt1[0], pt1[1], pt2[0], pt2[1], relX, relY);
                    }
                }
                $p.addMethod($this_1, 'containsRel', containsRel$2, false);

                function draw$5(g, usesZ, drawX, drawY, alphaPc) {
                    $this_1.$self.applyStyle(g, alphaPc);
                    drawX += $this_1._width / 2;
                    drawY += $this_1._height / 2;
                    if ($this_1._startRad == $this_1._endRad) {
                        g.ellipse(drawX, drawY, $this_1._width, $this_1._height);
                    } else {
                        g.arc(drawX, drawY, $this_1._width, $this_1._height, $this_1._startRad, $this_1._endRad, $this_1._mode);
                    }
                }
                $p.addMethod($this_1, 'draw', draw$5, false);

                function $constr_0() {
                    $superCstr();

                    $this_1._mode = $p.PConstants.PIE;
                }

                function $constr_1(ellipseRadius) {
                    $constr();
                    $this_1.$self.radius(ellipseRadius);
                }

                function $constr_2(radiusX, radiusY) {
                    $constr();
                    $this_1.$self.radius(radiusX, radiusY);
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else if (arguments.length === 1) {
                        $constr_1.apply($this_1, arguments);
                    } else if (arguments.length === 2) {
                        $constr_2.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HEllipse, HDrawable);
            HEllipse.$base = HDrawable;
            return HEllipse;
        })();
        $p.HEllipse = HEllipse;
        var HGroup = (function() {
            function HGroup() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HDrawable.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }

                function createCopy$0() {
                    var copy = new HGroup();
                    copy.copyPropertiesFrom($this_1.$self);
                    return copy;
                }
                $p.addMethod($this_1, 'createCopy', createCopy$0, false);

                function paintAll$3(g, usesZ, alphaPc) {
                    if ($this_1._alphaPc <= 0) return;
                    g.pushMatrix();
                    if (usesZ) g.translate($this_1._x, $this_1._y, $this_1._z);
                    else g.translate($this_1._x, $this_1._y);
                    g.rotate($this_1._rotationZRad);
                    alphaPc *= $this_1._alphaPc;
                    var child = $this_1._firstChild;
                    while (child != null) {
                        child.paintAll(g, usesZ, alphaPc);
                        child = child.next();
                    }
                    g.popMatrix();
                }
                $p.addMethod($this_1, 'paintAll', paintAll$3, false);

                function draw$5(g, b, x, y, f) {

                }
                $p.addMethod($this_1, 'draw', draw$5, false);

                function $constr_0() {
                    $superCstr();

                    $this_1.$self.transformsChildren(true).stylesChildren(true);
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HGroup, HDrawable);
            HGroup.$base = HDrawable;
            return HGroup;
        })();
        $p.HGroup = HGroup;
        var HImage = (function() {
            function HImage() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HDrawable.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $this_1._image = null;

                function createCopy$0() {
                    var copy = new HImage($this_1._image);
                    copy.copyPropertiesFrom($this_1.$self);
                    return copy;
                }
                $p.addMethod($this_1, 'createCopy', createCopy$0, false);

                function resetSize$0() {
                    if ($this_1._image == null) $this_1.$self.size(0, 0);
                    else $this_1.$self.size($this_1._image.width, $this_1._image.height);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'resetSize', resetSize$0, false);

                function image$1(imgArg) {
                    $this_1._image = H.getImage(imgArg);
                    return $this_1.$self.resetSize();
                }
                $p.addMethod($this_1, 'image', image$1, false);

                function image$0_2() {
                    return $this_1._image;
                }
                $p.addMethod($this_1, 'image', image$0_2, false);

                function tint$1(clr) {
                    $this_1.$self.fill(clr);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'tint', tint$1, false);

                function tint$2_2(clr, alpha) {
                    $this_1.$self.fill(clr, alpha);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'tint', tint$2_2, false);

                function tint$3_3(r, g, b) {
                    $this_1.$self.fill(r, g, b);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'tint', tint$3_3, false);

                function tint$4_4(r, g, b, a) {
                    $this_1.$self.fill(r, g, b, a);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'tint', tint$4_4, false);

                function tint$0_5() {
                    return $this_1.$self.fill();
                }
                $p.addMethod($this_1, 'tint', tint$0_5, false);

                function containsRel$2(relX, relY) {
                    if ($this_1._image == null || $this_1._image.width <= 0 || $this_1._image.height <= 0 || $this_1._width <= 0 || $this_1._height <= 0) return false;
                    var ix = Math.round(relX * $this_1._image.width / $this_1._width);
                    var iy = Math.round(relY * $this_1._image.height / $this_1._height);
                    return (0 < $this_1._image.get(ix, iy) >>> 24);
                }
                $p.addMethod($this_1, 'containsRel', containsRel$2, false);

                function draw$5(g, usesZ, drawX, drawY, alphaPc) {
                    if ($this_1._image == null) return;
                    alphaPc *= ($this_1._fill >>> 24);
                    g.tint($this_1._fill | 0xFF000000, Math.round(alphaPc));
                    var wscale = 1;
                    var hscale = 1;
                    var w = $this_1._width;
                    var h = $this_1._height;
                    if ($this_1._width < 0) {
                        w = -$this_1._width;
                        wscale = -1;
                        drawX = -drawX;
                    }
                    if ($this_1._height < 0) {
                        h = -$this_1._height;
                        hscale = -1;
                        drawY = -drawY;
                    }
                    g.pushMatrix();
                    g.scale(wscale, hscale);
                    g.image($this_1._image, drawX, drawY, w, h);
                    g.popMatrix();
                }
                $p.addMethod($this_1, 'draw', draw$5, false);

                function $constr_0() {
                    $constr(null);
                }

                function $constr_1(imgArg) {
                    $superCstr();

                    $this_1.$self.image(imgArg);
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else if (arguments.length === 1) {
                        $constr_1.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HImage, HDrawable);
            $p.extendInterfaceMembers(HImage, HImageHolder);
            HImage.$base = HDrawable;
            HImage.$interfaces = [HImageHolder];
            return HImage;
        })();
        $p.HImage = HImage;
        var HPath = (function() {
            function HPath() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HDrawable.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $p.defineProperty($this_1, 'HANDLE_FILL', {
                    get: function() {
                        return HPath.HANDLE_FILL
                    },
                    set: function(val) {
                        HPath.HANDLE_FILL = val
                    }
                });
                $p.defineProperty($this_1, 'HANDLE_STROKE', {
                    get: function() {
                        return HPath.HANDLE_STROKE
                    },
                    set: function(val) {
                        HPath.HANDLE_STROKE = val
                    }
                });
                $p.defineProperty($this_1, 'HANDLE_STROKE_WEIGHT', {
                    get: function() {
                        return HPath.HANDLE_STROKE_WEIGHT
                    },
                    set: function(val) {
                        HPath.HANDLE_STROKE_WEIGHT = val
                    }
                });
                $p.defineProperty($this_1, 'HANDLE_SIZE', {
                    get: function() {
                        return HPath.HANDLE_SIZE
                    },
                    set: function(val) {
                        HPath.HANDLE_SIZE = val
                    }
                });
                $this_1._vertices = null;
                $this_1._mode = 0;
                $this_1._drawsHandles = false;

                function createCopy$0() {
                    var copy = new HPath($this_1._mode);
                    copy.copyPropertiesFrom($this_1.$self);
                    copy._drawsHandles = $this_1._drawsHandles;
                    for (var i = 0; i < $this_1.$self.numVertices(); ++i) {
                        copy._vertices.add($this_1.$self.vertex(i).createCopy(copy));
                    }
                    return copy;
                }
                $p.addMethod($this_1, 'createCopy', createCopy$0, false);

                function mode$1(modeId) {
                    $this_1._mode = modeId;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'mode', mode$1, false);

                function mode$0_2() {
                    return $this_1._mode;
                }
                $p.addMethod($this_1, 'mode', mode$0_2, false);

                function drawsHandles$1(b) {
                    $this_1._drawsHandles = b;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'drawsHandles', drawsHandles$1, false);

                function drawsHandles$0_2() {
                    return $this_1._drawsHandles;
                }
                $p.addMethod($this_1, 'drawsHandles', drawsHandles$0_2, false);

                function numVertices$0() {
                    return $this_1._vertices.size();
                }
                $p.addMethod($this_1, 'numVertices', numVertices$0, false);

                function vertex$1(index) {
                    return $this_1._vertices.get(index);
                }
                $p.addMethod($this_1, 'vertex', vertex$1, false);

                function vertex$2_2(x, y) {
                    $this_1._vertices.add(new HVertex($this_1.$self).set(x, y));
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'vertex', vertex$2_2, false);

                function vertex$4_3(cx, cy, x, y) {
                    $this_1._vertices.add(new HVertex($this_1.$self).set(cx, cy, x, y));
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'vertex', vertex$4_3, false);

                function vertex$6_4(cx1, cy1, cx2, cy2, x, y) {
                    $this_1._vertices.add(new HVertex($this_1.$self).set(cx1, cy1, cx2, cy2, x, y));
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'vertex', vertex$6_4, false);

                function vertexUV$2(u, v) {
                    $this_1._vertices.add(new HVertex($this_1.$self).setUV(u, v));
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'vertexUV', vertexUV$2, false);

                function vertexUV$4_2(cu, cv, u, v) {
                    $this_1._vertices.add(new HVertex($this_1.$self).setUV(cu, cv, u, v));
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'vertexUV', vertexUV$4_2, false);

                function vertexUV$6_3(cu1, cv1, cu2, cv2, u, v) {
                    $this_1._vertices.add(new HVertex($this_1.$self).setUV(cu1, cv1, cu2, cv2, u, v));
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'vertexUV', vertexUV$6_3, false);

                function adjust$0() {
                    var numv = $this_1.$self.numVertices();
                    var minmax = $p.createJavaArray('float', [4]);
                    for (var i = 0; i < numv; ++i) $this_1.$self.vertex(i).computeMinMax(minmax);
                    var offU = -minmax[0],
                        offV = -minmax[1];
                    var oldW = $this_1._width,
                        oldH = $this_1._height;
                    $this_1.$self.anchorUV(offU, offV).scale(minmax[2] + offU, minmax[3] + offV);
                    for (var i = 0; i < numv; ++i) $this_1.$self.vertex(i).adjust(offU, offV, oldW, oldH);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'adjust', adjust$0, false);

                function endPath$0() {
                    return $this_1.$self.adjust();
                }
                $p.addMethod($this_1, 'endPath', endPath$0, false);

                function reset$0() {
                    $this_1.$self.size(HPath.DEFAULT_WIDTH, HPath.DEFAULT_HEIGHT).anchorUV(0, 0);
                    return $this_1.$self.clear();
                }
                $p.addMethod($this_1, 'reset', reset$0, false);

                function beginPath$1(modeId) {
                    return $this_1.$self.reset().mode(modeId);
                }
                $p.addMethod($this_1, 'beginPath', beginPath$1, false);

                function beginPath$0_2() {
                    return $this_1.$self.reset();
                }
                $p.addMethod($this_1, 'beginPath', beginPath$0_2, false);

                function clear$0() {
                    $this_1._vertices.clear();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'clear', clear$0, false);

                function line$4(x1, y1, x2, y2) {
                    return $this_1.$self.beginPath($p.PConstants.PATH).vertex(x1, y1).vertex(x2, y2).endPath();
                }
                $p.addMethod($this_1, 'line', line$4, false);

                function lineUV$4(u1, v1, u2, v2) {
                    return $this_1.$self.beginPath($p.PConstants.PATH).vertexUV(u1, v1).vertexUV(u2, v2).endPath();
                }
                $p.addMethod($this_1, 'lineUV', lineUV$4, false);

                function triangle$2(type, direction) {
                    $this_1.$self.clear().mode($p.PConstants.POLYGON);
                    var ratio = 2;
                    switch (type) {
                    case HConstants.EQUILATERAL:
                        ratio = Math.sin($p.PConstants.TWO_PI / 6);
                        break;
                    case HConstants.RIGHT:
                        ratio = Math.sin($p.PConstants.TWO_PI / 8) / HConstants.SQRT2;
                        break;
                    }
                    switch (direction) {
                    case HConstants.TOP:
                    case HConstants.CENTER_TOP:
                        $this_1.$self.vertexUV(.5, 0).vertexUV(0, 1).vertexUV(1, 1);
                        if (ratio < 2) $this_1.$self.height($this_1._width * ratio).proportional(true);
                        break;
                    case HConstants.BOTTOM:
                    case HConstants.CENTER_BOTTOM:
                        $this_1.$self.vertexUV(.5, 1).vertexUV(1, 0).vertexUV(0, 0);
                        if (ratio < 2) $this_1.$self.height($this_1._width * ratio).proportional(true);
                        break;
                    case HConstants.RIGHT:
                    case HConstants.CENTER_RIGHT:
                        $this_1.$self.vertexUV(1, .5).vertexUV(0, 0).vertexUV(0, 1);
                        if (ratio < 2) $this_1.$self.width($this_1._height * ratio).proportional(true);
                        break;
                    case HConstants.LEFT:
                    case HConstants.CENTER_LEFT:
                        $this_1.$self.vertexUV(0, .5).vertexUV(1, 1).vertexUV(1, 0);
                        if (ratio < 2) $this_1.$self.width($this_1._height * ratio).proportional(true);
                        break;
                    case HConstants.TOP_LEFT:
                        $this_1.$self.vertexUV(0, 0).vertexUV(0, 1).vertexUV(1, 0);
                        break;
                    case HConstants.TOP_RIGHT:
                        $this_1.$self.vertexUV(1, 0).vertexUV(0, 0).vertexUV(1, 1);
                        break;
                    case HConstants.BOTTOM_RIGHT:
                        $this_1.$self.vertexUV(1, 1).vertexUV(0, 1).vertexUV(1, 0);
                        break;
                    case HConstants.BOTTOM_LEFT:
                        $this_1.$self.vertexUV(0, 1).vertexUV(0, 0).vertexUV(1, 1);
                        break;
                    }
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'triangle', triangle$2, false);

                function polygon$1(numEdges) {
                    return $this_1.$self.polygonRad(numEdges, 0);
                }
                $p.addMethod($this_1, 'polygon', polygon$1, false);

                function polygon$2_2(numEdges, startDeg) {
                    return $this_1.$self.polygonRad(numEdges, startDeg * HConstants.D2R);
                }
                $p.addMethod($this_1, 'polygon', polygon$2_2, false);

                function polygonRad$2(numEdges, startRad) {
                    $this_1.$self.clear().mode($p.PConstants.POLYGON);
                    var inc = $p.PConstants.TWO_PI / numEdges;
                    for (var i = 0; i < numEdges; ++i) {
                        var rad = startRad + inc * i;
                        $this_1.$self.vertexUV(0.5 + 0.5 * Math.cos(rad), 0.5 + 0.5 * Math.sin(rad));
                    }
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'polygonRad', polygonRad$2, false);

                function star$2(numEdges, depth) {
                    return $this_1.$self.starRad(numEdges, depth, 0);
                }
                $p.addMethod($this_1, 'star', star$2, false);

                function star$3_2(numEdges, depth, startDeg) {
                    return $this_1.$self.starRad(numEdges, depth, startDeg * HConstants.D2R);
                }
                $p.addMethod($this_1, 'star', star$3_2, false);

                function starRad$3(numEdges, depth, startRad) {
                    $this_1.$self.clear().mode($p.PConstants.POLYGON);
                    var inc = $p.PConstants.TWO_PI / numEdges;
                    var idepth2 = (1 - depth) * 0.5;
                    for (var i = 0; i < numEdges; ++i) {
                        var rad = startRad + inc * i;
                        $this_1.$self.vertexUV(0.5 + 0.5 * Math.cos(rad), 0.5 + 0.5 * Math.sin(rad));
                        rad += inc / 2;
                        $this_1.$self.vertexUV(0.5 + idepth2 * Math.cos(rad), 0.5 + idepth2 * Math.sin(rad));
                    }
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'starRad', starRad$3, false);

                function containsRel$2(relX, relY) {
                    var numv = $this_1.$self.numVertices();
                    if (numv <= 0) return false;
                    if ($this_1._width == 0) return (relX == 0) && (0 < relY && relY < $this_1._height);
                    if ($this_1._height == 0) return (relY == 0) && (0 < relX && relX < $this_1._width);
                    if (!$super.containsRel(relX, relY)) return false;
                    var openPath = false;
                    switch ($this_1._mode) {
                    case $p.PConstants.POINTS:
                        for (var i = 0; i < numv; ++i) {
                            var curr = $this_1.$self.vertex(i);
                            if (curr.u() == relX / $this_1._width && curr.v() == relY / $this_1._height) return true;
                        }
                        return false;
                    case $p.PConstants.PATH:
                        openPath = true;
                        if (HColors.isTransparent($this_1._fill)) {
                            var prev = $this_1.$self.vertex(openPath ? 0 : numv - 1);
                            for (var i = (openPath ? 1 : 0); i < numv; ++i) {
                                var curr = $this_1.$self.vertex(i);
                                if (curr.inLine(prev, relX, relY)) return true;
                                prev = curr;
                                if (openPath) openPath = false;
                            }
                            return false;
                        }
                    default:
                        var u = relX / $this_1._width;
                        var v = relY / $this_1._height;
                        var isIn = false;
                        var prev = $this_1.$self.vertex(numv - 1);
                        var pprev = $this_1.$self.vertex(numv > 1 ? numv - 2 : 0);
                        for (var i = 0; i < numv; ++i) {
                            var curr = $this_1.$self.vertex(i);
                            if (curr.intersectTest(pprev, prev, u, v, openPath)) isIn = !isIn;
                            pprev = prev;
                            prev = curr;
                            if (openPath) openPath = false;
                        }
                        return isIn;
                    }
                }
                $p.addMethod($this_1, 'containsRel', containsRel$2, false);

                function draw$5(g, usesZ, drawX, drawY, alphaPc) {
                    var numv = $this_1.$self.numVertices();
                    if (numv <= 0) return;
                    $this_1.$self.applyStyle(g, alphaPc);
                    var drawsLines = ($this_1._mode != $p.PConstants.POINTS);
                    var isPolygon = ($this_1._mode == $p.PConstants.POLYGON && numv > 2);
                    var isSimple = true;
                    if (drawsLines) g.beginShape();
                    else g.beginShape($p.PConstants.POINTS);
                    var itrs = (isPolygon) ? numv + 1 : numv;
                    for (var i = 0; i < itrs; ++i) {
                        var v = $this_1.$self.vertex(i < numv ? i : 0);
                        v.draw(g, drawX, drawY, isSimple);
                        if (isSimple && drawsLines) isSimple = false;
                    }
                    if (isPolygon) g.endShape($p.PConstants.CLOSE);
                    else g.endShape();
                    if ($this_1._drawsHandles && drawsLines) {
                        var prev = $this_1.$self.vertex(isPolygon ? numv - 1 : 0);
                        for (var i = (isPolygon ? 0 : 1); i < numv; ++i) {
                            var curr = $this_1.$self.vertex(i);
                            curr.drawHandles(g, prev, drawX, drawY);
                            prev = curr;
                        }
                    }
                }
                $p.addMethod($this_1, 'draw', draw$5, false);

                function $constr_0() {
                    $constr($p.PConstants.PATH);
                }

                function $constr_1(modeId) {
                    $superCstr();

                    $this_1._mode = modeId;
                    $this_1._vertices = new $p.ArrayList();
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else if (arguments.length === 1) {
                        $constr_1.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HPath, HDrawable);
            HPath.HANDLE_FILL = 0xFFFF0000;
            HPath.HANDLE_STROKE = 0xFF202020;
            HPath.HANDLE_STROKE_WEIGHT = 1;
            HPath.HANDLE_SIZE = 6;
            HPath.$base = HDrawable;
            return HPath;
        })();
        $p.HPath = HPath;
        var HRect = (function() {
            function HRect() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HDrawable.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $this_1._tl = 0;
                $this_1._tr = 0;
                $this_1._bl = 0;
                $this_1._br = 0;

                function createCopy$0() {
                    var copy = new HRect();
                    copy._tl = $this_1._tl;
                    copy._tr = $this_1._tr;
                    copy._bl = $this_1._bl;
                    copy._br = $this_1._br;
                    copy.copyPropertiesFrom($this_1.$self);
                    return copy;
                }
                $p.addMethod($this_1, 'createCopy', createCopy$0, false);

                function rounding$1(radius) {
                    $this_1._tl = $this_1._tr = $this_1._bl = $this_1._br = radius;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'rounding', rounding$1, false);

                function rounding$4_2(topleft, topright, bottomright, bottomleft) {
                    $this_1._tl = topleft;
                    $this_1._tr = topright;
                    $this_1._br = bottomright;
                    $this_1._bl = bottomleft;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'rounding', rounding$4_2, false);

                function rounding$0_3() {
                    return $this_1.$self.roundingTL();
                }
                $p.addMethod($this_1, 'rounding', rounding$0_3, false);

                function roundingTL$1(radius) {
                    $this_1._tl = radius;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'roundingTL', roundingTL$1, false);

                function roundingTL$0_2() {
                    return $this_1._tl;
                }
                $p.addMethod($this_1, 'roundingTL', roundingTL$0_2, false);

                function roundingTR$1(radius) {
                    $this_1._tr = radius;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'roundingTR', roundingTR$1, false);

                function roundingTR$0_2() {
                    return $this_1._tr;
                }
                $p.addMethod($this_1, 'roundingTR', roundingTR$0_2, false);

                function roundingBR$1(radius) {
                    $this_1._br = radius;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'roundingBR', roundingBR$1, false);

                function roundingBR$0_2() {
                    return $this_1._br;
                }
                $p.addMethod($this_1, 'roundingBR', roundingBR$0_2, false);

                function roundingBL$1(radius) {
                    $this_1._bl = radius;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'roundingBL', roundingBL$1, false);

                function roundingBL$0_2() {
                    return $this_1._bl;
                }
                $p.addMethod($this_1, 'roundingBL', roundingBL$0_2, false);

                function draw$5(g, usesZ, drawX, drawY, alphaPc) {
                    $this_1.$self.applyStyle(g, alphaPc);
                    g.rect(drawX, drawY, $this_1._width, $this_1._height, $this_1._tl, $this_1._tr, $this_1._br, $this_1._bl);
                }
                $p.addMethod($this_1, 'draw', draw$5, false);

                function $constr_0() {
                    $superCstr();

                }

                function $constr_1(s) {
                    $superCstr();

                    $this_1.$self.size(s);
                }

                function $constr_2(w, h) {
                    $superCstr();

                    $this_1.$self.size(w, h);
                }

                function $constr_3(w, h, roundingRadius) {
                    $superCstr();

                    $this_1.$self.size(w, h);
                    $this_1.$self.rounding(roundingRadius);
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else if (arguments.length === 1) {
                        $constr_1.apply($this_1, arguments);
                    } else if (arguments.length === 2) {
                        $constr_2.apply($this_1, arguments);
                    } else if (arguments.length === 3) {
                        $constr_3.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HRect, HDrawable);
            HRect.$base = HDrawable;
            return HRect;
        })();
        $p.HRect = HRect;
        var HShape = (function() {
            function HShape() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HDrawable.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $this_1._shape = null;
                $this_1._randomFills = null;
                $this_1._randomStrokes = null;

                function createCopy$0() {
                    var copy = new HShape($this_1._shape);
                    copy.copyPropertiesFrom($this_1.$self);
                    return copy;
                }
                $p.addMethod($this_1, 'createCopy', createCopy$0, false);

                function resetSize$0() {
                    if ($this_1._shape == null) {
                        $this_1.$self.size(0, 0);
                    } else {
                        $this_1.$self.size($this_1._shape.width, $this_1._shape.height);
                    }
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'resetSize', resetSize$0, false);

                function shape$1(shapeArg) {
                    if ($p.__instanceof(shapeArg, $p.PShape)) {
                        $this_1._shape = shapeArg;
                    } else if ($p.__instanceof(shapeArg, String)) {
                        $this_1._shape = H.app().loadShape(shapeArg);
                    } else if ($p.__instanceof(shapeArg, HShape)) {
                        $this_1._shape = (shapeArg)._shape;
                    } else if (shapeArg == null) {
                        $this_1._shape = null;
                    }
                    return $this_1.$self.resetSize();
                }
                $p.addMethod($this_1, 'shape', shape$1, false);

                function shape$0_2() {
                    return $this_1._shape;
                }
                $p.addMethod($this_1, 'shape', shape$0_2, false);

                function enableStyle$1(b) {
                    if (b) $this_1._shape.enableStyle();
                    else $this_1._shape.disableStyle();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'enableStyle', enableStyle$1, false);

                function randomColors$1(colors) {
                    var numChildren = $this_1._shape.getChildCount();
                    var isFill = colors.appliesFill();
                    var isStroke = colors.appliesStroke();
                    if (isFill) {
                        if ($this_1._randomFills == null || $this_1._randomFills.length < numChildren) $this_1._randomFills = $p.createJavaArray('int', [numChildren]);
                    } else {
                        $this_1._randomFills = null;
                    }
                    if (isStroke) {
                        if ($this_1._randomStrokes == null || $this_1._randomStrokes.length < numChildren) $this_1._randomStrokes = $p.createJavaArray('int', [numChildren]);
                    } else {
                        $this_1._randomStrokes = null;
                    }
                    for (var i = 0; i < numChildren; ++i) {
                        if (isFill) $this_1._randomFills[i] = colors.getColor();
                        if (isStroke) $this_1._randomStrokes[i] = colors.getColor();
                    }
                    $this_1._shape.disableStyle();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'randomColors', randomColors$1, false);

                function resetRandomColors$0() {
                    $this_1._shape.enableStyle();
                    $this_1._randomFills = null;
                    $this_1._randomStrokes = null;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'resetRandomColors', resetRandomColors$0, false);

                function draw$5(g, usesZ, drawX, drawY, alphaPc) {
                    if ($this_1._shape == null) return;
                    var wscale = 1;
                    var hscale = 1;
                    var w = $this_1._width;
                    var h = $this_1._height;
                    if ($this_1._width < 0) {
                        w = -$this_1._width;
                        wscale = -1;
                        drawX = -drawX;
                    }
                    if ($this_1._height < 0) {
                        h = -$this_1._height;
                        hscale = -1;
                        drawY = -drawY;
                    }
                    $this_1.$self.applyStyle(g, alphaPc);
                    g.pushMatrix();
                    g.scale(wscale, hscale);
                    if ($this_1._randomFills == null && $this_1._randomStrokes == null) {
                        g.shape($this_1._shape, drawX, drawY, w, h);
                    } else for (var i = 0; i < $this_1._shape.getChildCount(); ++i) {
                        var childShape = $this_1._shape.getChild(i);
                        childShape.width = $this_1._shape.width;
                        childShape.height = $this_1._shape.height;
                        if ($this_1._randomFills != null) g.fill($this_1._randomFills[i]);
                        if ($this_1._randomStrokes != null) g.stroke($this_1._randomStrokes[i]);
                        g.shape(childShape, drawX, drawY, w, h);
                    }
                    g.popMatrix();
                }
                $p.addMethod($this_1, 'draw', draw$5, false);

                function $constr_0() {
                    $superCstr();

                    $this_1.$self.shape(null);
                }

                function $constr_1(shapeArg) {
                    $superCstr();

                    $this_1.$self.shape(shapeArg);
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else if (arguments.length === 1) {
                        $constr_1.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HShape, HDrawable);
            HShape.$base = HDrawable;
            return HShape;
        })();
        $p.HShape = HShape;
        var HSphere = (function() {
            function HSphere() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HDrawable3D.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }

                function radius$1(f) {
                    return $this_1.$self.size(f * 2);
                }
                $p.addMethod($this_1, 'radius', radius$1, false);

                function radius$3_2(radiusw, radiush, radiusd) {
                    return $this_1.$self.size(radiusw * 2, radiush * 2, radiusd * 2);
                }
                $p.addMethod($this_1, 'radius', radius$3_2, false);

                function onResize$4(oldW, oldH, newW, newH) {
                    $this_1._height = $this_1._depth = $this_1._width;
                    $super.onResize(oldW, oldH, newW, newH);
                }
                $p.addMethod($this_1, 'onResize', onResize$4, false);

                function createCopy$0() {
                    var copy = new HSphere();
                    copy.copyPropertiesFrom($this_1.$self);
                    copy._depth = $this_1._depth;
                    copy._anchorW = $this_1._anchorW;
                    return copy;
                }
                $p.addMethod($this_1, 'createCopy', createCopy$0, false);

                function draw$5(g, usesZ, drawX, drawY, currAlphaPc) {
                    $this_1.$self.applyStyle(g, currAlphaPc);
                    g.pushMatrix();
                    g.translate(drawX + $this_1._width / 2, drawY + $this_1._height / 2, -$this_1.$self.anchorZ() + $this_1._depth / 2);
                    g.scale($this_1._width, $this_1._height, $this_1._depth);
                    g.sphere(1);
                    g.popMatrix();
                }
                $p.addMethod($this_1, 'draw', draw$5, false);

                function $constr_0() {
                    $superCstr();

                }

                function $constr_1(radius) {
                    $superCstr();

                    radius(radius);
                }

                function $constr_3(radiusw, radiush, radiusd) {
                    $superCstr();

                    $this_1.$self.radius(radiusw, radiush, radiusd);
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else if (arguments.length === 1) {
                        $constr_1.apply($this_1, arguments);
                    } else if (arguments.length === 3) {
                        $constr_3.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HSphere, HDrawable3D);
            HSphere.$base = HDrawable3D;
            return HSphere;
        })();
        $p.HSphere = HSphere;
        var HText = (function() {
            function HText() {
                var $this_1 = this;
                var $super = {
                    $upcast: $this_1
                };

                function $superCstr() {
                    HDrawable.apply($super, arguments);
                    if (! ('$self' in $super)) $p.extendClassChain($super)
                }
                $this_1._font = null;
                $this_1._text = null;
                $this_1._descent = 0;

                function createCopy$0() {
                    var copy = new HText($this_1._text, $this_1._height, $this_1._font);
                    copy.copyPropertiesFrom($this_1.$self);
                    copy.adjustMetrics();
                    return copy;
                }
                $p.addMethod($this_1, 'createCopy', createCopy$0, false);

                function text$1(txt) {
                    $this_1._text = txt;
                    $this_1.$self.adjustMetrics();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'text', text$1, false);

                function text$0_2() {
                    return $this_1._text;
                }
                $p.addMethod($this_1, 'text', text$0_2, false);

                function font$1(arg) {
                    var app = H.app();
                    if ($p.__instanceof(arg, $p.PFont)) {
                        $this_1._font = arg;
                    } else if ($p.__instanceof(arg, String)) {
                        var str = arg;
                        $this_1._font = (str.indexOf(".vlw", str.length - 4) > 0) ? app.loadFont(str) : app.createFont(str, 64);
                    } else if ($p.__instanceof(arg, HText)) {
                        $this_1._font = (arg)._font;
                    } else if (arg == null) {
                        $this_1._font = app.createFont("SansSerif", 64);
                    }
                    $this_1.$self.adjustMetrics();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'font', font$1, false);

                function font$0_2() {
                    return $this_1._font;
                }
                $p.addMethod($this_1, 'font', font$0_2, false);

                function fontSize$1(f) {
                    return $this_1.$self.height(f);
                }
                $p.addMethod($this_1, 'fontSize', fontSize$1, false);

                function fontSize$0_2() {
                    return $this_1._height;
                }
                $p.addMethod($this_1, 'fontSize', fontSize$0_2, false);

                function adjustMetrics$0() {
                    var app = H.app();
                    app.pushStyle();
                    app.textFont($this_1._font, ($this_1._height < 0) ? -$this_1._height : $this_1._height);
                    $this_1._descent = app.textDescent();
                    $this_1._width = ($this_1._text == null) ? 0 : ($this_1._width < 0) ? -app.textWidth($this_1._text) : app.textWidth($this_1._text);
                    app.popStyle();
                }
                $p.addMethod($this_1, 'adjustMetrics', adjustMetrics$0, false);

                function width$1(w) {
                    if (w < 0 == $this_1._width > 0) $this_1._width = -$this_1._width;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'width', width$1, false);

                function height$1(h) {
                    $this_1._height = h;
                    $this_1.$self.adjustMetrics();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'height', height$1, false);

                function containsRel$2(relX, relY) {
                    if ($this_1._text == null || $this_1._height == 0) return false;
                    var numChars = $this_1._text.length;
                    var ratio = 64 / $this_1._height;
                    var xoff = 0;
                    var yoff = ($this_1._height - $this_1._descent) * ratio;
                    relX *= ratio;
                    relY *= ratio;
                    for (var i = 0; i < numChars; ++i) {
                        var c = $this_1._text.charAt(i);
                        var g = $this_1._font.getGlyph(c);
                        var pxx = Math.round(relX - xoff);
                        var pxy = Math.round(relY - yoff) + g.topExtent;
                        if (g.image.get(pxx, pxy) >>> 24 > 0) return true;
                        xoff += g.setWidth;
                    }
                    return false;
                }
                $p.addMethod($this_1, 'containsRel', containsRel$2, false);

                function draw$5(g, usesZ, drawX, drawY, alphaPc) {
                    if ($this_1._text == null) return;
                    $this_1.$self.applyStyle(g, alphaPc);
                    var wscale = 1;
                    var hscale = 1;
                    var h = $this_1._height;
                    if ($this_1._width < 0) {
                        wscale = -1;
                        drawX = -drawX;
                    }
                    if ($this_1._height < 0) {
                        h = -$this_1._height;
                        hscale = -1;
                        drawY = -drawY;
                    }
                    g.pushMatrix();
                    g.scale(wscale, hscale);
                    g.textFont($this_1._font, h);
                    g.text($this_1._text, drawX, drawY + h - $this_1._descent);
                    g.popMatrix();
                }
                $p.addMethod($this_1, 'draw', draw$5, false);

                function $constr_0() {
                    $constr(null, 16);
                }

                function $constr_1(textString) {
                    $constr(textString, 16, null);
                }

                function $constr_2(textString, size) {
                    $constr(textString, size, null);
                }

                function $constr_3(textString, size, fontArg) {
                    $superCstr();

                    $this_1._text = textString;
                    $this_1._height = size;
                    $this_1.$self.font(fontArg);
                    $this_1.$self.height(size);
                    $this_1._fill = HConstants.BLACK;
                    $this_1._stroke = HConstants.CLEAR;
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else if (arguments.length === 1) {
                        $constr_1.apply($this_1, arguments);
                    } else if (arguments.length === 2) {
                        $constr_2.apply($this_1, arguments);
                    } else if (arguments.length === 3) {
                        $constr_3.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendStaticMembers(HText, HDrawable);
            HText.$base = HDrawable;
            return HText;
        })();
        $p.HText = HText;
        var HGridLayout = (function() {
            function HGridLayout() {
                var $this_1 = this;

                function $superCstr() {
                    $p.extendClassChain($this_1)
                }
                $this_1._currentIndex = 0;
                $this_1._numCols = 0;
                $this_1._startX = 0;
                $this_1._startY = 0;
                $this_1._xSpace = 0;
                $this_1._ySpace = 0;

                function currentIndex$1(i) {
                    $this_1._currentIndex = i;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'currentIndex', currentIndex$1, false);

                function currentIndex$0_2() {
                    return $this_1._currentIndex;
                }
                $p.addMethod($this_1, 'currentIndex', currentIndex$0_2, false);

                function resetIndex$0() {
                    $this_1._currentIndex = 0;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'resetIndex', resetIndex$0, false);

                function cols$1(numOfColumns) {
                    $this_1._numCols = numOfColumns;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'cols', cols$1, false);

                function cols$0_2() {
                    return $this_1._numCols;
                }
                $p.addMethod($this_1, 'cols', cols$0_2, false);

                function startLoc$0() {
                    return new $p.PVector($this_1._startX, $this_1._startY);
                }
                $p.addMethod($this_1, 'startLoc', startLoc$0, false);

                function startLoc$2_2(x, y) {
                    $this_1._startX = x;
                    $this_1._startY = y;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'startLoc', startLoc$2_2, false);

                function startX$0() {
                    return $this_1._startX;
                }
                $p.addMethod($this_1, 'startX', startX$0, false);

                function startX$1_2(x) {
                    $this_1._startX = x;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'startX', startX$1_2, false);

                function startY$0() {
                    return $this_1._startY;
                }
                $p.addMethod($this_1, 'startY', startY$0, false);

                function startY$1_2(y) {
                    $this_1._startY = y;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'startY', startY$1_2, false);

                function spacing$0() {
                    return new $p.PVector($this_1._xSpace, $this_1._ySpace);
                }
                $p.addMethod($this_1, 'spacing', spacing$0, false);

                function spacing$2_2(xSpacing, ySpacing) {
                    $this_1._xSpace = xSpacing;
                    $this_1._ySpace = ySpacing;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'spacing', spacing$2_2, false);

                function spacingX$0() {
                    return $this_1._xSpace;
                }
                $p.addMethod($this_1, 'spacingX', spacingX$0, false);

                function spacingX$1_2(xSpacing) {
                    $this_1._xSpace = xSpacing;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'spacingX', spacingX$1_2, false);

                function spacingY$0() {
                    return $this_1._ySpace;
                }
                $p.addMethod($this_1, 'spacingY', spacingY$0, false);

                function spacingY$1_2(ySpacing) {
                    $this_1._ySpace = ySpacing;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'spacingY', spacingY$1_2, false);

                function getNextPoint$0() {
                    var row = $p.__int_cast(Math.floor($this_1._currentIndex / $this_1._numCols));
                    var col = $this_1._currentIndex % $this_1._numCols;
                    ++$this_1._currentIndex;
                    return new $p.PVector(col * $this_1._xSpace + $this_1._startX, row * $this_1._ySpace + $this_1._startY);
                }
                $p.addMethod($this_1, 'getNextPoint', getNextPoint$0, false);

                function applyTo$1(target) {
                    target.loc($this_1.$self.getNextPoint());
                }
                $p.addMethod($this_1, 'applyTo', applyTo$1, false);

                function $constr_0() {
                    $superCstr();

                    $this_1._xSpace = $this_1._ySpace = $this_1._numCols = 16;
                }

                function $constr_1(numOfColumns) {
                    $constr();
                    $this_1._numCols = numOfColumns;
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else if (arguments.length === 1) {
                        $constr_1.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendInterfaceMembers(HGridLayout, HLayout);
            HGridLayout.$interfaces = [HLayout];
            return HGridLayout;
        })();
        $p.HGridLayout = HGridLayout;
        var HShapeLayout = (function() {
            function HShapeLayout() {
                var $this_1 = this;

                function $superCstr() {
                    $p.extendClassChain($this_1)
                }
                $this_1._target = null;
                $this_1._bounds = null;
                $this_1._iterationLimit = 0;

                function iterationLimit$1(i) {
                    $this_1._iterationLimit = i;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'iterationLimit', iterationLimit$1, false);

                function iterationLimit$0_2() {
                    return $this_1._iterationLimit;
                }
                $p.addMethod($this_1, 'iterationLimit', iterationLimit$0_2, false);

                function target$1(d) {
                    $this_1._target = d;
                    if ($this_1._target != null) $this_1._target.bounds($this_1._bounds);
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'target', target$1, false);

                function target$0_2() {
                    return $this_1._target;
                }
                $p.addMethod($this_1, 'target', target$0_2, false);

                function applyTo$1(target) {
                    var pt = $this_1.$self.getNextPoint();
                    if (pt != null) target.loc(pt);
                }
                $p.addMethod($this_1, 'applyTo', applyTo$1, false);

                function getNextPoint$0() {
                    if ($this_1._target == null) return null;
                    var x1 = $this_1._bounds[0];
                    var y1 = $this_1._bounds[1];
                    var x2 = $this_1._bounds[0] + $this_1._bounds[2];
                    var y2 = $this_1._bounds[1] + $this_1._bounds[3];
                    for (var i = 0; i < $this_1._iterationLimit; ++i) {
                        var x = H.app().random(x1, x2);
                        var y = H.app().random(y1, y2);
                        if ($p.__contains($this_1._target, x, y)) return new $p.PVector(x, y);
                    }
                    return null;
                }
                $p.addMethod($this_1, 'getNextPoint', getNextPoint$0, false);

                function $constr_0() {
                    $superCstr();

                    $this_1._iterationLimit = 1024;
                    $this_1._bounds = $p.createJavaArray('float', [4]);
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendInterfaceMembers(HShapeLayout, HLayout);
            HShapeLayout.$interfaces = [HLayout];
            return HShapeLayout;
        })();
        $p.HShapeLayout = HShapeLayout;
        var HDrawablePool = (function() {
            function HDrawablePool() {
                var $this_1 = this;

                function $superCstr() {
                    $p.extendClassChain($this_1)
                }
                $this_1._activeSet = null;
                $this_1._inactiveSet = null;
                $this_1._prototypes = null;
                $this_1._onCreate = null;
                $this_1._onRequest = null;
                $this_1._onRelease = null;
                $this_1._layout = null;
                $this_1._colorist = null;
                $this_1._autoParent = null;
                $this_1._max = 0;

                function max$0() {
                    return $this_1._max;
                }
                $p.addMethod($this_1, 'max', max$0, false);

                function max$1_2(m) {
                    $this_1._max = m;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'max', max$1_2, false);

                function numActive$0() {
                    return $this_1._activeSet.size();
                }
                $p.addMethod($this_1, 'numActive', numActive$0, false);

                function numInactive$0() {
                    return $this_1._inactiveSet.size();
                }
                $p.addMethod($this_1, 'numInactive', numInactive$0, false);

                function currentIndex$0() {
                    return $this_1._activeSet.size() - 1;
                }
                $p.addMethod($this_1, 'currentIndex', currentIndex$0, false);

                function layout$0() {
                    return $this_1._layout;
                }
                $p.addMethod($this_1, 'layout', layout$0, false);

                function layout$1_2(newLayout) {
                    $this_1._layout = newLayout;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'layout', layout$1_2, false);

                function colorist$0() {
                    return $this_1._colorist;
                }
                $p.addMethod($this_1, 'colorist', colorist$0, false);

                function colorist$1_2(newColorist) {
                    $this_1._colorist = newColorist;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'colorist', colorist$1_2, false);

                function onCreate$1(callback) {
                    $this_1._onCreate = (callback == null) ? HConstants.NOP : callback;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'onCreate', onCreate$1, false);

                function onCreate$0_2() {
                    return $this_1._onCreate;
                }
                $p.addMethod($this_1, 'onCreate', onCreate$0_2, false);

                function onRequest$1(callback) {
                    $this_1._onRequest = (callback == null) ? HConstants.NOP : callback;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'onRequest', onRequest$1, false);

                function onRequest$0_2() {
                    return $this_1._onRequest;
                }
                $p.addMethod($this_1, 'onRequest', onRequest$0_2, false);

                function onRelease$1(callback) {
                    $this_1._onRelease = (callback == null) ? HConstants.NOP : callback;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'onRelease', onRelease$1, false);

                function onRelease$0_2() {
                    return $this_1._onRelease;
                }
                $p.addMethod($this_1, 'onRelease', onRelease$0_2, false);

                function autoParent$1(parent) {
                    $this_1._autoParent = parent;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'autoParent', autoParent$1, false);

                function autoAddToStage$0() {
                    $this_1._autoParent = H.stage();
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'autoAddToStage', autoAddToStage$0, false);

                function autoParent$0_2() {
                    return $this_1._autoParent;
                }
                $p.addMethod($this_1, 'autoParent', autoParent$0_2, false);

                function isFull$0() {
                    return $this_1.$self.count() >= $this_1._max;
                }
                $p.addMethod($this_1, 'isFull', isFull$0, false);

                function count$0() {
                    return $this_1._activeSet.size() + $this_1._inactiveSet.size();
                }
                $p.addMethod($this_1, 'count', count$0, false);

                function destroy$0() {
                    $this_1._activeSet.removeAll();
                    $this_1._inactiveSet.removeAll();
                    $this_1._prototypes.clear();
                    $this_1._onCreate = $this_1._onRequest = $this_1._onRelease = HConstants.NOP;
                    $this_1._layout = null;
                    $this_1._autoParent = null;
                    $this_1._max = 0;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'destroy', destroy$0, false);

                function add$2(prototype, frequency) {
                    if (prototype == null) {
                        HWarnings.warn("Null Prototype", "HDrawablePool.add()", HWarnings.NULL_ARGUMENT);
                    } else {
                        $this_1._prototypes.add(prototype);
                        while (frequency-->0) $this_1._prototypes.add(prototype);
                    }
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'add', add$2, false);

                function add$1_2(prototype) {
                    return $this_1.$self.add(prototype, 1);
                }
                $p.addMethod($this_1, 'add', add$1_2, false);

                function request$0() {
                    if ($this_1._prototypes.size() <= 0) {
                        HWarnings.warn("No Prototype", "HDrawablePool.request()", HWarnings.NO_PROTOTYPE);
                        return null;
                    }
                    var drawable = null;
                    var onCreateFlag = false;
                    if ($this_1._inactiveSet.size() > 0) {
                        drawable = $this_1._inactiveSet.pull();
                    } else if ($this_1.$self.count() < $this_1._max) {
                        drawable = $this_1.$self.createRandomDrawable();
                        onCreateFlag = true;
                    } else return null;
                    $this_1._activeSet.add(drawable);
                    if ($this_1._autoParent != null) $this_1._autoParent.add(drawable);
                    if ($this_1._layout != null) $this_1._layout.applyTo(drawable);
                    if ($this_1._colorist != null) $this_1._colorist.applyColor(drawable);
                    if (onCreateFlag) $this_1._onCreate.run(drawable);
                    $this_1._onRequest.run(drawable);
                    return drawable;
                }
                $p.addMethod($this_1, 'request', request$0, false);

                function requestAll$0() {
                    if ($this_1._prototypes.size() <= 0) {
                        HWarnings.warn("No Prototype", "HDrawablePool.requestAll()", HWarnings.NO_PROTOTYPE);
                    } else {
                        while ($this_1.$self.count() < $this_1._max) $this_1.$self.request();
                    }
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'requestAll', requestAll$0, false);

                function release$1(d) {
                    if ($this_1._activeSet.remove(d)) {
                        $this_1._inactiveSet.add(d);
                        if ($this_1._autoParent != null) $this_1._autoParent.remove(d);
                        $this_1._onRelease.run(d);
                        return true;
                    }
                    return false;
                }
                $p.addMethod($this_1, 'release', release$1, false);

                function activeSet$0() {
                    return $this_1._activeSet;
                }
                $p.addMethod($this_1, 'activeSet', activeSet$0, false);

                function inactiveSet$0() {
                    return $this_1._inactiveSet;
                }
                $p.addMethod($this_1, 'inactiveSet', inactiveSet$0, false);

                function createRandomDrawable$0() {
                    var index = HMath.randomInt($this_1._prototypes.size());
                    return $this_1._prototypes.get(index).createCopy();
                }
                $p.addMethod($this_1, 'createRandomDrawable', createRandomDrawable$0, false);

                function iterator$0() {
                    return $this_1._activeSet.iterator();
                }
                $p.addMethod($this_1, 'iterator', iterator$0, false);

                function $constr_0() {
                    $constr(64);
                }

                function $constr_1(maximumDrawables) {
                    $superCstr();

                    $this_1._max = maximumDrawables;
                    $this_1._activeSet = new HLinkedHashSet();
                    $this_1._inactiveSet = new HLinkedHashSet();
                    $this_1._prototypes = new $p.ArrayList();
                    $this_1._onCreate = $this_1._onRequest = $this_1._onRelease = HConstants.NOP;
                }

                function $constr() {
                    if (arguments.length === 0) {
                        $constr_0.apply($this_1, arguments);
                    } else if (arguments.length === 1) {
                        $constr_1.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            HDrawablePool.$interfaces = [];
            return HDrawablePool;
        })();
        $p.HDrawablePool = HDrawablePool;
        var HVertex = (function() {
            function HVertex() {
                var $this_1 = this;

                function $superCstr() {
                    $p.extendClassChain($this_1)
                }
                $p.defineProperty($this_1, 'LINE_TOLERANCE', {
                    get: function() {
                        return HVertex.LINE_TOLERANCE
                    },
                    set: function(val) {
                        HVertex.LINE_TOLERANCE = val
                    }
                });
                $this_1._path = null;
                $this_1._numControlPts = null;
                $this_1._u = 0;
                $this_1._v = 0;
                $this_1._cu1 = 0;
                $this_1._cv1 = 0;
                $this_1._cu2 = 0;
                $this_1._cv2 = 0;

                function createCopy$1(newParentPath) {
                    var copy = new HVertex(newParentPath);
                    copy._numControlPts = $this_1._numControlPts;
                    copy._u = $this_1._u;
                    copy._v = $this_1._v;
                    copy._cu1 = $this_1._cu1;
                    copy._cv1 = $this_1._cv1;
                    copy._cu2 = $this_1._cu2;
                    copy._cv2 = $this_1._cv2;
                    return copy;
                }
                $p.addMethod($this_1, 'createCopy', createCopy$1, false);

                function path$0() {
                    return $this_1._path;
                }
                $p.addMethod($this_1, 'path', path$0, false);

                function numControlPts$1(b) {
                    $this_1._numControlPts = b;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'numControlPts', numControlPts$1, false);

                function numControlPts$0_2() {
                    return $this_1._numControlPts;
                }
                $p.addMethod($this_1, 'numControlPts', numControlPts$0_2, false);

                function isLine$0() {
                    return ($this_1._numControlPts <= 0);
                }
                $p.addMethod($this_1, 'isLine', isLine$0, false);

                function isCurved$0() {
                    return ($this_1._numControlPts > 0);
                }
                $p.addMethod($this_1, 'isCurved', isCurved$0, false);

                function isQuadratic$0() {
                    return ($this_1._numControlPts == 1);
                }
                $p.addMethod($this_1, 'isQuadratic', isQuadratic$0, false);

                function isCubic$0() {
                    return ($this_1._numControlPts >= 2);
                }
                $p.addMethod($this_1, 'isCubic', isCubic$0, false);

                function set$2(x, y) {
                    return $this_1.$self.setUV($this_1._path.x2u(x), $this_1._path.y2v(y));
                }
                $p.addMethod($this_1, 'set', set$2, false);

                function set$4_2(cx, cy, x, y) {
                    return $this_1.$self.setUV($this_1._path.x2u(cx), $this_1._path.y2v(cy), $this_1._path.x2u(x), $this_1._path.y2v(y));
                }
                $p.addMethod($this_1, 'set', set$4_2, false);

                function set$6_3(cx1, cy1, cx2, cy2, x, y) {
                    return $this_1.$self.setUV($this_1._path.x2u(cx1), $this_1._path.y2v(cy1), $this_1._path.x2u(cx2), $this_1._path.y2v(cy2), $this_1._path.x2u(x), $this_1._path.y2v(y));
                }
                $p.addMethod($this_1, 'set', set$6_3, false);

                function setUV$2(u, v) {
                    $this_1._numControlPts = 0;
                    $this_1._u = u;
                    $this_1._v = v;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'setUV', setUV$2, false);

                function setUV$4_2(cu, cv, u, v) {
                    $this_1._numControlPts = 1;
                    $this_1._u = u;
                    $this_1._v = v;
                    $this_1._cu1 = cu;
                    $this_1._cv1 = cv;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'setUV', setUV$4_2, false);

                function setUV$6_3(cu1, cv1, cu2, cv2, u, v) {
                    $this_1._numControlPts = 2;
                    $this_1._u = u;
                    $this_1._v = v;
                    $this_1._cu1 = cu1;
                    $this_1._cv1 = cv1;
                    $this_1._cu2 = cu2;
                    $this_1._cv2 = cv2;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'setUV', setUV$6_3, false);

                function x$1(f) {
                    return $this_1.$self.u($this_1._path.x2u(f));
                }
                $p.addMethod($this_1, 'x', x$1, false);

                function x$0_2() {
                    return $this_1._path.u2x($this_1._u);
                }
                $p.addMethod($this_1, 'x', x$0_2, false);

                function y$1(f) {
                    return $this_1.$self.v($this_1._path.y2v(f));
                }
                $p.addMethod($this_1, 'y', y$1, false);

                function y$0_2() {
                    return $this_1._path.v2y($this_1._v);
                }
                $p.addMethod($this_1, 'y', y$0_2, false);

                function z$1(f) {
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'z', z$1, false);

                function z$0_2() {
                    return 0;
                }
                $p.addMethod($this_1, 'z', z$0_2, false);

                function u$1(f) {
                    $this_1._u = f;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'u', u$1, false);

                function u$0_2() {
                    return $this_1._u;
                }
                $p.addMethod($this_1, 'u', u$0_2, false);

                function v$1(f) {
                    $this_1._v = f;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'v', v$1, false);

                function v$0_2() {
                    return $this_1._v;
                }
                $p.addMethod($this_1, 'v', v$0_2, false);

                function cx$1(f) {
                    return $this_1.$self.cx1(f);
                }
                $p.addMethod($this_1, 'cx', cx$1, false);

                function cx$0_2() {
                    return $this_1.$self.cx1();
                }
                $p.addMethod($this_1, 'cx', cx$0_2, false);

                function cy$1(f) {
                    return $this_1.$self.cy1(f);
                }
                $p.addMethod($this_1, 'cy', cy$1, false);

                function cy$0_2() {
                    return $this_1.$self.cy1();
                }
                $p.addMethod($this_1, 'cy', cy$0_2, false);

                function cu$1(f) {
                    return $this_1.$self.cu1(f);
                }
                $p.addMethod($this_1, 'cu', cu$1, false);

                function cu$0_2() {
                    return $this_1.$self.cu1();
                }
                $p.addMethod($this_1, 'cu', cu$0_2, false);

                function cv$1(f) {
                    return $this_1.$self.cv1(f);
                }
                $p.addMethod($this_1, 'cv', cv$1, false);

                function cv$0_2() {
                    return $this_1.$self.cv1();
                }
                $p.addMethod($this_1, 'cv', cv$0_2, false);

                function cx1$1(f) {
                    return $this_1.$self.cu1($this_1._path.x2u(f));
                }
                $p.addMethod($this_1, 'cx1', cx1$1, false);

                function cx1$0_2() {
                    return $this_1._path.u2x($this_1._cu1);
                }
                $p.addMethod($this_1, 'cx1', cx1$0_2, false);

                function cy1$1(f) {
                    return $this_1.$self.cv1($this_1._path.y2v(f));
                }
                $p.addMethod($this_1, 'cy1', cy1$1, false);

                function cy1$0_2() {
                    return $this_1._path.v2y($this_1._cv1);
                }
                $p.addMethod($this_1, 'cy1', cy1$0_2, false);

                function cu1$1(f) {
                    $this_1._cu1 = f;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'cu1', cu1$1, false);

                function cu1$0_2() {
                    return $this_1._cu1;
                }
                $p.addMethod($this_1, 'cu1', cu1$0_2, false);

                function cv1$1(f) {
                    $this_1._cv1 = f;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'cv1', cv1$1, false);

                function cv1$0_2() {
                    return $this_1._cv1;
                }
                $p.addMethod($this_1, 'cv1', cv1$0_2, false);

                function cx2$1(f) {
                    return $this_1.$self.cu2($this_1._path.x2u(f));
                }
                $p.addMethod($this_1, 'cx2', cx2$1, false);

                function cx2$0_2() {
                    return $this_1._path.u2x($this_1._cu2);
                }
                $p.addMethod($this_1, 'cx2', cx2$0_2, false);

                function cy2$1(f) {
                    return $this_1.$self.cv2($this_1._path.y2v(f));
                }
                $p.addMethod($this_1, 'cy2', cy2$1, false);

                function cy2$0_2() {
                    return $this_1._path.v2y($this_1._cv2);
                }
                $p.addMethod($this_1, 'cy2', cy2$0_2, false);

                function cu2$1(f) {
                    $this_1._cu2 = f;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'cu2', cu2$1, false);

                function cu2$0_2() {
                    return $this_1._cu2;
                }
                $p.addMethod($this_1, 'cu2', cu2$0_2, false);

                function cv2$1(f) {
                    $this_1._cv2 = f;
                    return $this_1.$self;
                }
                $p.addMethod($this_1, 'cv2', cv2$1, false);

                function cv2$0_2() {
                    return $this_1._cv2;
                }
                $p.addMethod($this_1, 'cv2', cv2$0_2, false);

                function computeMinMax$1(minmax) {
                    if ($this_1._u < minmax[0]) minmax[0] = $this_1._u;
                    else if ($this_1._u > minmax[2]) minmax[2] = $this_1._u;
                    if ($this_1._v < minmax[1]) minmax[1] = $this_1._v;
                    else if ($this_1._v > minmax[3]) minmax[3] = $this_1._v;
                    switch ($this_1._numControlPts) {
                    case 2:
                        if ($this_1._cu2 < minmax[0]) minmax[0] = $this_1._cu2;
                        else if ($this_1._cu2 > minmax[2]) minmax[2] = $this_1._cu2;
                        if ($this_1._cv2 < minmax[1]) minmax[1] = $this_1._cv2;
                        else if ($this_1._cv2 > minmax[3]) minmax[3] = $this_1._cv2;
                    case 1:
                        if ($this_1._cu1 < minmax[0]) minmax[0] = $this_1._cu1;
                        else if ($this_1._cu1 > minmax[2]) minmax[2] = $this_1._cu1;
                        if ($this_1._cv1 < minmax[1]) minmax[1] = $this_1._cv1;
                        else if ($this_1._cv1 > minmax[3]) minmax[3] = $this_1._cv1;
                        break;
                    default:
                        break;
                    }
                }
                $p.addMethod($this_1, 'computeMinMax', computeMinMax$1, false);

                function adjust$4(offsetU, offsetV, oldW, oldH) {
                    $this_1.$self.x(oldW * ($this_1._u += offsetU)).y(oldH * ($this_1._v += offsetV));
                    switch ($this_1._numControlPts) {
                    case 2:
                        $this_1.$self.cx2(oldW * ($this_1._cu2 += offsetU)).cy2(oldH * ($this_1._cv2 += offsetV));
                    case 1:
                        $this_1.$self.cx1(oldW * ($this_1._cu1 += offsetU)).cy1(oldH * ($this_1._cv1 += offsetV));
                        break;
                    default:
                        break;
                    }
                }
                $p.addMethod($this_1, 'adjust', adjust$4, false);

                function dv$2(pv, t) {
                    switch ($this_1._numControlPts) {
                    case 1:
                        return HMath.bezierTangent(pv, $this_1._cv1, $this_1._v, t);
                    case 2:
                        return HMath.bezierTangent(pv, $this_1._cv2, $this_1._cv2, $this_1._v, t);
                    default:
                        return $this_1._v - pv;
                    }
                }
                $p.addMethod($this_1, 'dv', dv$2, false);

                function intersectTest$5(pprev, prev, tu, tv, openPath) {
                    var u1 = prev._u;
                    var v1 = prev._v;
                    var u2 = $this_1._u;
                    var v2 = $this_1._v;
                    if ($this_1.$self.isLine() || openPath) {
                        return ((v1 <= tv && tv < v2) || (v2 <= tv && tv < v1)) && tu < (u1 + (u2 - u1) * (tv - v1) / (v2 - v1));
                    } else if ($this_1.$self.isQuadratic()) {
                        var b = false;
                        var params = $p.createJavaArray('float', [2]);
                        var numParams = HMath.bezierParam(v1, $this_1._cv1, v2, tv, params);
                        for (var i = 0; i < numParams; ++i) {
                            var t = params[i];
                            if (0 < t && t < 1 && tu < HMath.bezierPoint(u1, $this_1._cu1, u2, t)) {
                                if (HMath.bezierTangent(v1, $this_1._cv1, v2, t) == 0) continue;
                                b = !b;
                            } else if (t == 0 && tu < u1) {
                                var ptanv = prev.dv(pprev._v, 1);
                                if (ptanv == 0) ptanv = prev.dv(pprev._v, 0.9375);
                                var ntanv = HMath.bezierTangent(v1, $this_1._cv1, v2, 0);
                                if (ntanv == 0) ntanv = HMath.bezierTangent(v1, $this_1._cv1, v2, 0.0625);
                                if (ptanv < 0 == ntanv < 0) b = !b;
                            }
                        }
                        return b;
                    } else {
                        var b = false;
                        var params = $p.createJavaArray('float', [3]);
                        var numParams = HMath.bezierParam(v1, $this_1._cv1, $this_1._cv2, v2, tv, params);
                        for (var i = 0; i < numParams; ++i) {
                            var t = params[i];
                            if (0 < t && t < 1 && tu < HMath.bezierPoint(u1, $this_1._cu1, $this_1._cu2, u2, t)) {
                                if (HMath.bezierTangent(v1, $this_1._cv1, $this_1._cv2, $this_1._v, t) == 0) {
                                    var ptanv = HMath.bezierTangent(v1, $this_1._cv1, $this_1._cv2, v2, Math.max(t - 0.0625, 0));
                                    var ntanv = HMath.bezierTangent(v1, $this_1._cv1, $this_1._cv2, v2, Math.min(t + .625, 1));
                                    if (ptanv < 0 != ntanv < 0) continue;
                                }
                                b = !b;
                            } else if (t == 0 && tu < u1) {
                                var ptanv = prev.dv(pprev._v, 1);
                                if (ptanv == 0) ptanv = prev.dv(pprev._v, 0.9375);
                                var ntanv = HMath.bezierTangent(v1, $this_1._cv1, $this_1._cv2, 0);
                                if (ntanv == 0) ntanv = HMath.bezierTangent(v1, $this_1._cv1, $this_1._cv2, v2, 0.0625);
                                if (ptanv < 0 == ntanv < 0) b = !b;
                            }
                        }
                        return b;
                    }
                }
                $p.addMethod($this_1, 'intersectTest', intersectTest$5, false);

                function inLine$3(prev, relX, relY) {
                    var x1 = prev.x();
                    var y1 = prev.y();
                    var x2 = $this_1.$self.x();
                    var y2 = $this_1.$self.y();
                    if ($this_1.$self.isLine()) {
                        var diffv = y2 - y1;
                        if (diffv == 0) {
                            return HMath.isEqual(relY, y1, HVertex.LINE_TOLERANCE) && ((x1 <= relX && relX <= x2) || (x2 <= relX && relX <= x1));
                        }
                        var t = (relY - y1) / diffv;
                        return (0 <= t && t <= 1) && HMath.isEqual(relX, x1 + (x2 - x1) * t, HVertex.LINE_TOLERANCE);
                    } else if ($this_1.$self.isQuadratic()) {
                        var params = $p.createJavaArray('float', [2]);
                        var numParams = HMath.bezierParam(y1, $this_1.$self.cy1(), y2, relY, params);
                        for (var i = 0; i < numParams; ++i) {
                            var t = params[i];
                            if (0 <= t && t <= 1) {
                                var bzval = HMath.bezierPoint(x1, $this_1.$self.cx1(), x2, t);
                                if (HMath.isEqual(relX, bzval, HVertex.LINE_TOLERANCE)) return true;
                            }
                        }
                        return false;
                    } else {
                        var params = $p.createJavaArray('float', [3]);
                        var numParams = HMath.bezierParam(y1, $this_1.$self.cy1(), $this_1.$self.cy2(), y2, relY, params);
                        for (var i = 0; i < numParams; ++i) {
                            var t = params[i];
                            if (0 <= t && t <= 1) {
                                var bzval = HMath.bezierPoint(x1, $this_1.$self.cx1(), $this_1.$self.cx2(), x2, t);
                                if (HMath.isEqual(relX, bzval, HVertex.LINE_TOLERANCE)) return true;
                            }
                        }
                        return false;
                    }
                }
                $p.addMethod($this_1, 'inLine', inLine$3, false);

                function draw$4(g, drawX, drawY, isSimple) {
                    var drX = drawX + $this_1.$self.x();
                    var drY = drawY + $this_1.$self.y();
                    if ($this_1.$self.isLine() || isSimple) {
                        g.vertex(drX, drY);
                    } else if ($this_1.$self.isQuadratic()) {
                        var drCX = drawX + $this_1.$self.cx1();
                        var drCY = drawY + $this_1.$self.cy1();
                        g.quadraticVertex(drCX, drCY, drX, drY);
                    } else {
                        var drCX1 = drawX + $this_1.$self.cx1();
                        var drCY1 = drawY + $this_1.$self.cy1();
                        var drCX2 = drawX + $this_1.$self.cx2();
                        var drCY2 = drawY + $this_1.$self.cy2();
                        g.bezierVertex(drCX1, drCY1, drCX2, drCY2, drX, drY);
                    }
                }
                $p.addMethod($this_1, 'draw', draw$4, false);

                function drawHandles$4(g, prev, drawX, drawY) {
                    if ($this_1.$self.isLine()) return;
                    var x1 = drawX + prev.x();
                    var y1 = drawY + prev.y();
                    var x2 = drawX + $this_1.$self.x();
                    var y2 = drawY + $this_1.$self.y();
                    g.fill(HPath.HANDLE_FILL);
                    g.stroke(HPath.HANDLE_STROKE);
                    g.strokeWeight(HPath.HANDLE_STROKE_WEIGHT);
                    if ($this_1.$self.isQuadratic()) {
                        var drCX = drawX + $this_1.$self.cx1();
                        var drCY = drawY + $this_1.$self.cy1();
                        g.line(x1, y1, drCX, drCY);
                        g.line(x2, y2, drCX, drCY);
                        g.ellipse(drCX, drCY, HPath.HANDLE_SIZE, HPath.HANDLE_SIZE);
                        g.fill(HPath.HANDLE_STROKE);
                        g.ellipse(x1, y1, HPath.HANDLE_SIZE / 2, HPath.HANDLE_SIZE / 2);
                        g.ellipse(x2, y2, HPath.HANDLE_SIZE / 2, HPath.HANDLE_SIZE / 2);
                    } else {
                        var drCX1 = drawX + $this_1.$self.cx1();
                        var drCY1 = drawY + $this_1.$self.cy1();
                        var drCX2 = drawX + $this_1.$self.cx2();
                        var drCY2 = drawY + $this_1.$self.cy2();
                        g.line(x1, y1, drCX1, drCY1);
                        g.line(x2, y2, drCX2, drCY2);
                        g.line(drCX1, drCY1, drCX2, drCY2);
                        g.ellipse(drCX1, drCY1, HPath.HANDLE_SIZE, HPath.HANDLE_SIZE);
                        g.ellipse(drCX2, drCY2, HPath.HANDLE_SIZE, HPath.HANDLE_SIZE);
                        g.fill(HPath.HANDLE_STROKE);
                        g.ellipse(x1, y1, HPath.HANDLE_SIZE / 2, HPath.HANDLE_SIZE / 2);
                        g.ellipse(x2, y2, HPath.HANDLE_SIZE / 2, HPath.HANDLE_SIZE / 2);
                    }
                }
                $p.addMethod($this_1, 'drawHandles', drawHandles$4, false);

                function $constr_1(parentPath) {
                    $superCstr();

                    $this_1._path = parentPath;
                }

                function $constr() {
                    if (arguments.length === 1) {
                        $constr_1.apply($this_1, arguments);
                    } else $superCstr();
                }
                $constr.apply(null, arguments);
            }
            $p.extendInterfaceMembers(HVertex, HLocatable);
            HVertex.LINE_TOLERANCE = 1.5;
            HVertex.$interfaces = [HLocatable];
            return HVertex;
        })();
        $p.HVertex = HVertex;

        $p.blueCellGrid = null;
        $p.lazyBlueCellGrid = null;

        function setup() {
            $p.size(800, 800);
            H.init(this).background(0xFFFFFFFF);

            $p.blueCellGrid = new BlueCellGrid();
            $p.blueCellGrid.size($p.width, $p.height).alpha(255);
            $p.lazyBlueCellGrid = new PCHLazyDrawable($p.blueCellGrid);
            H.add($p.lazyBlueCellGrid);
        }
        $p.setup = setup;
        setup = setup.bind($p);

        function draw() {
            H.drawStage();
        }
        $p.draw = draw;
        draw = draw.bind($p);

        function keyPressed() {
            if ($p.key == (new $p.Character('p'))) {
                $p.saveFrame();
            }
            if ($p.key == (new $p.Character('g'))) {
                lazyBlueCellGrid.needsRender(true);
            }
        }
        $p.keyPressed = keyPressed;
        keyPressed = keyPressed.bind($p);

        $p.sketchCanvasDidResize = function() {
            $p.blueCellGrid.size($p.width, $p.height);
            $p.lazyBlueCellGrid.needsRender(true);
        }

    } // end -- sketchCode() declaration

}; // end -- sketchCollection["sketch_2015_0620d"] declaration